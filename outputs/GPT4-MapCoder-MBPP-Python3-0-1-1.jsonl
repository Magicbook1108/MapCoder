{"name": "mbpp_91_find_substring", "language": "Python3", "prompt": "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    \"\"\"\n\tWrite a function to check if a string is present as a substring in a given list of string values.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_substring", "test": "def check(candidate):\n    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ack') == True\n    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'abc') == False\n    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ange') == True\n\ndef test_check():\n    check(find_substring)\n\ntest_check()\n", "sample_io": ["assert find_substring(['red', 'black', 'white', 'green', 'orange'], 'ack') == True"], "source_codes": ["\nfrom typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n\n\n"], "responses": ["\nfrom typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for string in str1:\n        if sub_str in string:\n            return True\n    return False\n\n\n"], "prompt_tokens": [3789], "completion_tokens": [2494], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_91_find_substring"}
{"name": "mbpp_802_count_rotation", "language": "Python3", "prompt": "from typing import List\n\ndef count_rotation(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_rotation", "test": "def check(candidate):\n    assert candidate([3, 2, 1]) == 1\n    assert candidate([4, 5, 1, 2, 3]) == 2\n    assert candidate([7, 8, 9, 1, 2, 3]) == 3\n    assert candidate([1, 2, 3]) == 0\n    assert candidate([1, 3, 2]) == 2\n\ndef test_check():\n    check(count_rotation)\n\ntest_check()\n", "sample_io": ["assert count_rotation([3, 2, 1]) == 1"], "source_codes": ["\nfrom typing import List\n\ndef count_rotation(arr: List[int]) -> int:\n    left, right = 0, len(arr) - 1\n    \n    # Handle the case of an empty array\n    if not arr:\n        return 0\n    \n    # Handle the case of a single element\n    if len(arr) == 1:\n        return 0\n    \n    # Handle the case of a sorted array\n    if arr[left] <= arr[right]:\n        return 0\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if mid is the pivot\n        if mid < right and arr[mid] > arr[mid + 1]:\n            return mid + 1\n        if mid > left and arr[mid] < arr[mid - 1]:\n            return mid\n        \n        # Determine which half to search\n        if arr[left] <= arr[mid]:  # Left half is sorted\n            left = mid + 1\n        else:  # Right half is sorted\n            right = mid - 1\n            \n    return 0  # If the array is not rotated\n\n\n"], "responses": ["\nfrom typing import List\n\ndef count_rotation(arr: List[int]) -> int:\n    left, right = 0, len(arr) - 1\n    \n    # Handle the case of an empty array\n    if not arr:\n        return 0\n    \n    # Handle the case of a single element\n    if len(arr) == 1:\n        return 0\n    \n    # Handle the case of a sorted array\n    if arr[left] <= arr[right]:\n        return 0\n    \n    while left <= right:\n        mid = (left + right) // 2\n        \n        # Check if mid is the pivot\n        if mid < right and arr[mid] > arr[mid + 1]:\n            return mid + 1\n        if mid > left and arr[mid] < arr[mid - 1]:\n            return mid\n        \n        # Determine which half to search\n        if arr[left] <= arr[mid]:  # Left half is sorted\n            left = mid + 1\n        else:  # Right half is sorted\n            right = mid - 1\n            \n    return 0  # If the array is not rotated\n\n\n"], "prompt_tokens": [26201], "completion_tokens": [15356], "no_of_try": 1, "api_calls": 33, "is_solved": false, "task_id": "mbpp_802_count_rotation"}
{"name": "mbpp_577_last_Digit_Factorial", "language": "Python3", "prompt": "def last_Digit_Factorial(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the last digit in factorial of a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "last_Digit_Factorial", "test": "def check(candidate):\n    assert candidate(4) == 4\n    assert candidate(21) == 0\n    assert candidate(30) == 0\n\ndef test_check():\n    check(last_Digit_Factorial)\n\ntest_check()\n", "sample_io": ["assert last_Digit_Factorial(4) == 4"], "source_codes": ["\ndef last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    last_digit = 1\n    for i in range(2, n + 1):\n        last_digit = (last_digit * i) % 10\n    return last_digit\n\n# Sample Test cases\nassert last_Digit_Factorial(4) == 4\n\n\n"], "responses": ["\ndef last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    last_digit = 1\n    for i in range(2, n + 1):\n        last_digit = (last_digit * i) % 10\n    return last_digit\n\n# Sample Test cases\nassert last_Digit_Factorial(4) == 4\n\n\n"], "prompt_tokens": [3907], "completion_tokens": [2274], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_577_last_Digit_Factorial"}
{"name": "mbpp_619_move_num", "language": "Python3", "prompt": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "move_num", "test": "def check(candidate):\n    assert candidate('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n    assert candidate('Avengers124Assemble') == 'AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n", "sample_io": ["assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"], "source_codes": ["\ndef move_num(test_str: str) -> str:\n    letters = ''\n    numbers = ''\n    \n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n        else:\n            letters += char\n            \n    return letters + numbers\n\n# Sample Test case\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\n\n"], "responses": ["\ndef move_num(test_str: str) -> str:\n    letters = ''\n    numbers = ''\n    \n    for char in test_str:\n        if char.isdigit():\n            numbers += char\n        else:\n            letters += char\n            \n    return letters + numbers\n\n# Sample Test case\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\n\n"], "prompt_tokens": [3820], "completion_tokens": [1960], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_619_move_num"}
{"name": "mbpp_117_list_to_float", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef list_to_float(test_list: List[Tuple[str, str]]) -> List[Tuple[float, float]]:\n    \"\"\"\n\tWrite a function to convert all possible convertible elements in a list of lists to floats.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "list_to_float", "test": "def check(candidate):\n    assert candidate([('3', '4'), ('1', '26.45'), ('7.32', '8'), ('4', '8')]) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]\n    assert candidate([('4', '4'), ('2', '27'), ('4.12', '9'), ('7', '11')]) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\n    assert candidate([('6', '78'), ('5', '26.45'), ('1.33', '4'), ('82', '13')]) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\n\ndef test_check():\n    check(list_to_float)\n\ntest_check()\n", "sample_io": ["assert list_to_float([('3', '4'), ('1', '26.45'), ('7.32', '8'), ('4', '8')]) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef list_to_float(test_list: List[Tuple[str, str]]) -> List[Tuple[float, float]]:\n    results = []\n    for item in test_list:\n        converted_tuple = []\n        for value in item:\n            try:\n                converted_tuple.append(float(value))\n            except ValueError:\n                converted_tuple.append(None)  # or a default value\n        results.append(tuple(converted_tuple))\n    return results\n\n\n"], "responses": ["\nfrom typing import List, Tuple\n\ndef list_to_float(test_list: List[Tuple[str, str]]) -> List[Tuple[float, float]]:\n    results = []\n    for item in test_list:\n        converted_tuple = []\n        for value in item:\n            try:\n                converted_tuple.append(float(value))\n            except ValueError:\n                converted_tuple.append(None)  # or a default value\n        results.append(tuple(converted_tuple))\n    return results\n\n\n"], "prompt_tokens": [4538], "completion_tokens": [2438], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_117_list_to_float"}
{"name": "mbpp_594_diff_even_odd", "language": "Python3", "prompt": "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the difference of the first even and first odd number of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "diff_even_odd", "test": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 4, 1, 6, 8]) == 3\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\n    assert candidate([1, 5, 7, 9, 10]) == 9\n\ndef test_check():\n    check(diff_even_odd)\n\ntest_check()\n", "sample_io": ["assert diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 3"], "source_codes": ["\nfrom typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        if num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    return 0\n\n\n"], "responses": ["\nfrom typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        if num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    return 0\n\n\n"], "prompt_tokens": [4655], "completion_tokens": [2791], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_594_diff_even_odd"}
{"name": "mbpp_723_count_same_pair", "language": "Python3", "prompt": "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"\n\tThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_same_pair", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]) == 4\n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1\n    assert candidate([0, 1, 1, 2], [0, 1, 2, 2]) == 3\n\ndef test_check():\n    check(count_same_pair)\n\ntest_check()\n", "sample_io": ["assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]) == 4"], "source_codes": ["\nfrom typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n\n\n"], "responses": ["\nfrom typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n\n\n"], "prompt_tokens": [3873], "completion_tokens": [1882], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_723_count_same_pair"}
{"name": "mbpp_788_new_tuple", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef new_tuple(test_list: List[str], test_str: str) -> Tuple[str, str, str]:\n    \"\"\"\n\tWrite a function to create a new tuple from the given string and list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "new_tuple", "test": "def check(candidate):\n    assert candidate(['WEB', 'is'], 'best') == ('WEB', 'is', 'best')\n    assert candidate(['We', 'are'], 'Developers') == ('We', 'are', 'Developers')\n    assert candidate(['Part', 'is'], 'Wrong') == ('Part', 'is', 'Wrong')\n\ndef test_check():\n    check(new_tuple)\n\ntest_check()\n", "sample_io": ["assert new_tuple(['WEB', 'is'], 'best') == ('WEB', 'is', 'best')"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef new_tuple(test_list: List[str], test_str: str) -> Tuple[str, str, str]:\n    return (test_list[0], test_list[1], test_str)\n\n\n"], "responses": ["\nfrom typing import List, Tuple\n\ndef new_tuple(test_list: List[str], test_str: str) -> Tuple[str, str, str]:\n    return (test_list[0], test_list[1], test_str)\n\n\n"], "prompt_tokens": [3727], "completion_tokens": [1959], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_788_new_tuple"}
{"name": "mbpp_569_sort_sublists", "language": "Python3", "prompt": "from typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_sublists", "test": "def check(candidate):\n    assert candidate([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']]) == [['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n    assert candidate([['a', 'b'], ['d', 'c'], ['g', 'h'], ['f', 'e']]) == [['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n", "sample_io": ["assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"], "source_codes": ["\nfrom typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    sorted_sublists = []\n    for sublist in list1:\n        sorted_sublists.append(sorted(sublist))\n    return sorted_sublists\n\n\n"], "responses": ["\nfrom typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    sorted_sublists = []\n    for sublist in list1:\n        sorted_sublists.append(sorted(sublist))\n    return sorted_sublists\n\n\n"], "prompt_tokens": [4777], "completion_tokens": [2626], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_569_sort_sublists"}
{"name": "mbpp_787_text_match_three", "language": "Python3", "prompt": "def text_match_three(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an a followed by three 'b'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_three", "test": "def check(candidate):\n    assert candidate('ac') == False\n    assert candidate('dc') == False\n    assert candidate('abbbba') == True\n    assert candidate('caacabbbba') == True\n\ndef test_check():\n    check(text_match_three)\n\ntest_check()\n", "sample_io": ["assert text_match_three('ac') == False"], "source_codes": ["\nimport re\n\ndef text_match_three(text: str) -> bool:\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))\n\n\n"], "responses": ["\nimport re\n\ndef text_match_three(text: str) -> bool:\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))\n\n\n"], "prompt_tokens": [3392], "completion_tokens": [1793], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_787_text_match_three"}
{"name": "mbpp_591_swap_List", "language": "Python3", "prompt": "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to interchange the first and last elements in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "swap_List", "test": "def check(candidate):\n    assert candidate([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n    assert candidate([1, 2, 3]) == [3, 2, 1]\n    assert candidate([4, 5, 6]) == [6, 5, 4]\n\ndef test_check():\n    check(swap_List)\n\ntest_check()\n", "sample_io": ["assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]"], "source_codes": ["\nfrom typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n\n\n"], "responses": ["\nfrom typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n\n\n"], "prompt_tokens": [3598], "completion_tokens": [2131], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_591_swap_List"}
{"name": "mbpp_95_Find_Min_Length", "language": "Python3", "prompt": "from typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a python function to find the length of the smallest list in a list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Min_Length", "test": "def check(candidate):\n    assert candidate([[1], [1, 2]]) == 1\n    assert candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]]) == 2\n    assert candidate([[3, 3, 3], [4, 4, 4, 4]]) == 3\n\ndef test_check():\n    check(Find_Min_Length)\n\ntest_check()\n", "sample_io": ["assert Find_Min_Length([[1], [1, 2]]) == 1"], "source_codes": ["\nfrom typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> int:\n    if not lst:\n        return 0\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n\n\n"], "responses": ["\nfrom typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> int:\n    if not lst:\n        return 0\n    min_length = len(lst[0])\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n    return min_length\n\n\n"], "prompt_tokens": [3759], "completion_tokens": [2365], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_95_Find_Min_Length"}
{"name": "mbpp_272_rear_extract", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple[int, str, int]]) -> List[int]:\n    \"\"\"\n\tWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rear_extract", "test": "def check(candidate):\n    assert candidate([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n    assert candidate([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\n    assert candidate([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]\n\ndef test_check():\n    check(rear_extract)\n\ntest_check()\n", "sample_io": ["assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple[int, str, int]]) -> List[int]:\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements\n\n\n"], "responses": ["\nfrom typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple[int, str, int]]) -> List[int]:\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements\n\n\n"], "prompt_tokens": [3908], "completion_tokens": [2026], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_272_rear_extract"}
{"name": "mbpp_429_and_tuples", "language": "Python3", "prompt": "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to extract the elementwise and tuples from the given two tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "and_tuples", "test": "def check(candidate):\n    assert candidate((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n    assert candidate((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\n    assert candidate((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)\n\ndef test_check():\n    check(and_tuples)\n\ntest_check()\n", "sample_io": ["assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"], "source_codes": ["\nfrom typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n\n# Sample Test case\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\n\n"], "responses": ["\nfrom typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n\n# Sample Test case\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\n\n"], "prompt_tokens": [4174], "completion_tokens": [2251], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_429_and_tuples"}
{"name": "mbpp_437_remove_odd", "language": "Python3", "prompt": "def remove_odd(str1: str) -> str:\n    \"\"\"\n\tWrite a function to remove odd characters in a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_odd", "test": "def check(candidate):\n    assert candidate('python') == 'yhn'\n    assert candidate('program') == 'rga'\n    assert candidate('language') == 'agae'\n\ndef test_check():\n    check(remove_odd)\n\ntest_check()\n", "sample_io": ["assert remove_odd('python') == 'yhn'"], "source_codes": ["\ndef remove_odd(str1: str) -> str:\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 1:\n            result += str1[i]\n    return result\n\n# Sample Test case\nassert remove_odd('python') == 'yhn'\n\n\n"], "responses": ["\ndef remove_odd(str1: str) -> str:\n    result = \"\"\n    for i in range(len(str1)):\n        if i % 2 == 1:\n            result += str1[i]\n    return result\n\n# Sample Test case\nassert remove_odd('python') == 'yhn'\n\n\n"], "prompt_tokens": [3772], "completion_tokens": [1929], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_437_remove_odd"}
{"name": "mbpp_433_check_greater", "language": "Python3", "prompt": "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the entered number is greater than the elements of the given array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_433_check_greater.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_greater", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], 4) == False\n    assert candidate([2, 3, 4, 5, 6], 8) == True\n    assert candidate([9, 7, 4, 8, 6, 1], 11) == True\n\ndef test_check():\n    check(check_greater)\n\ntest_check()\n", "sample_io": ["assert check_greater([1, 2, 3, 4, 5], 4) == False"], "source_codes": ["\nfrom typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    for num in arr:\n        if number <= num:  # Check if number is less than or equal to any element\n            return False\n    return True  # Return True only if number is greater than all elements\n\n\n"], "responses": ["\nfrom typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    for num in arr:\n        if number <= num:  # Check if number is less than or equal to any element\n            return False\n    return True  # Return True only if number is greater than all elements\n\n\n"], "prompt_tokens": [11458], "completion_tokens": [5206], "no_of_try": 1, "api_calls": 24, "is_solved": true, "task_id": "mbpp_433_check_greater"}
{"name": "mbpp_612_merge", "language": "Python3", "prompt": "from typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    \"\"\"\n\tWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_612_merge.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "merge", "test": "def check(candidate):\n    assert candidate([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n    assert candidate([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\n    assert candidate([['x', 'y', 'z'], ['a', 'b', 'c'], ['m', 'n', 'o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'], ['z', 'c', 'o']]\n\ndef test_check():\n    check(merge)\n\ntest_check()\n", "sample_io": ["assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"], "source_codes": ["\nfrom typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    first_elements = []\n    second_elements = []\n    \n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    \n    return [first_elements, second_elements]\n\n\n"], "responses": ["\nfrom typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    first_elements = []\n    second_elements = []\n    \n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    \n    return [first_elements, second_elements]\n\n\n"], "prompt_tokens": [4052], "completion_tokens": [1847], "no_of_try": 1, "api_calls": 10, "is_solved": false, "task_id": "mbpp_612_merge"}
{"name": "mbpp_587_list_tuple", "language": "Python3", "prompt": "from typing import List, Any\n\ndef list_tuple(listx: List[int]) -> Any:\n    \"\"\"\n\tWrite a function to convert a list to a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_587_list_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "list_tuple", "test": "def check(candidate):\n    assert candidate([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)\n    assert candidate([2, 4, 5, 6, 2, 3, 4, 4, 7]) == (2, 4, 5, 6, 2, 3, 4, 4, 7)\n    assert candidate([58, 44, 56]) == (58, 44, 56)\n\ndef test_check():\n    check(list_tuple)\n\ntest_check()\n", "sample_io": ["assert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)"], "source_codes": ["\nfrom typing import List, Any\n\ndef list_tuple(listx: List[int]) -> Any:\n    return tuple(listx)\n\n# Sample Test cases\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)\nassert list_tuple([]) == ()\nassert list_tuple([1]) == (1,)\nassert list_tuple([1, 2, 3]) == (1, 2, 3)\n\n\n"], "responses": ["\nfrom typing import List, Any\n\ndef list_tuple(listx: List[int]) -> Any:\n    return tuple(listx)\n\n# Sample Test cases\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)\nassert list_tuple([]) == ()\nassert list_tuple([1]) == (1,)\nassert list_tuple([1, 2, 3]) == (1, 2, 3)\n\n\n"], "prompt_tokens": [3798], "completion_tokens": [1999], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_587_list_tuple"}
{"name": "mbpp_804_is_product_even", "language": "Python3", "prompt": "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check whether the product of numbers in a list is even or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_804_is_product_even.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_product_even", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == True\n    assert candidate([1, 2, 1, 4]) == True\n    assert candidate([1, 1]) == False\n\ndef test_check():\n    check(is_product_even)\n\ntest_check()\n", "sample_io": ["assert is_product_even([1, 2, 3]) == True"], "source_codes": ["\nfrom typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for number in arr:\n        if number % 2 == 0:\n            return True\n    return False\n\n\n"], "responses": ["\nfrom typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for number in arr:\n        if number % 2 == 0:\n            return True\n    return False\n\n\n"], "prompt_tokens": [3227], "completion_tokens": [1843], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_804_is_product_even"}
{"name": "mbpp_559_max_sub_array_sum", "language": "Python3", "prompt": "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    \"\"\"\n\tWrite a function to find the sum of the largest contiguous sublist in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sub_array_sum", "test": "def check(candidate):\n    assert candidate([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n    assert candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\n    assert candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10\n\ndef test_check():\n    check(max_sub_array_sum)\n\ntest_check()\n", "sample_io": ["assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7"], "source_codes": ["\nfrom typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for num in a:\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum\n\n\n"], "responses": ["\nfrom typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    \n    for num in a:\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n            \n    return max_sum\n\n\n"], "prompt_tokens": [3831], "completion_tokens": [2328], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_559_max_sub_array_sum"}
{"name": "mbpp_61_count_Substrings", "language": "Python3", "prompt": "def count_Substrings(s: str) -> int:\n    \"\"\"\n\tWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Substrings", "test": "def check(candidate):\n    assert candidate('112112') == 6\n    assert candidate('111') == 6\n    assert candidate('1101112') == 12\n\ndef test_check():\n    check(count_Substrings)\n\ntest_check()\n", "sample_io": ["assert count_Substrings('112112') == 6"], "source_codes": ["\ndef count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            digit_sum = sum(int(char) for char in substring)\n            length = j - i + 1\n            \n            if digit_sum == length:\n                count += 1\n                \n    return count\n\n# Sample Test case\nassert count_Substrings('112112') == 6\n\n\n"], "responses": ["\ndef count_Substrings(s: str) -> int:\n    count = 0\n    n = len(s)\n    \n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            digit_sum = sum(int(char) for char in substring)\n            length = j - i + 1\n            \n            if digit_sum == length:\n                count += 1\n                \n    return count\n\n# Sample Test case\nassert count_Substrings('112112') == 6\n\n\n"], "prompt_tokens": [3863], "completion_tokens": [2713], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_61_count_Substrings"}
{"name": "mbpp_105_count", "language": "Python3", "prompt": "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    \"\"\"\n\tWrite a python function to count true booleans in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count", "test": "def check(candidate):\n    assert candidate([True, False, True]) == 2\n    assert candidate([False, False]) == 0\n    assert candidate([True, True, True]) == 3\n\ndef test_check():\n    check(count)\n\ntest_check()\n", "sample_io": ["assert count([True, False, True]) == 2"], "source_codes": ["\nfrom typing import List\n\ndef count(lst: List[bool]) -> int:\n    counter = 0\n    for value in lst:\n        if value:\n            counter += 1\n    return counter\n\n\n"], "responses": ["\nfrom typing import List\n\ndef count(lst: List[bool]) -> int:\n    counter = 0\n    for value in lst:\n        if value:\n            counter += 1\n    return counter\n\n\n"], "prompt_tokens": [3825], "completion_tokens": [1870], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_105_count"}
{"name": "mbpp_808_check_K", "language": "Python3", "prompt": "from typing import List\n\ndef check_K(test_tup: List[int], K: int) -> bool:\n    \"\"\"\n\tWrite a function to check if the given tuples contain the k or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_K", "test": "def check(candidate):\n    assert candidate([10, 4, 5, 6, 8], 6) == True\n    assert candidate([1, 2, 3, 4, 5, 6], 7) == False\n    assert candidate([7, 8, 9, 44, 11, 12], 11) == True\n\ndef test_check():\n    check(check_K)\n\ntest_check()\n", "sample_io": ["assert check_K([10, 4, 5, 6, 8], 6) == True"], "source_codes": ["\nfrom typing import List\n\ndef check_K(test_tup: List[int], K: int) -> bool:\n    for num in test_tup:\n        if num == K:\n            return True\n    return False\n\n\n"], "responses": ["\nfrom typing import List\n\ndef check_K(test_tup: List[int], K: int) -> bool:\n    for num in test_tup:\n        if num == K:\n            return True\n    return False\n\n\n"], "prompt_tokens": [3471], "completion_tokens": [1875], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_808_check_K"}
{"name": "mbpp_555_difference", "language": "Python3", "prompt": "def difference(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "difference", "test": "def check(candidate):\n    assert candidate(3) == 30\n    assert candidate(5) == 210\n    assert candidate(2) == 6\n\ndef test_check():\n    check(difference)\n\ntest_check()\n", "sample_io": ["assert difference(3) == 30"], "source_codes": ["\ndef difference(n: int) -> int:\n    sum_n = n * (n + 1) // 2\n    sum_cubes = sum_n ** 2\n    return sum_cubes - sum_n\n\n# Sample Test cases\nassert difference(3) == 30\n\n\n"], "responses": ["\ndef difference(n: int) -> int:\n    sum_n = n * (n + 1) // 2\n    sum_cubes = sum_n ** 2\n    return sum_cubes - sum_n\n\n# Sample Test cases\nassert difference(3) == 30\n\n\n"], "prompt_tokens": [4018], "completion_tokens": [2271], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_555_difference"}
{"name": "mbpp_57_find_Max_Num", "language": "Python3", "prompt": "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the largest number that can be formed with the given list of digits.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Max_Num", "test": "def check(candidate):\n    assert candidate([1, 2, 3]) == 321\n    assert candidate([4, 5, 6, 1]) == 6541\n    assert candidate([1, 2, 3, 9]) == 9321\n\ndef test_check():\n    check(find_Max_Num)\n\ntest_check()\n", "sample_io": ["assert find_Max_Num([1, 2, 3]) == 321"], "source_codes": ["\nfrom typing import List\nfrom functools import cmp_to_key\n\ndef custom_compare(x: str, y: str) -> int:\n    if x + y > y + x:\n        return -1\n    elif x + y < y + x:\n        return 1\n    else:\n        return 0\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = list(map(str, arr))\n    arr_str.sort(key=cmp_to_key(custom_compare))\n    largest_num = ''.join(arr_str)\n    return int(largest_num) if largest_num else 0\n\n\n"], "responses": ["\nfrom typing import List\nfrom functools import cmp_to_key\n\ndef custom_compare(x: str, y: str) -> int:\n    if x + y > y + x:\n        return -1\n    elif x + y < y + x:\n        return 1\n    else:\n        return 0\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr_str = list(map(str, arr))\n    arr_str.sort(key=cmp_to_key(custom_compare))\n    largest_num = ''.join(arr_str)\n    return int(largest_num) if largest_num else 0\n\n\n"], "prompt_tokens": [3525], "completion_tokens": [2092], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_57_find_Max_Num"}
{"name": "mbpp_120_max_product_tuple", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_product_tuple", "test": "def check(candidate):\n    assert candidate([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\n    assert candidate([(10, 20), (15, 2), (5, 10)]) == 200\n    assert candidate([(11, 44), (10, 15), (20, 5), (12, 9)]) == 484\n\ndef test_check():\n    check(max_product_tuple)\n\ntest_check()\n", "sample_io": ["assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = a * b\n        if abs(product) > max_product:\n            max_product = abs(product)\n    return max_product\n\n# Sample Test cases\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\n\n\n"], "responses": ["\nfrom typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = a * b\n        if abs(product) > max_product:\n            max_product = abs(product)\n    return max_product\n\n# Sample Test cases\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\n\n\n"], "prompt_tokens": [3609], "completion_tokens": [2340], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_120_max_product_tuple"}
{"name": "mbpp_771_check_expression", "language": "Python3", "prompt": "def check_expression(exp: str) -> bool:\n    \"\"\"\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_expression", "test": "def check(candidate):\n    assert candidate('{()}[{}]') == True\n    assert candidate('{()}[{]') == False\n    assert candidate('{()}[{}][]({})') == True\n\ndef test_check():\n    check(check_expression)\n\ntest_check()\n", "sample_io": ["assert check_expression('{()}[{}]') == True"], "source_codes": ["\ndef check_expression(exp: str) -> bool:\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    for char in exp:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n    \n    return len(stack) == 0\n\n# Sample Test cases\nassert check_expression('{()}[{}]') == True\n\n\n"], "responses": ["\ndef check_expression(exp: str) -> bool:\n    stack = []\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    \n    for char in exp:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n    \n    return len(stack) == 0\n\n# Sample Test cases\nassert check_expression('{()}[{}]') == True\n\n\n"], "prompt_tokens": [5115], "completion_tokens": [3575], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_771_check_expression"}
{"name": "mbpp_754_extract_index_list", "language": "Python3", "prompt": "from typing import List, Any\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[Any]:\n    \"\"\"\n\tWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_index_list", "test": "def check(candidate):\n    assert candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7]\n    assert candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7]) == [1, 6]\n    assert candidate([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 5]\n    assert candidate([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == []\n\ndef test_check():\n    check(extract_index_list)\n\ntest_check()\n", "sample_io": ["assert extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7]"], "source_codes": ["\nfrom typing import List, Any\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[Any]:\n    common_elements = []\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements\n\n\n"], "responses": ["\nfrom typing import List, Any\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[Any]:\n    common_elements = []\n    min_length = min(len(l1), len(l2), len(l3))\n    \n    for i in range(min_length):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    \n    return common_elements\n\n\n"], "prompt_tokens": [4426], "completion_tokens": [2067], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_754_extract_index_list"}
{"name": "mbpp_638_wind_chill", "language": "Python3", "prompt": "def wind_chill(v: int, t: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "wind_chill", "test": "def check(candidate):\n    assert candidate(120, 35) == 40\n    assert candidate(40, 20) == 19\n    assert candidate(10, 8) == 6\n\ndef test_check():\n    check(wind_chill)\n\ntest_check()\n", "sample_io": ["assert wind_chill(120, 35) == 40"], "source_codes": ["\ndef wind_chill(v: int, t: int) -> int:\n    WCI = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    return round(WCI)\n\n# Sample Test case\nassert wind_chill(120, 35) == 40\n\n\n"], "responses": ["\ndef wind_chill(v: int, t: int) -> int:\n    WCI = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n    return round(WCI)\n\n# Sample Test case\nassert wind_chill(120, 35) == 40\n\n\n"], "prompt_tokens": [4022], "completion_tokens": [2202], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_638_wind_chill"}
{"name": "mbpp_780_find_combinations", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n\tWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_combinations", "test": "def check(candidate):\n    assert candidate([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    assert candidate([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\n    assert candidate([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n\ndef test_check():\n    check(find_combinations)\n\ntest_check()\n", "sample_io": ["assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result_set = set()\n    n = len(test_list)\n    \n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                sum_first = test_list[i][0] + test_list[j][0]\n                sum_second = test_list[i][1] + test_list[j][1]\n                result_set.add((sum_first, sum_second))\n    \n    # Convert the set to a sorted list\n    result_list = sorted(list(result_set))\n    return result_list\n\n# Sample Test cases\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (8, 14), (11, 8), (12, 17), (7, 5), (11, 11)]\n\n\n"], "responses": ["\nfrom typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result_set = set()\n    n = len(test_list)\n    \n    for i in range(n):\n        for j in range(n):\n            if i != j:\n                sum_first = test_list[i][0] + test_list[j][0]\n                sum_second = test_list[i][1] + test_list[j][1]\n                result_set.add((sum_first, sum_second))\n    \n    # Convert the set to a sorted list\n    result_list = sorted(list(result_set))\n    return result_list\n\n# Sample Test cases\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (8, 14), (11, 8), (12, 17), (7, 5), (11, 11)]\n\n\n"], "prompt_tokens": [24012], "completion_tokens": [13475], "no_of_try": 1, "api_calls": 33, "is_solved": false, "task_id": "mbpp_780_find_combinations"}
{"name": "mbpp_299_max_aggregate", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    \"\"\"\n\tWrite a function to calculate the maximum aggregate from the list of tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_aggregate", "test": "def check(candidate):\n    assert candidate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]) == ('Juan Whelan', 212)\n    assert candidate([('Juan Whelan', 50), ('Sabah Colley', 48), ('Peter Nichols', 37), ('Juan Whelan', 22), ('Sabah Colley', 14)]) == ('Juan Whelan', 72)\n    assert candidate([('Juan Whelan', 10), ('Sabah Colley', 20), ('Peter Nichols', 30), ('Juan Whelan', 40), ('Sabah Colley', 50)]) == ('Sabah Colley', 70)\n\ndef test_check():\n    check(max_aggregate)\n\ntest_check()\n", "sample_io": ["assert max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]) == ('Juan Whelan', 212)"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    score_dict = {}\n    \n    for name, score in stdata:\n        if name in score_dict:\n            score_dict[name] += score\n        else:\n            score_dict[name] = score\n            \n    max_name = None\n    max_score = -1\n    \n    for name, total_score in score_dict.items():\n        if total_score > max_score:\n            max_score = total_score\n            max_name = name\n            \n    return (max_name, max_score)\n\n\n"], "responses": ["\nfrom typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    score_dict = {}\n    \n    for name, score in stdata:\n        if name in score_dict:\n            score_dict[name] += score\n        else:\n            score_dict[name] = score\n            \n    max_name = None\n    max_score = -1\n    \n    for name, total_score in score_dict.items():\n        if total_score > max_score:\n            max_score = total_score\n            max_name = name\n            \n    return (max_name, max_score)\n\n\n"], "prompt_tokens": [3958], "completion_tokens": [2532], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_299_max_aggregate"}
{"name": "mbpp_809_check_smaller", "language": "Python3", "prompt": "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> bool:\n    \"\"\"\n\tWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_smaller", "test": "def check(candidate):\n    assert candidate((1, 2, 3), (2, 3, 4)) == False\n    assert candidate((4, 5, 6), (3, 4, 5)) == True\n    assert candidate((11, 12, 13), (10, 11, 12)) == True\n\ndef test_check():\n    check(check_smaller)\n\ntest_check()\n", "sample_io": ["assert check_smaller((1, 2, 3), (2, 3, 4)) == False"], "source_codes": ["\nfrom typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> bool:\n    for a, b in zip(test_tup1, test_tup2):\n        if b >= a:\n            return False\n    return True\n\n\n"], "responses": ["\nfrom typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> bool:\n    for a, b in zip(test_tup1, test_tup2):\n        if b >= a:\n            return False\n    return True\n\n\n"], "prompt_tokens": [3891], "completion_tokens": [1942], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_809_check_smaller"}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "Python3", "prompt": "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sum_increasing_subseq", "test": "def check(candidate):\n    assert candidate([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11\n    assert candidate([1, 101, 2, 3, 100, 4, 5], 7, 2, 5) == 7\n    assert candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71\n\ndef test_check():\n    check(max_sum_increasing_subseq)\n\ntest_check()\n", "sample_io": ["assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11"], "source_codes": ["\nfrom typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if k >= n or index < 0 or n == 0:\n        return 0\n\n    dp = [0] * n\n\n    for i in range(n):\n        dp[i] = a[i]\n\n    for i in range(1, index + 1):\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            max_sum = max(max_sum, dp[i] + a[k])\n\n    return max_sum\n\n\n"], "responses": ["\nfrom typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if k >= n or index < 0 or n == 0:\n        return 0\n\n    dp = [0] * n\n\n    for i in range(n):\n        dp[i] = a[i]\n\n    for i in range(1, index + 1):\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            max_sum = max(max_sum, dp[i] + a[k])\n\n    return max_sum\n\n\n"], "prompt_tokens": [11796], "completion_tokens": [7576], "no_of_try": 1, "api_calls": 16, "is_solved": true, "task_id": "mbpp_306_max_sum_increasing_subseq"}
{"name": "mbpp_426_filter_oddnumbers", "language": "Python3", "prompt": "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to filter odd numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "filter_oddnumbers", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n    assert candidate([10, 20, 45, 67, 84, 93]) == [45, 67, 93]\n    assert candidate([5, 7, 9, 8, 6, 4, 3]) == [5, 7, 9, 3]\n\ndef test_check():\n    check(filter_oddnumbers)\n\ntest_check()\n", "sample_io": ["assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]"], "source_codes": ["\nfrom typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    odd_numbers = []\n    for number in nums:\n        if number % 2 != 0:\n            odd_numbers.append(number)\n    return odd_numbers\n\n# Sample Test case\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n\n\n"], "responses": ["\nfrom typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    odd_numbers = []\n    for number in nums:\n        if number % 2 != 0:\n            odd_numbers.append(number)\n    return odd_numbers\n\n# Sample Test case\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n\n\n"], "prompt_tokens": [4193], "completion_tokens": [2268], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_426_filter_oddnumbers"}
{"name": "mbpp_67_bell_number", "language": "Python3", "prompt": "def bell_number(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the number of ways to partition a set of Bell numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "bell_number", "test": "def check(candidate):\n    assert candidate(2) == 2\n    assert candidate(10) == 115975\n    assert candidate(56) == 6775685320645824322581483068371419745979053216268760300\n\ndef test_check():\n    check(bell_number)\n\ntest_check()\n", "sample_io": ["assert bell_number(2) == 2"], "source_codes": ["\ndef bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i][j - 1] + bell[i - 1][j - 1]\n\n    return bell[n][0]\n\n# Sample Test cases\nassert bell_number(2) == 2\n\n\n"], "responses": ["\ndef bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i][j - 1] + bell[i - 1][j - 1]\n\n    return bell[n][0]\n\n# Sample Test cases\nassert bell_number(2) == 2\n\n\n"], "prompt_tokens": [4003], "completion_tokens": [2595], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_67_bell_number"}
{"name": "mbpp_237_check_occurences", "language": "Python3", "prompt": "from typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    \"\"\"\n\tWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_occurences", "test": "def check(candidate):\n    assert candidate([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == { (1, 3): 2, (2, 5): 2, (3, 6): 1 }\n    assert candidate([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)]) == { (2, 4): 2, (3, 6): 2, (4, 7): 1 }\n    assert candidate([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)]) == { (2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1 }\n\ndef test_check():\n    check(check_occurences)\n\ntest_check()\n", "sample_io": ["assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == { (1, 3): 2, (2, 5): 2, (3, 6): 1 }"], "source_codes": ["\nfrom typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    count_dict = {}\n    for item in test_list:\n        # Sort the tuple to handle different orderings\n        sorted_item = tuple(sorted(item))\n        if sorted_item in count_dict:\n            count_dict[sorted_item] += 1\n        else:\n            count_dict[sorted_item] = 1\n    return count_dict\n\n\n"], "responses": ["\nfrom typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    count_dict = {}\n    for item in test_list:\n        # Sort the tuple to handle different orderings\n        sorted_item = tuple(sorted(item))\n        if sorted_item in count_dict:\n            count_dict[sorted_item] += 1\n        else:\n            count_dict[sorted_item] = 1\n    return count_dict\n\n\n"], "prompt_tokens": [4910], "completion_tokens": [2213], "no_of_try": 1, "api_calls": 11, "is_solved": true, "task_id": "mbpp_237_check_occurences"}
{"name": "mbpp_74_is_samepatterns", "language": "Python3", "prompt": "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    \"\"\"\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_samepatterns", "test": "def check(candidate):\n    assert candidate(['red', 'green', 'green'], ['a', 'b', 'b']) == True\n    assert candidate(['red', 'green', 'greenn'], ['a', 'b', 'b']) == False\n    assert candidate(['red', 'green', 'greenn'], ['a', 'b']) == False\n\ndef test_check():\n    check(is_samepatterns)\n\ntest_check()\n", "sample_io": ["assert is_samepatterns(['red', 'green', 'green'], ['a', 'b', 'b']) == True"], "source_codes": ["\nfrom typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    color_to_pattern = {}\n    pattern_to_color = {}\n\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n\n    return True\n\n\n"], "responses": ["\nfrom typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    color_to_pattern = {}\n    pattern_to_color = {}\n\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n\n    return True\n\n\n"], "prompt_tokens": [4177], "completion_tokens": [2509], "no_of_try": 1, "api_calls": 10, "is_solved": false, "task_id": "mbpp_74_is_samepatterns"}
{"name": "mbpp_398_sum_of_digits", "language": "Python3", "prompt": "from typing import List, Any\n\ndef sum_of_digits(nums: List[Any]) -> int:\n    \"\"\"\n\tWrite a function to compute the sum of digits of each number of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_of_digits", "test": "def check(candidate):\n    assert candidate([10, 2, 56]) == 14\n    assert candidate([[10, 20, 4, 5, 'b', 70, 'a']]) == 19\n    assert candidate([10, 20, -4, 5, -70]) == 19\n\ndef test_check():\n    check(sum_of_digits)\n\ntest_check()\n", "sample_io": ["assert sum_of_digits([10, 2, 56]) == 14"], "source_codes": ["\nfrom typing import List, Any\n\ndef sum_of_digits(nums: List[Any]) -> int:\n    total_sum = 0\n    for num in nums:\n        for digit in str(num):\n            total_sum += int(digit)\n    return total_sum\n\n# Sample Test cases\nassert sum_of_digits([10, 2, 56]) == 14\n\n\n"], "responses": ["\nfrom typing import List, Any\n\ndef sum_of_digits(nums: List[Any]) -> int:\n    total_sum = 0\n    for num in nums:\n        for digit in str(num):\n            total_sum += int(digit)\n    return total_sum\n\n# Sample Test cases\nassert sum_of_digits([10, 2, 56]) == 14\n\n\n"], "prompt_tokens": [3695], "completion_tokens": [2153], "no_of_try": 1, "api_calls": 10, "is_solved": false, "task_id": "mbpp_398_sum_of_digits"}
{"name": "mbpp_250_count_X", "language": "Python3", "prompt": "from typing import List\n\ndef count_X(tup: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_X", "test": "def check(candidate):\n    assert candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4) == 0\n    assert candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10) == 3\n    assert candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8) == 4\n\ndef test_check():\n    check(count_X)\n\ntest_check()\n", "sample_io": ["assert count_X([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 4) == 0"], "source_codes": ["\nfrom typing import List\n\ndef count_X(tup: List[int], x: int) -> int:\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n\n\n"], "responses": ["\nfrom typing import List\n\ndef count_X(tup: List[int], x: int) -> int:\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n\n\n"], "prompt_tokens": [3794], "completion_tokens": [2107], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_250_count_X"}
{"name": "mbpp_71_comb_sort", "language": "Python3", "prompt": "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a list of elements.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "comb_sort", "test": "def check(candidate):\n    assert candidate([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    assert candidate([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\n    assert candidate([99, 15, 13, 47]) == [13, 15, 47, 99]\n\ndef test_check():\n    check(comb_sort)\n\ntest_check()\n", "sample_io": ["assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"], "source_codes": ["\nfrom typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        \n        sorted = True\n        \n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    # Final pass with bubble sort when gap is 1\n    for i in range(len(nums) - 1):\n        for j in range(len(nums) - 1 - i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    \n    return nums\n\n\n"], "responses": ["\nfrom typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    \n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        \n        sorted = True\n        \n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n\n    # Final pass with bubble sort when gap is 1\n    for i in range(len(nums) - 1):\n        for j in range(len(nums) - 1 - i):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    \n    return nums\n\n\n"], "prompt_tokens": [6655], "completion_tokens": [4132], "no_of_try": 1, "api_calls": 12, "is_solved": true, "task_id": "mbpp_71_comb_sort"}
{"name": "mbpp_630_get_coordinates", "language": "Python3", "prompt": "from typing import Tuple, List\n\ndef get_coordinates(test_tup: Tuple[int, int]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_coordinates", "test": "def check(candidate):\n    assert candidate((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    assert candidate((4, 5)) == [[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n    assert candidate((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n\ndef test_check():\n    check(get_coordinates)\n\ntest_check()\n", "sample_io": ["assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"], "source_codes": ["\nfrom typing import Tuple, List\n\ndef get_coordinates(test_tup: Tuple[int, int]) -> List[List[int]]:\n    x, y = test_tup\n    result = []\n    # Offsets for 8 directions: up, down, left, right, and the 4 diagonals\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1), \n                  (-1, -1), (-1, 1), (1, -1), (1, 1)]  # up, down, left, right, and diagonals\n\n    for dx, dy in directions:\n        new_x, new_y = x + dx, y + dy\n        result.append([new_x, new_y])\n    \n    # Include the original coordinate itself\n    result.append([x, y])\n    \n    # Sort the result list for consistent order\n    result.sort()\n\n    return result\n\n# Sample Test case\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\n\n"], "responses": ["\nfrom typing import Tuple, List\n\ndef get_coordinates(test_tup: Tuple[int, int]) -> List[List[int]]:\n    x, y = test_tup\n    result = []\n    # Offsets for 8 directions: up, down, left, right, and the 4 diagonals\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1), \n                  (-1, -1), (-1, 1), (1, -1), (1, 1)]  # up, down, left, right, and diagonals\n\n    for dx, dy in directions:\n        new_x, new_y = x + dx, y + dy\n        result.append([new_x, new_y])\n    \n    # Include the original coordinate itself\n    result.append([x, y])\n    \n    # Sort the result list for consistent order\n    result.sort()\n\n    return result\n\n# Sample Test case\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\n\n"], "prompt_tokens": [12070], "completion_tokens": [6703], "no_of_try": 1, "api_calls": 19, "is_solved": true, "task_id": "mbpp_630_get_coordinates"}
{"name": "mbpp_238_number_of_substrings", "language": "Python3", "prompt": "def number_of_substrings(str: str) -> int:\n    \"\"\"\n\tWrite a python function to count the number of non-empty substrings of a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "number_of_substrings", "test": "def check(candidate):\n    assert candidate('abc') == 6\n    assert candidate('abcd') == 10\n    assert candidate('abcde') == 15\n\ndef test_check():\n    check(number_of_substrings)\n\ntest_check()\n", "sample_io": ["assert number_of_substrings('abc') == 6"], "source_codes": ["\ndef number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) // 2\n\n# Sample Test cases\nassert number_of_substrings('abc') == 6\n\n\n"], "responses": ["\ndef number_of_substrings(s: str) -> int:\n    n = len(s)\n    return n * (n + 1) // 2\n\n# Sample Test cases\nassert number_of_substrings('abc') == 6\n\n\n"], "prompt_tokens": [3525], "completion_tokens": [2618], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_238_number_of_substrings"}
{"name": "mbpp_160_find_solution", "language": "Python3", "prompt": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_solution", "test": "def check(candidate):\n    assert candidate(2, 3, 7) == (2, 1)\n    assert candidate(4, 2, 7) == None\n    assert candidate(1, 13, 17) == (4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n", "sample_io": ["assert find_solution(2, 3, 7) == (2, 1)"], "source_codes": ["\nfrom typing import Optional, Tuple\n\ndef extended_gcd(a: int, b: int) -> Tuple[int, int, int]:\n    if b == 0:\n        return a, 1, 0\n    gcd, x1, y1 = extended_gcd(b, a % b)\n    x = y1\n    y = x1 - (a // b) * y1\n    return gcd, x, y\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    \n    # Scale the coefficients\n    x *= n // gcd\n    y *= n // gcd\n    \n    # Adjust x and y to find a valid solution\n    # We can adjust them using the relation x + k*(b/gcd) and y - k*(a/gcd)\n    # to find a non-negative solution if needed\n    # Here we can find a valid k to make x non-negative\n    b_div_gcd = b // gcd\n    a_div_gcd = a // gcd\n    \n    if x < 0:\n        k = (-x + b_div_gcd - 1) // b_div_gcd  # ceil(-x / (b/gcd))\n        x += k * b_div_gcd\n        y -= k * a_div_gcd\n    elif y < 0:\n        k = (-y + a_div_gcd - 1) // a_div_gcd  # ceil(-y / (a/gcd))\n        x -= k * b_div_gcd\n        y += k * a_div_gcd\n    \n    return (x, y)\n\n\n"], "responses": ["\nfrom typing import Optional, Tuple\n\ndef extended_gcd(a: int, b: int) -> Tuple[int, int, int]:\n    if b == 0:\n        return a, 1, 0\n    gcd, x1, y1 = extended_gcd(b, a % b)\n    x = y1\n    y = x1 - (a // b) * y1\n    return gcd, x, y\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    \n    # Scale the coefficients\n    x *= n // gcd\n    y *= n // gcd\n    \n    # Adjust x and y to find a valid solution\n    # We can adjust them using the relation x + k*(b/gcd) and y - k*(a/gcd)\n    # to find a non-negative solution if needed\n    # Here we can find a valid k to make x non-negative\n    b_div_gcd = b // gcd\n    a_div_gcd = a // gcd\n    \n    if x < 0:\n        k = (-x + b_div_gcd - 1) // b_div_gcd  # ceil(-x / (b/gcd))\n        x += k * b_div_gcd\n        y -= k * a_div_gcd\n    elif y < 0:\n        k = (-y + a_div_gcd - 1) // a_div_gcd  # ceil(-y / (a/gcd))\n        x -= k * b_div_gcd\n        y += k * a_div_gcd\n    \n    return (x, y)\n\n\n"], "prompt_tokens": [16885], "completion_tokens": [11759], "no_of_try": 1, "api_calls": 23, "is_solved": false, "task_id": "mbpp_160_find_solution"}
{"name": "mbpp_256_count_Primes_nums", "language": "Python3", "prompt": "def count_Primes_nums(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Primes_nums", "test": "def check(candidate):\n    assert candidate(5) == 2\n    assert candidate(10) == 4\n    assert candidate(100) == 25\n\ndef test_check():\n    check(count_Primes_nums)\n\ntest_check()\n", "sample_io": ["assert count_Primes_nums(5) == 2"], "source_codes": ["\ndef count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    \n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)\n\n# Sample Test case\nassert count_Primes_nums(5) == 2\n\n\n"], "responses": ["\ndef count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    \n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    \n    for i in range(2, int(n**0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    \n    return sum(is_prime)\n\n# Sample Test case\nassert count_Primes_nums(5) == 2\n\n\n"], "prompt_tokens": [4675], "completion_tokens": [2839], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_256_count_Primes_nums"}
{"name": "mbpp_762_check_monthnumber_number", "language": "Python3", "prompt": "def check_monthnumber_number(monthnum3: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_762_check_monthnumber_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_monthnumber_number", "test": "def check(candidate):\n    assert candidate(6) == True\n    assert candidate(2) == False\n    assert candidate(12) == False\n\ndef test_check():\n    check(check_monthnumber_number)\n\ntest_check()\n", "sample_io": ["assert check_monthnumber_number(6) == True"], "source_codes": ["\ndef check_monthnumber_number(monthnum3: int) -> bool:\n    return monthnum3 in [4, 6, 9, 11]\n\n\n"], "responses": ["\ndef check_monthnumber_number(monthnum3: int) -> bool:\n    return monthnum3 in [4, 6, 9, 11]\n\n\n"], "prompt_tokens": [3757], "completion_tokens": [2265], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_762_check_monthnumber_number"}
{"name": "mbpp_255_combinations_colors", "language": "Python3", "prompt": "from typing import List\n\ndef combinations_colors(l: List[str], n: int) -> List[List[str]]:\n    \"\"\"\n\tWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "combinations_colors", "test": "def check(candidate):\n    assert candidate(['Red', 'Green', 'Blue'], 1) == [['Red'], ['Green'], ['Blue']]\n    assert candidate(['Red', 'Green', 'Blue'], 2) == [['Red', 'Red'], ['Red', 'Green'], ['Red', 'Blue'], ['Green', 'Green'], ['Green', 'Blue'], ['Blue', 'Blue']]\n    assert candidate(['Red', 'Green', 'Blue'], 3) == [['Red', 'Red', 'Red'], ['Red', 'Red', 'Green'], ['Red', 'Red', 'Blue'], ['Red', 'Green', 'Green'], ['Red', 'Green', 'Blue'], ['Red', 'Blue', 'Blue'], ['Green', 'Green', 'Green'], ['Green', 'Green', 'Blue'], ['Green', 'Blue', 'Blue'], ['Blue', 'Blue', 'Blue']]\n\ndef test_check():\n    check(combinations_colors)\n\ntest_check()\n", "sample_io": ["assert combinations_colors(['Red', 'Green', 'Blue'], 1) == [['Red'], ['Green'], ['Blue']]"], "source_codes": ["\nfrom typing import List\n\ndef combinations_colors(l: List[str], n: int) -> List[List[str]]:\n    def backtrack(current_combination, remaining_length):\n        if remaining_length == 0:\n            result.append(current_combination[:])\n            return\n        for color in l:\n            current_combination.append(color)\n            backtrack(current_combination, remaining_length - 1)\n            current_combination.pop()\n    \n    result = []\n    backtrack([], n)\n    return result\n\n\n"], "responses": ["\nfrom typing import List\n\ndef combinations_colors(l: List[str], n: int) -> List[List[str]]:\n    def backtrack(current_combination, remaining_length):\n        if remaining_length == 0:\n            result.append(current_combination[:])\n            return\n        for color in l:\n            current_combination.append(color)\n            backtrack(current_combination, remaining_length - 1)\n            current_combination.pop()\n    \n    result = []\n    backtrack([], n)\n    return result\n\n\n"], "prompt_tokens": [4077], "completion_tokens": [2451], "no_of_try": 1, "api_calls": 10, "is_solved": false, "task_id": "mbpp_255_combinations_colors"}
{"name": "mbpp_732_replace_specialchar", "language": "Python3", "prompt": "def replace_specialchar(text: str) -> str:\n    \"\"\"\n\tWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_specialchar", "test": "def check(candidate):\n    assert candidate('Python language, Programming language.') == 'Python:language::Programming:language:'\n    assert candidate('a b c,d e f') == 'a:b:c:d:e:f'\n    assert candidate('ram reshma,ram rahim') == 'ram:reshma:ram:rahim'\n\ndef test_check():\n    check(replace_specialchar)\n\ntest_check()\n", "sample_io": ["assert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'"], "source_codes": ["\ndef replace_specialchar(text: str) -> str:\n    result = \"\"\n    for char in text:\n        if char in [' ', ',', '.']:\n            result += ':'\n        else:\n            result += char\n    return result\n\n# Sample Test case\nassert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'\n\n\n"], "responses": ["\ndef replace_specialchar(text: str) -> str:\n    result = \"\"\n    for char in text:\n        if char in [' ', ',', '.']:\n            result += ':'\n        else:\n            result += char\n    return result\n\n# Sample Test case\nassert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'\n\n\n"], "prompt_tokens": [3567], "completion_tokens": [1784], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_732_replace_specialchar"}
{"name": "mbpp_391_convert_list_dictionary", "language": "Python3", "prompt": "from typing import List, Dict\n\ndef convert_list_dictionary(l1: List[str], l2: List[str], l3: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    \"\"\"\n\tWrite a function to convert more than one list to nested dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "convert_list_dictionary", "test": "def check(candidate):\n    assert candidate(['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92]) == [{ 'S001': { 'Adina Park': 85 } }, { 'S002': { 'Leyton Marsh': 98 } }, { 'S003': { 'Duncan Boyle': 89 } }, { 'S004': { 'Saim Richards': 92 } }]\n    assert candidate(['abc', 'def', 'ghi', 'jkl'], ['python', 'program', 'language', 'programs'], [100, 200, 300, 400]) == [{ 'abc': { 'python': 100 } }, { 'def': { 'program': 200 } }, { 'ghi': { 'language': 300 } }, { 'jkl': { 'programs': 400 } }]\n    assert candidate(['A1', 'A2', 'A3', 'A4'], ['java', 'C', 'C++', 'DBMS'], [10, 20, 30, 40]) == [{ 'A1': { 'java': 10 } }, { 'A2': { 'C': 20 } }, { 'A3': { 'C++': 30 } }, { 'A4': { 'DBMS': 40 } }]\n\ndef test_check():\n    check(convert_list_dictionary)\n\ntest_check()\n", "sample_io": ["assert convert_list_dictionary(['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92]) == [{ 'S001': { 'Adina Park': 85 } }]"], "source_codes": ["\nfrom typing import List, Dict\n\ndef convert_list_dictionary(l1: List[str], l2: List[str], l3: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    result = {}\n    for key1, key2, value in zip(l1, l2, l3):\n        if key1 not in result:\n            result[key1] = {}\n        result[key1][key2] = value\n    \n    # Convert the result dictionary to a list of dictionaries\n    return [{k: v} for k, v in result.items()]\n\n\n"], "responses": ["\nfrom typing import List, Dict\n\ndef convert_list_dictionary(l1: List[str], l2: List[str], l3: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    result = {}\n    for key1, key2, value in zip(l1, l2, l3):\n        if key1 not in result:\n            result[key1] = {}\n        result[key1][key2] = value\n    \n    # Convert the result dictionary to a list of dictionaries\n    return [{k: v} for k, v in result.items()]\n\n\n"], "prompt_tokens": [22164], "completion_tokens": [11104], "no_of_try": 1, "api_calls": 33, "is_solved": true, "task_id": "mbpp_391_convert_list_dictionary"}
{"name": "mbpp_408_k_smallest_pairs", "language": "Python3", "prompt": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "k_smallest_pairs", "test": "def check(candidate):\n    assert candidate([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]\n    assert candidate([1, 3, 7], [2, 4, 6], 1) == [[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7) == [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n", "sample_io": ["assert k_smallest_pairs([1, 3, 7], [2, 4, 6], 2) == [[1, 2], [1, 4]]"], "source_codes": ["\nfrom typing import List\nimport heapq\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    if not nums1 or not nums2 or k <= 0:\n        return []\n    \n    min_heap = []\n    result = []\n    \n    # Initialize the heap with the first element of nums1 and all elements of nums2\n    for j in range(min(k, len(nums2))):\n        heapq.heappush(min_heap, (nums1[0] + nums2[j], 0, j))\n    \n    while k > 0 and min_heap:\n        sum_val, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        k -= 1\n        \n        # If there is a next element in nums1, push the new pair into the heap\n        if i + 1 < len(nums1):\n            heapq.heappush(min_heap, (nums1[i + 1] + nums2[j], i + 1, j))\n    \n    return result\n\n\n"], "responses": ["\nfrom typing import List\nimport heapq\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    if not nums1 or not nums2 or k <= 0:\n        return []\n    \n    min_heap = []\n    result = []\n    \n    # Initialize the heap with the first element of nums1 and all elements of nums2\n    for j in range(min(k, len(nums2))):\n        heapq.heappush(min_heap, (nums1[0] + nums2[j], 0, j))\n    \n    while k > 0 and min_heap:\n        sum_val, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        k -= 1\n        \n        # If there is a next element in nums1, push the new pair into the heap\n        if i + 1 < len(nums1):\n            heapq.heappush(min_heap, (nums1[i + 1] + nums2[j], i + 1, j))\n    \n    return result\n\n\n"], "prompt_tokens": [4516], "completion_tokens": [2953], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_408_k_smallest_pairs"}
{"name": "mbpp_747_lcs_of_three", "language": "Python3", "prompt": "def lcs_of_three(X: str, Y: str, Z: str) -> int:\n    \"\"\"\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lcs_of_three", "test": "def check(candidate):\n    assert candidate('AGGT12', '12TXAYB', '12XBA') == 2\n    assert candidate('Reels', 'Reelsfor', 'ReelsforReels') == 5\n    assert candidate('abcd1e2', 'bc12ea', 'bd1ea') == 3\n\ndef test_check():\n    check(lcs_of_three)\n\ntest_check()\n", "sample_io": ["assert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2"], "source_codes": ["\ndef lcs_of_three(X: str, Y: str, Z: str) -> int:\n    dp = [[[0] * (len(Z) + 1) for _ in range(len(Y) + 1)] for _ in range(len(X) + 1)]\n    \n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n    \n    return dp[len(X)][len(Y)][len(Z)]\n\n# Sample Test case\nassert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2\n\n\n"], "responses": ["\ndef lcs_of_three(X: str, Y: str, Z: str) -> int:\n    dp = [[[0] * (len(Z) + 1) for _ in range(len(Y) + 1)] for _ in range(len(X) + 1)]\n    \n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = dp[i - 1][j - 1][k - 1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j - 1][k], dp[i][j][k - 1])\n    \n    return dp[len(X)][len(Y)][len(Z)]\n\n# Sample Test case\nassert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2\n\n\n"], "prompt_tokens": [5451], "completion_tokens": [3484], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_747_lcs_of_three"}
{"name": "mbpp_68_is_Monotonic", "language": "Python3", "prompt": "from typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Monotonic", "test": "def check(candidate):\n    assert candidate([6, 5, 4, 4]) == True\n    assert candidate([1, 2, 2, 3]) == True\n    assert candidate([1, 3, 2]) == False\n\ndef test_check():\n    check(is_Monotonic)\n\ntest_check()\n", "sample_io": ["assert is_Monotonic([6, 5, 4, 4]) == True"], "source_codes": ["\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    if len(A) <= 1:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            increasing = False\n        if A[i] < A[i + 1]:\n            decreasing = False\n            \n    return increasing or decreasing\n\n\n"], "responses": ["\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    if len(A) <= 1:\n        return True\n    \n    increasing = True\n    decreasing = True\n    \n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            increasing = False\n        if A[i] < A[i + 1]:\n            decreasing = False\n            \n    return increasing or decreasing\n\n\n"], "prompt_tokens": [3896], "completion_tokens": [2267], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_68_is_Monotonic"}
{"name": "mbpp_222_check_type", "language": "Python3", "prompt": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_type", "test": "def check(candidate):\n    assert candidate((5, 6, 7, 3, 5, 6)) == True\n    assert candidate((1, 2, '4')) == False\n    assert candidate((3, 2, 1, 4, 5)) == True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n", "sample_io": ["assert check_type((5, 6, 7, 3, 5, 6)) == True"], "source_codes": ["\nfrom typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    for element in test_tuple[1:]:\n        if type(element) != first_type:\n            return False\n    return True\n\n\n"], "responses": ["\nfrom typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    for element in test_tuple[1:]:\n        if type(element) != first_type:\n            return False\n    return True\n\n\n"], "prompt_tokens": [3497], "completion_tokens": [2107], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_222_check_type"}
{"name": "mbpp_742_area_tetrahedron", "language": "Python3", "prompt": "def area_tetrahedron(side: int) -> float:\n    \"\"\"\n\tWrite a function to caluclate the area of a tetrahedron.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "area_tetrahedron", "test": "def check(candidate):\n    assert candidate(3) == 15.588457268119894\n    assert candidate(20) == 692.8203230275509\n    assert candidate(10) == 173.20508075688772\n\ndef test_check():\n    check(area_tetrahedron)\n\ntest_check()\n", "sample_io": ["assert area_tetrahedron(3) == 15.588457268119894"], "source_codes": ["\nimport math\n\ndef area_tetrahedron(side: int) -> float:\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron given the length of its edge.\n    \n    Parameters:\n    side (int): The length of the tetrahedron's edge.\n    \n    Returns:\n    float: The surface area of the tetrahedron.\n    \"\"\"\n    if side < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return math.sqrt(3) * side**2\n\n# Sample Test case\nassert area_tetrahedron(3) == 15.588457268119894\n\n\n"], "responses": ["\nimport math\n\ndef area_tetrahedron(side: int) -> float:\n    \"\"\"\n    Calculate the surface area of a regular tetrahedron given the length of its edge.\n    \n    Parameters:\n    side (int): The length of the tetrahedron's edge.\n    \n    Returns:\n    float: The surface area of the tetrahedron.\n    \"\"\"\n    if side < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return math.sqrt(3) * side**2\n\n# Sample Test case\nassert area_tetrahedron(3) == 15.588457268119894\n\n\n"], "prompt_tokens": [3956], "completion_tokens": [2264], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_742_area_tetrahedron"}
{"name": "mbpp_576_is_Sub_Array", "language": "Python3", "prompt": "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Sub_Array", "test": "def check(candidate):\n    assert candidate([1, 4, 3, 5], [1, 2]) == False\n    assert candidate([1, 2, 1], [1, 2, 1]) == True\n    assert candidate([1, 0, 2, 2], [2, 2, 0]) == False\n\ndef test_check():\n    check(is_Sub_Array)\n\ntest_check()\n", "sample_io": ["assert is_Sub_Array([1, 4, 3, 5], [1, 2]) == False"], "source_codes": ["\nfrom typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False\n\n\n"], "responses": ["\nfrom typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False\n\n\n"], "prompt_tokens": [3778], "completion_tokens": [2261], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_576_is_Sub_Array"}
{"name": "mbpp_578_interleave_lists", "language": "Python3", "prompt": "from typing import List\n\ndef interleave_lists(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "interleave_lists", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    assert candidate([10, 20], [15, 2], [5, 10]) == [10, 15, 5, 20, 2, 10]\n    assert candidate([11, 44], [10, 15], [20, 5]) == [11, 10, 20, 44, 15, 5]\n\ndef test_check():\n    check(interleave_lists)\n\ntest_check()\n", "sample_io": ["assert interleave_lists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"], "source_codes": ["\nfrom typing import List\n\ndef interleave_lists(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    result = []\n    length = len(list1)\n    for i in range(length):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n\n# Sample Test case\nassert interleave_lists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\n\n"], "responses": ["\nfrom typing import List\n\ndef interleave_lists(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    result = []\n    length = len(list1)\n    for i in range(length):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n\n# Sample Test case\nassert interleave_lists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\n\n"], "prompt_tokens": [5019], "completion_tokens": [2451], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_578_interleave_lists"}
{"name": "mbpp_447_cube_nums", "language": "Python3", "prompt": "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find cubes of individual elements in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cube_nums", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    assert candidate([10, 20, 30]) == [1000, 8000, 27000]\n    assert candidate([12, 15]) == [1728, 3375]\n\ndef test_check():\n    check(cube_nums)\n\ntest_check()\n", "sample_io": ["assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"], "source_codes": ["\nfrom typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [num ** 3 for num in nums]\n\n# Sample Test case\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\n\n"], "responses": ["\nfrom typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [num ** 3 for num in nums]\n\n# Sample Test case\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\n\n"], "prompt_tokens": [3882], "completion_tokens": [1773], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_447_cube_nums"}
{"name": "mbpp_431_common_element", "language": "Python3", "prompt": "from typing import List, Any, Optional\n\ndef common_element(list1: List[Any], list2: List[Any]) -> Optional[bool]:\n    \"\"\"\n\tWrite a function that takes two lists and returns true if they have at least one common element.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "common_element", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == True\n    assert candidate([1, 2, 3, 4, 5], [6, 7, 8, 9]) == None\n    assert candidate(['a', 'b', 'c'], ['d', 'b', 'e']) == True\n\ndef test_check():\n    check(common_element)\n\ntest_check()\n", "sample_io": ["assert common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == True"], "source_codes": ["\nfrom typing import List, Any, Optional\n\ndef common_element(list1: List[Any], list2: List[Any]) -> Optional[bool]:\n    set1 = set(list1)\n    for element in list2:\n        if element in set1:\n            return True\n    return False\n\n\n"], "responses": ["\nfrom typing import List, Any, Optional\n\ndef common_element(list1: List[Any], list2: List[Any]) -> Optional[bool]:\n    set1 = set(list1)\n    for element in list2:\n        if element in set1:\n            return True\n    return False\n\n\n"], "prompt_tokens": [3903], "completion_tokens": [2027], "no_of_try": 1, "api_calls": 10, "is_solved": false, "task_id": "mbpp_431_common_element"}
{"name": "mbpp_632_move_zero", "language": "Python3", "prompt": "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "move_zero", "test": "def check(candidate):\n    assert candidate([1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0]\n    assert candidate([2, 3, 2, 0, 0, 4, 0, 5, 0]) == [2, 3, 2, 4, 5, 0, 0, 0, 0]\n    assert candidate([0, 1, 0, 1, 1]) == [1, 1, 1, 0, 0]\n\ndef test_check():\n    check(move_zero)\n\ntest_check()\n", "sample_io": ["assert move_zero([1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0]"], "source_codes": ["\nfrom typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    non_zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] != 0:\n            num_list[non_zero_index], num_list[i] = num_list[i], num_list[non_zero_index]\n            non_zero_index += 1\n    return num_list\n\n\n"], "responses": ["\nfrom typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    non_zero_index = 0\n    for i in range(len(num_list)):\n        if num_list[i] != 0:\n            num_list[non_zero_index], num_list[i] = num_list[i], num_list[non_zero_index]\n            non_zero_index += 1\n    return num_list\n\n\n"], "prompt_tokens": [3880], "completion_tokens": [1947], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_632_move_zero"}
{"name": "mbpp_640_remove_parenthesis", "language": "Python3", "prompt": "from typing import List\n\ndef remove_parenthesis(items: List[str]) -> str:\n    \"\"\"\n\tWrite a function to remove the parenthesis and what is inbetween them from a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_parenthesis", "test": "def check(candidate):\n    assert candidate(['python (chrome)']) == 'python'\n    assert candidate(['string(.abc)']) == 'string'\n    assert candidate(['alpha(num)']) == 'alpha'\n\ndef test_check():\n    check(remove_parenthesis)\n\ntest_check()\n", "sample_io": ["assert remove_parenthesis(['python (chrome)']) == 'python'"], "source_codes": ["\nassert remove_parenthesis(['hello (world)']) == 'hello '\nassert remove_parenthesis(['(abc) def (ghi)']) == ' def '\nassert remove_parenthesis(['(a(b)c)']) == ''\nassert remove_parenthesis(['no parentheses']) == 'no parentheses'\nassert remove_parenthesis(['(nested (parentheses)) are (removed)']) == ' are '\nassert remove_parenthesis(['python (chrome)']) == 'python '\n\n\n"], "responses": ["\nassert remove_parenthesis(['hello (world)']) == 'hello '\nassert remove_parenthesis(['(abc) def (ghi)']) == ' def '\nassert remove_parenthesis(['(a(b)c)']) == ''\nassert remove_parenthesis(['no parentheses']) == 'no parentheses'\nassert remove_parenthesis(['(nested (parentheses)) are (removed)']) == ' are '\nassert remove_parenthesis(['python (chrome)']) == 'python '\n\n\n"], "prompt_tokens": [23126], "completion_tokens": [12690], "no_of_try": 1, "api_calls": 33, "is_solved": false, "task_id": "mbpp_640_remove_parenthesis"}
{"name": "mbpp_292_find", "language": "Python3", "prompt": "def find(n: int, m: int) -> int:\n    \"\"\"\n\tWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find", "test": "def check(candidate):\n    assert candidate(10, 3) == 3\n    assert candidate(4, 2) == 2\n    assert candidate(20, 5) == 4\n\ndef test_check():\n    check(find)\n\ntest_check()\n", "sample_io": ["assert find(10, 3) == 3"], "source_codes": ["\ndef find(n: int, m: int) -> int:\n    if m == 0:\n        raise ValueError(\"Division by zero is not allowed.\")\n    return n // m\n\n\n"], "responses": ["\ndef find(n: int, m: int) -> int:\n    if m == 0:\n        raise ValueError(\"Division by zero is not allowed.\")\n    return n // m\n\n\n"], "prompt_tokens": [3561], "completion_tokens": [2036], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_292_find"}
{"name": "mbpp_726_multiply_elements", "language": "Python3", "prompt": "from typing import List, Any\n\ndef multiply_elements(test_tup: List[int]) -> List[Any]:\n    \"\"\"\n\tWrite a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_726_multiply_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "multiply_elements", "test": "def check(candidate):\n    assert candidate([1, 5, 7, 8, 10]) == [5, 35, 56, 80]\n    assert candidate([2, 4, 5, 6, 7]) == [8, 20, 30, 42]\n    assert candidate([12, 13, 14, 9, 15]) == [156, 182, 126, 135]\n    assert candidate([12]) == []\n\ndef test_check():\n    check(multiply_elements)\n\ntest_check()\n", "sample_io": ["assert multiply_elements([1, 5, 7, 8, 10]) == [5, 35, 56, 80]"], "source_codes": ["\nfrom typing import List, Any\n\ndef multiply_elements(test_tup: List[int]) -> List[Any]:\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i + 1])\n    return result\n\n\n"], "responses": ["\nfrom typing import List, Any\n\ndef multiply_elements(test_tup: List[int]) -> List[Any]:\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i + 1])\n    return result\n\n\n"], "prompt_tokens": [3892], "completion_tokens": [1848], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_726_multiply_elements"}
{"name": "mbpp_627_find_First_Missing", "language": "Python3", "prompt": "from typing import List\n\ndef find_First_Missing(array: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_First_Missing", "test": "def check(candidate):\n    assert candidate([0, 1, 2, 3]) == 4\n    assert candidate([0, 1, 2, 6, 9]) == 3\n    assert candidate([2, 3, 5, 8, 9]) == 0\n\ndef test_check():\n    check(find_First_Missing)\n\ntest_check()\n", "sample_io": ["assert find_First_Missing([0, 1, 2, 3]) == 4"], "source_codes": ["\nfrom typing import List\n\ndef find_First_Missing(array: List[int]) -> int:\n    left, right = 0, len(array) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == mid:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return left\n\n\n"], "responses": ["\nfrom typing import List\n\ndef find_First_Missing(array: List[int]) -> int:\n    left, right = 0, len(array) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if array[mid] == mid:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return left\n\n\n"], "prompt_tokens": [4144], "completion_tokens": [2779], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_627_find_First_Missing"}
{"name": "mbpp_252_convert", "language": "Python3", "prompt": "from typing import Tuple\n\ndef convert(numbers: int) -> Tuple[float, float]:\n    \"\"\"\n\tWrite a python function to convert complex numbers to polar coordinates.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "convert", "test": "def check(candidate):\n    assert candidate(1) == (1.0, 0.0)\n    assert candidate(4) == (4.0, 0.0)\n    assert candidate(5) == (5.0, 0.0)\n\ndef test_check():\n    check(convert)\n\ntest_check()\n", "sample_io": ["assert convert(1) == (1.0, 0.0)"], "source_codes": ["\nimport math\nfrom typing import Tuple, Union\n\ndef convert(complex_input: Union[str, int, float]) -> Tuple[float, float]:\n    # Ensure the input is a string\n    complex_str = str(complex_input)\n    \n    # Remove spaces and split the string to extract real and imaginary parts\n    complex_str = complex_str.replace(\" \", \"\")\n    if 'i' in complex_str:\n        complex_str = complex_str[:-1]  # Remove the 'i' at the end\n    \n    # Initialize real and imaginary parts\n    a = 0.0\n    b = 0.0\n    \n    # Split the string into real and imaginary parts\n    if '+' in complex_str:\n        parts = complex_str.split('+')\n        a = float(parts[0])\n        b = float(parts[1])\n    elif '-' in complex_str[1:]:  # Skip the first character for negative sign\n        parts = complex_str.split('-')\n        a = float(parts[0])\n        b = -float(parts[1])  # The imaginary part should be negative\n    else:\n        a = float(complex_str)\n        b = 0.0\n    \n    if a == 0 and b == 0:\n        return (0.0, 0.0)\n    \n    r = math.sqrt(a**2 + b**2)\n    theta = math.atan2(b, a)\n    \n    return (r, theta)\n\n# Example test cases\nprint(convert(\"1 + 0i\"))  # Expected output: (1.0, 0.0)\nprint(convert(\"0 + 1i\"))  # Expected output: (1.0, 1.5707963267948966)\nprint(convert(\"-1 - 1i\")) # Expected output: (1.4142135623730951, -2.356194490192345)\nprint(convert(\"0 + 0i\"))  # Expected output: (0.0, 0.0)\nprint(convert(\"3 - 4i\"))  # Expected output: (5.0, -0.9272952180016122)\nprint(convert(1))         # Expected output: (1.0, 0.0)\nprint(convert(0))         # Expected output: (0.0, 0.0)\nprint(convert(-2))        # Expected output: (2.0, 3.141592653589793)\n\n\n"], "responses": ["\nimport math\nfrom typing import Tuple, Union\n\ndef convert(complex_input: Union[str, int, float]) -> Tuple[float, float]:\n    # Ensure the input is a string\n    complex_str = str(complex_input)\n    \n    # Remove spaces and split the string to extract real and imaginary parts\n    complex_str = complex_str.replace(\" \", \"\")\n    if 'i' in complex_str:\n        complex_str = complex_str[:-1]  # Remove the 'i' at the end\n    \n    # Initialize real and imaginary parts\n    a = 0.0\n    b = 0.0\n    \n    # Split the string into real and imaginary parts\n    if '+' in complex_str:\n        parts = complex_str.split('+')\n        a = float(parts[0])\n        b = float(parts[1])\n    elif '-' in complex_str[1:]:  # Skip the first character for negative sign\n        parts = complex_str.split('-')\n        a = float(parts[0])\n        b = -float(parts[1])  # The imaginary part should be negative\n    else:\n        a = float(complex_str)\n        b = 0.0\n    \n    if a == 0 and b == 0:\n        return (0.0, 0.0)\n    \n    r = math.sqrt(a**2 + b**2)\n    theta = math.atan2(b, a)\n    \n    return (r, theta)\n\n# Example test cases\nprint(convert(\"1 + 0i\"))  # Expected output: (1.0, 0.0)\nprint(convert(\"0 + 1i\"))  # Expected output: (1.0, 1.5707963267948966)\nprint(convert(\"-1 - 1i\")) # Expected output: (1.4142135623730951, -2.356194490192345)\nprint(convert(\"0 + 0i\"))  # Expected output: (0.0, 0.0)\nprint(convert(\"3 - 4i\"))  # Expected output: (5.0, -0.9272952180016122)\nprint(convert(1))         # Expected output: (1.0, 0.0)\nprint(convert(0))         # Expected output: (0.0, 0.0)\nprint(convert(-2))        # Expected output: (2.0, 3.141592653589793)\n\n\n"], "prompt_tokens": [30989], "completion_tokens": [19094], "no_of_try": 1, "api_calls": 33, "is_solved": false, "task_id": "mbpp_252_convert"}
{"name": "mbpp_606_radian_degree", "language": "Python3", "prompt": "def radian_degree(degree: int) -> float:\n    \"\"\"\n\tWrite a function to convert degrees to radians.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "radian_degree", "test": "def check(candidate):\n    assert candidate(90) == 1.5707963267948966\n    assert candidate(60) == 1.0471975511965976\n    assert candidate(120) == 2.0943951023931953\n\ndef test_check():\n    check(radian_degree)\n\ntest_check()\n", "sample_io": ["assert radian_degree(90) == 1.5707963267948966"], "source_codes": ["\nimport math\n\ndef radian_degree(degree: int) -> float:\n    return degree * (math.pi / 180)\n\n# Sample Test case\nassert radian_degree(90) == 1.5707963267948966\n\n\n"], "responses": ["\nimport math\n\ndef radian_degree(degree: int) -> float:\n    return degree * (math.pi / 180)\n\n# Sample Test case\nassert radian_degree(90) == 1.5707963267948966\n\n\n"], "prompt_tokens": [3530], "completion_tokens": [1710], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_606_radian_degree"}
{"name": "mbpp_721_maxAverageOfPath", "language": "Python3", "prompt": "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    \"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "maxAverageOfPath", "test": "def check(candidate):\n    assert candidate([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n    assert candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2\n    assert candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8\n\ndef test_check():\n    check(maxAverageOfPath)\n\ntest_check()\n", "sample_io": ["assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"], "source_codes": ["\nfrom typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    if not cost or not all(len(row) == len(cost) for row in cost):\n        return 0.0\n    \n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    \n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, N):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    \n    total_cost = dp[N-1][N-1]\n    path_length = 2 * N - 1\n    max_average = total_cost / path_length\n    \n    return max_average\n\n\n"], "responses": ["\nfrom typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    if not cost or not all(len(row) == len(cost) for row in cost):\n        return 0.0\n    \n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    \n    dp[0][0] = cost[0][0]\n    \n    for i in range(1, N):\n        dp[0][i] = dp[0][i-1] + cost[0][i]\n        dp[i][0] = dp[i-1][0] + cost[i][0]\n    \n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = cost[i][j] + max(dp[i-1][j], dp[i][j-1])\n    \n    total_cost = dp[N-1][N-1]\n    path_length = 2 * N - 1\n    max_average = total_cost / path_length\n    \n    return max_average\n\n\n"], "prompt_tokens": [5986], "completion_tokens": [3524], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_721_maxAverageOfPath"}
{"name": "mbpp_444_trim_tuple", "language": "Python3", "prompt": "from typing import List\n\ndef trim_tuple(test_list: List[List[int]], K: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to trim each list by k in the given lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "trim_tuple", "test": "def check(candidate):\n    assert candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2) == [[2], [9], [2], [2]]\n    assert candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1) == [[3, 2, 1], [4, 9, 2], [1, 2, 3], [8, 2, 1]]\n    assert candidate([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1) == [[8, 4], [8, 12], [1, 7], [6, 9]]\n\ndef test_check():\n    check(trim_tuple)\n\ntest_check()\n", "sample_io": ["assert trim_tuple([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2) == [[2], [9], [2], [2]]"], "source_codes": ["\nfrom typing import List\n\ndef trim_tuple(test_list: List[List[int]], K: int) -> List[List[int]]:\n    trimmed_lists = []\n    for inner_list in test_list:\n        if len(inner_list) <= K:\n            trimmed_lists.append([])  # Append an empty list if the length is less than or equal to K\n        else:\n            trimmed_lists.append(inner_list[K:K+1])  # Append the trimmed list containing only the element at index K\n    return trimmed_lists\n\n# Example test case\nassert trim_tuple([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2) == [[2], [9], [2], [2]]\n\n\n"], "responses": ["\nfrom typing import List\n\ndef trim_tuple(test_list: List[List[int]], K: int) -> List[List[int]]:\n    trimmed_lists = []\n    for inner_list in test_list:\n        if len(inner_list) <= K:\n            trimmed_lists.append([])  # Append an empty list if the length is less than or equal to K\n        else:\n            trimmed_lists.append(inner_list[K:K+1])  # Append the trimmed list containing only the element at index K\n    return trimmed_lists\n\n# Example test case\nassert trim_tuple([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 2) == [[2], [9], [2], [2]]\n\n\n"], "prompt_tokens": [16625], "completion_tokens": [8777], "no_of_try": 1, "api_calls": 25, "is_solved": false, "task_id": "mbpp_444_trim_tuple"}
{"name": "mbpp_610_remove_kth_element", "language": "Python3", "prompt": "from typing import List\n\ndef remove_kth_element(list1: List[int], L: int) -> List[int]:\n    \"\"\"\n\tWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_kth_element", "test": "def check(candidate):\n    assert candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 3, 4, 4, 5, 1]\n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4) == [0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5) == [10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]\n\ndef test_check():\n    check(remove_kth_element)\n\ntest_check()\n", "sample_io": ["assert remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 3, 4, 4, 5, 1]"], "source_codes": ["\nfrom typing import List\n\ndef remove_kth_element(list1: List[int], L: int) -> List[int]:\n    # Check if L is within the valid range\n    if L < 0 or L >= len(list1):\n        return list1  # Return the original list if L is out of bounds\n    \n    # Create a new list excluding the k'th element using slicing\n    modified_list = list1[:L] + list1[L+1:]  # Combine the parts before and after the k'th element\n    return modified_list  # Return the modified list\n\n# Test Cases\nassert remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 2, 4, 4, 5, 1]  # Remove element at index 3 (value 3)\nassert remove_kth_element([1, 2, 3], 0) == [2, 3]  # Remove first element\nassert remove_kth_element([1, 2, 3], 2) == [1, 2]  # Remove last element\nassert remove_kth_element([], 0) == []  # Remove from empty list\nassert remove_kth_element([1, 2, 3], -1) == [1, 2, 3]  # Invalid index (negative)\nassert remove_kth_element([1, 2, 3], 3) == [1, 2, 3]  # Invalid index (out of bounds)\n\n\n"], "responses": ["\nfrom typing import List\n\ndef remove_kth_element(list1: List[int], L: int) -> List[int]:\n    # Check if L is within the valid range\n    if L < 0 or L >= len(list1):\n        return list1  # Return the original list if L is out of bounds\n    \n    # Create a new list excluding the k'th element using slicing\n    modified_list = list1[:L] + list1[L+1:]  # Combine the parts before and after the k'th element\n    return modified_list  # Return the modified list\n\n# Test Cases\nassert remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 2, 4, 4, 5, 1]  # Remove element at index 3 (value 3)\nassert remove_kth_element([1, 2, 3], 0) == [2, 3]  # Remove first element\nassert remove_kth_element([1, 2, 3], 2) == [1, 2]  # Remove last element\nassert remove_kth_element([], 0) == []  # Remove from empty list\nassert remove_kth_element([1, 2, 3], -1) == [1, 2, 3]  # Invalid index (negative)\nassert remove_kth_element([1, 2, 3], 3) == [1, 2, 3]  # Invalid index (out of bounds)\n\n\n"], "prompt_tokens": [26469], "completion_tokens": [14665], "no_of_try": 1, "api_calls": 33, "is_solved": false, "task_id": "mbpp_610_remove_kth_element"}
{"name": "mbpp_616_tuple_modulo", "language": "Python3", "prompt": "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tuple_modulo", "test": "def check(candidate):\n    assert candidate((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n    assert candidate((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\n    assert candidate((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)\n\ndef test_check():\n    check(tuple_modulo)\n\ntest_check()\n", "sample_io": ["assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)"], "source_codes": ["\nfrom typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must be of the same length.\")\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    \n    return tuple(result)\n\n\n"], "responses": ["\nfrom typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both tuples must be of the same length.\")\n    \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] % test_tup2[i])\n    \n    return tuple(result)\n\n\n"], "prompt_tokens": [4083], "completion_tokens": [2017], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_616_tuple_modulo"}
{"name": "mbpp_755_second_smallest", "language": "Python3", "prompt": "from typing import List, Union, Optional\n\ndef second_smallest(numbers: List[Union[int, float]]) -> Optional[float]:\n    \"\"\"\n\tWrite a function to find the second smallest number in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "second_smallest", "test": "def check(candidate):\n    assert candidate([1, 2, -8, -2, 0, -2]) == -2\n    assert candidate([1, 1, -0.5, 0, 2, -2, -2]) == -0.5\n    assert candidate([2, 2]) == None\n    assert candidate([2, 2, 2]) == None\n\ndef test_check():\n    check(second_smallest)\n\ntest_check()\n", "sample_io": ["assert second_smallest([1, 2, -8, -2, 0, -2]) == -2"], "source_codes": ["\nfrom typing import List, Union, Optional\n\ndef second_smallest(numbers: List[Union[int, float]]) -> Optional[float]:\n    if not numbers:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif smallest < number < second_smallest:\n            second_smallest = number\n    \n    return second_smallest if second_smallest != float('inf') else None\n\n# Sample Test cases\nassert second_smallest([1, 2, -8, -2, 0, -2]) == -2\n\n\n"], "responses": ["\nfrom typing import List, Union, Optional\n\ndef second_smallest(numbers: List[Union[int, float]]) -> Optional[float]:\n    if not numbers:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif smallest < number < second_smallest:\n            second_smallest = number\n    \n    return second_smallest if second_smallest != float('inf') else None\n\n# Sample Test cases\nassert second_smallest([1, 2, -8, -2, 0, -2]) == -2\n\n\n"], "prompt_tokens": [4562], "completion_tokens": [2568], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_755_second_smallest"}
{"name": "mbpp_465_drop_empty", "language": "Python3", "prompt": "from typing import Dict, Optional\n\ndef drop_empty(dict1: Dict[str, Optional[str]]) -> Dict[str, str]:\n    \"\"\"\n\tWrite a function to drop empty items from a given dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "drop_empty", "test": "def check(candidate):\n    assert candidate({ 'c1': 'Red', 'c2': 'Green', 'c3': None }) == { 'c1': 'Red', 'c2': 'Green' }\n    assert candidate({ 'c1': 'Red', 'c2': None, 'c3': None }) == { 'c1': 'Red' }\n    assert candidate({ 'c1': None, 'c2': 'Green', 'c3': None }) == { 'c2': 'Green' }\n\ndef test_check():\n    check(drop_empty)\n\ntest_check()\n", "sample_io": ["assert drop_empty({ 'c1': 'Red', 'c2': 'Green', 'c3': None }) == { 'c1': 'Red', 'c2': 'Green' }"], "source_codes": ["\nfrom typing import Dict, Optional\n\ndef drop_empty(dict1: Dict[str, Optional[str]]) -> Dict[str, str]:\n    result = {}\n    for key, value in dict1.items():\n        if value not in (None, ''):\n            result[key] = value\n    return result\n\n\n"], "responses": ["\nfrom typing import Dict, Optional\n\ndef drop_empty(dict1: Dict[str, Optional[str]]) -> Dict[str, str]:\n    result = {}\n    for key, value in dict1.items():\n        if value not in (None, ''):\n            result[key] = value\n    return result\n\n\n"], "prompt_tokens": [3715], "completion_tokens": [2167], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_465_drop_empty"}
{"name": "mbpp_58_opposite_Signs", "language": "Python3", "prompt": "def opposite_Signs(x: int, y: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "opposite_Signs", "test": "def check(candidate):\n    assert candidate(1, -2) == True\n    assert candidate(3, 2) == False\n    assert candidate(-10, -10) == False\n    assert candidate(-2, 2) == True\n\ndef test_check():\n    check(opposite_Signs)\n\ntest_check()\n", "sample_io": ["assert opposite_Signs(1, -2) == True"], "source_codes": ["\ndef opposite_Signs(x: int, y: int) -> bool:\n    return x * y < 0\n\n# Sample Test cases\nassert opposite_Signs(1, -2) == True\nassert opposite_Signs(-1, 2) == True\nassert opposite_Signs(1, 2) == False\nassert opposite_Signs(-1, -2) == False\n\n\n"], "responses": ["\ndef opposite_Signs(x: int, y: int) -> bool:\n    return x * y < 0\n\n# Sample Test cases\nassert opposite_Signs(1, -2) == True\nassert opposite_Signs(-1, 2) == True\nassert opposite_Signs(1, 2) == False\nassert opposite_Signs(-1, -2) == False\n\n\n"], "prompt_tokens": [3682], "completion_tokens": [1727], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_58_opposite_Signs"}
{"name": "mbpp_270_sum_even_and_even_index", "language": "Python3", "prompt": "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of even numbers at even positions of a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_even_and_even_index", "test": "def check(candidate):\n    assert candidate([5, 6, 12, 1, 18, 8]) == 30\n    assert candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26\n    assert candidate([5, 6, 12, 1]) == 12\n\ndef test_check():\n    check(sum_even_and_even_index)\n\ntest_check()\n", "sample_io": ["assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30"], "source_codes": ["\nfrom typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    total_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total_sum += arr[i]\n    return total_sum\n\n# Sample Test case\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\n\n"], "responses": ["\nfrom typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    total_sum = 0\n    for i in range(len(arr)):\n        if i % 2 == 0 and arr[i] % 2 == 0:\n            total_sum += arr[i]\n    return total_sum\n\n# Sample Test case\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\n\n"], "prompt_tokens": [3902], "completion_tokens": [2246], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_270_sum_even_and_even_index"}
{"name": "mbpp_418_Find_Max", "language": "Python3", "prompt": "from typing import List, Any\n\ndef Find_Max(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n\tWrite a python function to find the element of a list having maximum length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Max", "test": "def check(candidate):\n    assert candidate([['A'], ['A', 'B'], ['A', 'B', 'C']]) == ['A', 'B', 'C']\n    assert candidate([[1], [1, 2], [1, 2, 3]]) == [1, 2, 3]\n    assert candidate([[1, 1], [1, 2, 3], [1, 5, 6, 1]]) == [1, 5, 6, 1]\n\ndef test_check():\n    check(Find_Max)\n\ntest_check()\n", "sample_io": ["assert Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']]) == ['A', 'B', 'C']"], "source_codes": ["\nfrom typing import List, Any\n\ndef Find_Max(lst: List[List[Any]]) -> List[Any]:\n    max_element = lst[0]\n    for sublist in lst:\n        if len(sublist) > len(max_element):\n            max_element = sublist\n    return max_element\n\n\n"], "responses": ["\nfrom typing import List, Any\n\ndef Find_Max(lst: List[List[Any]]) -> List[Any]:\n    max_element = lst[0]\n    for sublist in lst:\n        if len(sublist) > len(max_element):\n            max_element = sublist\n    return max_element\n\n\n"], "prompt_tokens": [3917], "completion_tokens": [2434], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_418_Find_Max"}
{"name": "mbpp_598_armstrong_number", "language": "Python3", "prompt": "def armstrong_number(number: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is armstrong or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "armstrong_number", "test": "def check(candidate):\n    assert candidate(153) == True\n    assert candidate(259) == False\n    assert candidate(4458) == False\n\ndef test_check():\n    check(armstrong_number)\n\ntest_check()\n", "sample_io": ["assert armstrong_number(153) == True"], "source_codes": ["\ndef armstrong_number(number: int) -> bool:\n    digits = str(number)\n    num_digits = len(digits)\n    sum_of_powers = sum(int(digit) ** num_digits for digit in digits)\n    return sum_of_powers == number\n\n# Sample Test cases\nassert armstrong_number(153) == True\nassert armstrong_number(370) == True\nassert armstrong_number(371) == True\nassert armstrong_number(9474) == True\nassert armstrong_number(123) == False\n\n\n"], "responses": ["\ndef armstrong_number(number: int) -> bool:\n    digits = str(number)\n    num_digits = len(digits)\n    sum_of_powers = sum(int(digit) ** num_digits for digit in digits)\n    return sum_of_powers == number\n\n# Sample Test cases\nassert armstrong_number(153) == True\nassert armstrong_number(370) == True\nassert armstrong_number(371) == True\nassert armstrong_number(9474) == True\nassert armstrong_number(123) == False\n\n\n"], "prompt_tokens": [3741], "completion_tokens": [2188], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_598_armstrong_number"}
{"name": "mbpp_435_last_Digit", "language": "Python3", "prompt": "def last_Digit(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the last digit of a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_435_last_Digit.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "last_Digit", "test": "def check(candidate):\n    assert candidate(123) == 3\n    assert candidate(25) == 5\n    assert candidate(30) == 0\n\ndef test_check():\n    check(last_Digit)\n\ntest_check()\n", "sample_io": ["assert last_Digit(123) == 3"], "source_codes": ["\ndef last_Digit(n: int) -> int:\n    return n % 10\n\n# Test cases\nassert last_Digit(123) == 3\nassert last_Digit(-456) == 4\nassert last_Digit(0) == 0\nassert last_Digit(7890) == 0\nassert last_Digit(-101) == 9\n\n\n"], "responses": ["\ndef last_Digit(n: int) -> int:\n    return n % 10\n\n# Test cases\nassert last_Digit(123) == 3\nassert last_Digit(-456) == 4\nassert last_Digit(0) == 0\nassert last_Digit(7890) == 0\nassert last_Digit(-101) == 9\n\n\n"], "prompt_tokens": [3423], "completion_tokens": [1969], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_435_last_Digit"}
{"name": "mbpp_436_neg_nos", "language": "Python3", "prompt": "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to return the negative numbers in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "neg_nos", "test": "def check(candidate):\n    assert candidate([-1, 4, 5, -6]) == [-1, -6]\n    assert candidate([-1, -2, 3, 4]) == [-1, -2]\n    assert candidate([-7, -6, 8, 9]) == [-7, -6]\n\ndef test_check():\n    check(neg_nos)\n\ntest_check()\n", "sample_io": ["assert neg_nos([-1, 4, 5, -6]) == [-1, -6]"], "source_codes": ["\nfrom typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    negative_numbers = []\n    for number in list1:\n        if number < 0:\n            negative_numbers.append(number)\n    return negative_numbers\n\n\n"], "responses": ["\nfrom typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    negative_numbers = []\n    for number in list1:\n        if number < 0:\n            negative_numbers.append(number)\n    return negative_numbers\n\n\n"], "prompt_tokens": [3704], "completion_tokens": [1827], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_436_neg_nos"}
{"name": "mbpp_781_count_divisors", "language": "Python3", "prompt": "def count_divisors(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_divisors", "test": "def check(candidate):\n    assert candidate(10) == True\n    assert candidate(100) == False\n    assert candidate(125) == True\n\ndef test_check():\n    check(count_divisors)\n\ntest_check()\n", "sample_io": ["assert count_divisors(10) == True"], "source_codes": ["\ndef count_divisors(n: int) -> bool:\n    divisor_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count % 2 == 0\n\n# Sample Test case\nassert count_divisors(10) == True\n\n\n"], "responses": ["\ndef count_divisors(n: int) -> bool:\n    divisor_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisor_count += 1\n    return divisor_count % 2 == 0\n\n# Sample Test case\nassert count_divisors(10) == True\n\n\n"], "prompt_tokens": [3876], "completion_tokens": [2281], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_781_count_divisors"}
{"name": "mbpp_745_divisible_by_digits", "language": "Python3", "prompt": "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "divisible_by_digits", "test": "def check(candidate):\n    assert candidate(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    assert candidate(1, 15) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n    assert candidate(20, 25) == [22, 24]\n\ndef test_check():\n    check(divisible_by_digits)\n\ntest_check()\n", "sample_io": ["assert divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"], "source_codes": ["\nfrom typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    results = []\n    \n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        is_divisible = True\n        \n        for digit in str_num:\n            int_digit = int(digit)\n            if int_digit == 0 or num % int_digit != 0:\n                is_divisible = False\n                break\n        \n        if is_divisible:\n            results.append(num)\n    \n    return results\n\n\n"], "responses": ["\nfrom typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n    \n    results = []\n    \n    for num in range(startnum, endnum + 1):\n        str_num = str(num)\n        is_divisible = True\n        \n        for digit in str_num:\n            int_digit = int(digit)\n            if int_digit == 0 or num % int_digit != 0:\n                is_divisible = False\n                break\n        \n        if is_divisible:\n            results.append(num)\n    \n    return results\n\n\n"], "prompt_tokens": [4918], "completion_tokens": [2544], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_745_divisible_by_digits"}
{"name": "mbpp_118_string_to_list", "language": "Python3", "prompt": "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    \"\"\"\n\tWrite a function to convert a string to a list of strings split on the space character.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "string_to_list", "test": "def check(candidate):\n    assert candidate('python programming') == ['python', 'programming']\n    assert candidate('lists tuples strings') == ['lists', 'tuples', 'strings']\n    assert candidate('write a program') == ['write', 'a', 'program']\n\ndef test_check():\n    check(string_to_list)\n\ntest_check()\n", "sample_io": ["assert string_to_list('python programming') == ['python', 'programming']"], "source_codes": ["\nfrom typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split()\n\n\n"], "responses": ["\nfrom typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split()\n\n\n"], "prompt_tokens": [3700], "completion_tokens": [1984], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_118_string_to_list"}
{"name": "mbpp_265_list_split", "language": "Python3", "prompt": "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    \"\"\"\n\tWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "list_split", "test": "def check(candidate):\n    assert candidate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3) == [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]\n    assert candidate(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2) == [['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n\ndef test_check():\n    check(list_split)\n\ntest_check()\n", "sample_io": ["assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"], "source_codes": ["\nfrom typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step < 1:\n        return []\n    \n    result = [[] for _ in range(step)]\n    \n    for i, element in enumerate(S):\n        result[i % step].append(element)\n    \n    return result\n\n\n"], "responses": ["\nfrom typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step < 1:\n        return []\n    \n    result = [[] for _ in range(step)]\n    \n    for i, element in enumerate(S):\n        result[i % step].append(element)\n    \n    return result\n\n\n"], "prompt_tokens": [5286], "completion_tokens": [2883], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_265_list_split"}
{"name": "mbpp_164_are_equivalent", "language": "Python3", "prompt": "def are_equivalent(num1: int, num2: int) -> bool:\n    \"\"\"\n\tWrite a function to determine if the sum of the divisors of two integers are the same.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "are_equivalent", "test": "def check(candidate):\n    assert candidate(36, 57) == False\n    assert candidate(2, 4) == False\n    assert candidate(23, 47) == True\n\ndef test_check():\n    check(are_equivalent)\n\ntest_check()\n", "sample_io": ["assert are_equivalent(36, 57) == False"], "source_codes": ["\ndef are_equivalent(num1: int, num2: int) -> bool:\n    def sum_of_divisors(n: int) -> int:\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n\n# Sample Test cases\nassert are_equivalent(36, 57) == False\n\n\n"], "responses": ["\ndef are_equivalent(num1: int, num2: int) -> bool:\n    def sum_of_divisors(n: int) -> int:\n        total = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n\n# Sample Test cases\nassert are_equivalent(36, 57) == False\n\n\n"], "prompt_tokens": [4037], "completion_tokens": [2436], "no_of_try": 1, "api_calls": 10, "is_solved": false, "task_id": "mbpp_164_are_equivalent"}
{"name": "mbpp_439_multiple_to_single", "language": "Python3", "prompt": "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    \"\"\"\n\tWrite a function to join a list of multiple integers into a single integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "multiple_to_single", "test": "def check(candidate):\n    assert candidate([11, 33, 50]) == 113350\n    assert candidate([-1, 2, 3, 4, 5, 6]) == -123456\n    assert candidate([10, 15, 20, 25]) == 10152025\n\ndef test_check():\n    check(multiple_to_single)\n\ntest_check()\n", "sample_io": ["assert multiple_to_single([11, 33, 50]) == 113350"], "source_codes": ["\nfrom typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    result = \"\"\n    for num in L:\n        result += str(num)\n    return int(result)\n\n# Sample Test case\nassert multiple_to_single([11, 33, 50]) == 113350\n\n\n"], "responses": ["\nfrom typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    result = \"\"\n    for num in L:\n        result += str(num)\n    return int(result)\n\n# Sample Test case\nassert multiple_to_single([11, 33, 50]) == 113350\n\n\n"], "prompt_tokens": [3633], "completion_tokens": [1777], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_439_multiple_to_single"}
{"name": "mbpp_618_div_list", "language": "Python3", "prompt": "from typing import List\n\ndef div_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    \"\"\"\n\tWrite a function to divide two lists element wise.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "div_list", "test": "def check(candidate):\n    assert candidate([4, 5, 6], [1, 2, 3]) == [4.0, 2.5, 2.0]\n    assert candidate([3, 2], [1, 4]) == [3.0, 0.5]\n    assert candidate([90, 120], [50, 70]) == [1.8, 1.7142857142857142]\n\ndef test_check():\n    check(div_list)\n\ntest_check()\n", "sample_io": ["assert div_list([4, 5, 6], [1, 2, 3]) == [4.0, 2.5, 2.0]"], "source_codes": ["\nfrom typing import List\n\ndef div_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Input lists must have the same length.\")\n    \n    result = []\n    \n    for n1, n2 in zip(nums1, nums2):\n        if n2 == 0:\n            result.append(None)  # or raise ZeroDivisionError\n        else:\n            result.append(n1 / n2)\n    \n    return result\n\n\n"], "responses": ["\nfrom typing import List\n\ndef div_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Input lists must have the same length.\")\n    \n    result = []\n    \n    for n1, n2 in zip(nums1, nums2):\n        if n2 == 0:\n            result.append(None)  # or raise ZeroDivisionError\n        else:\n            result.append(n1 / n2)\n    \n    return result\n\n\n"], "prompt_tokens": [4188], "completion_tokens": [2438], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_618_div_list"}
{"name": "mbpp_75_find_tuples", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, int, int]], K: int) -> List[Tuple[int, int, int]]:\n    \"\"\"\n\tWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_tuples", "test": "def check(candidate):\n    assert candidate([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n    assert candidate([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]\n    assert candidate([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]\n\ndef test_check():\n    check(find_tuples)\n\ntest_check()\n", "sample_io": ["assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, int, int]], K: int) -> List[Tuple[int, int, int]]:\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n\n\n"], "responses": ["\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, int, int]], K: int) -> List[Tuple[int, int, int]]:\n    result = []\n    for tup in test_list:\n        if all(x % K == 0 for x in tup):\n            result.append(tup)\n    return result\n\n\n"], "prompt_tokens": [4227], "completion_tokens": [2357], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_75_find_tuples"}
{"name": "mbpp_410_min_val", "language": "Python3", "prompt": "from typing import List, Union\n\ndef min_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the minimum value in a given heterogeneous list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_410_min_val.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_val", "test": "def check(candidate):\n    assert candidate(['Python', 3, 2, 4, 5, 'version']) == 2\n    assert candidate(['Python', 15, 20, 25]) == 15\n    assert candidate(['Python', 30, 20, 40, 50, 'version']) == 20\n\ndef test_check():\n    check(min_val)\n\ntest_check()\n", "sample_io": ["assert min_val(['Python', 3, 2, 4, 5, 'version']) == 2"], "source_codes": ["\nfrom typing import List, Union\n\ndef min_val(listval: List[Union[str, int]]) -> int:\n    min_value = None\n    for element in listval:\n        if isinstance(element, int):\n            if min_value is None or element < min_value:\n                min_value = element\n    if min_value is None:\n        return None  # or raise an error if preferred\n    return min_value\n\n\n"], "responses": ["\nfrom typing import List, Union\n\ndef min_val(listval: List[Union[str, int]]) -> int:\n    min_value = None\n    for element in listval:\n        if isinstance(element, int):\n            if min_value is None or element < min_value:\n                min_value = element\n    if min_value is None:\n        return None  # or raise an error if preferred\n    return min_value\n\n\n"], "prompt_tokens": [4294], "completion_tokens": [2307], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_410_min_val"}
{"name": "mbpp_784_mul_even_odd", "language": "Python3", "prompt": "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "mul_even_odd", "test": "def check(candidate):\n    assert candidate([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\n    assert candidate([1, 5, 7, 9, 10]) == 10\n\ndef test_check():\n    check(mul_even_odd)\n\ntest_check()\n", "sample_io": ["assert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4"], "source_codes": ["\nfrom typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return 0\n    \n    return first_even * first_odd\n\n\n"], "responses": ["\nfrom typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return 0\n    \n    return first_even * first_odd\n\n\n"], "prompt_tokens": [4576], "completion_tokens": [2471], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_784_mul_even_odd"}
{"name": "mbpp_744_check_none", "language": "Python3", "prompt": "from typing import Any\n\ndef check_none(test_tup: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if the given tuple has any none value or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_744_check_none.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_none", "test": "def check(candidate):\n    assert candidate((10, 4, 5, 6, None)) == True\n    assert candidate((7, 8, 9, 11, 14)) == False\n    assert candidate((1, 2, 3, 4, None)) == True\n\ndef test_check():\n    check(check_none)\n\ntest_check()\n", "sample_io": ["assert check_none((10, 4, 5, 6, None)) == True"], "source_codes": ["\nfrom typing import Any\n\ndef check_none(test_tup: Any) -> bool:\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n\n\n"], "responses": ["\nfrom typing import Any\n\ndef check_none(test_tup: Any) -> bool:\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n\n\n"], "prompt_tokens": [3478], "completion_tokens": [1757], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_744_check_none"}
{"name": "mbpp_131_reverse_vowels", "language": "Python3", "prompt": "def reverse_vowels(str1: str) -> str:\n    \"\"\"\n\tWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "reverse_vowels", "test": "def check(candidate):\n    assert candidate('Python') == 'Python'\n    assert candidate('USA') == 'ASU'\n    assert candidate('ab') == 'ab'\n\ndef test_check():\n    check(reverse_vowels)\n\ntest_check()\n", "sample_io": ["assert reverse_vowels('Python') == 'Python'"], "source_codes": ["\ndef reverse_vowels(str1: str) -> str:\n    vowels = set('aeiouAEIOU')\n    left, right = 0, len(str1) - 1\n    char_list = list(str1)\n\n    while left < right:\n        while left < right and char_list[left] not in vowels:\n            left += 1\n        while left < right and char_list[right] not in vowels:\n            right -= 1\n        if left < right:\n            char_list[left], char_list[right] = char_list[right], char_list[left]\n            left += 1\n            right -= 1\n\n    return ''.join(char_list)\n\n# Sample Test case\nassert reverse_vowels('Python') == 'Python'\n\n\n"], "responses": ["\ndef reverse_vowels(str1: str) -> str:\n    vowels = set('aeiouAEIOU')\n    left, right = 0, len(str1) - 1\n    char_list = list(str1)\n\n    while left < right:\n        while left < right and char_list[left] not in vowels:\n            left += 1\n        while left < right and char_list[right] not in vowels:\n            right -= 1\n        if left < right:\n            char_list[left], char_list[right] = char_list[right], char_list[left]\n            left += 1\n            right -= 1\n\n    return ''.join(char_list)\n\n# Sample Test case\nassert reverse_vowels('Python') == 'Python'\n\n\n"], "prompt_tokens": [4435], "completion_tokens": [2468], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_131_reverse_vowels"}
{"name": "mbpp_264_dog_age", "language": "Python3", "prompt": "def dog_age(h_age: int) -> int:\n    \"\"\"\n\tWrite a function to calculate a dog's age in dog's years.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_264_dog_age.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "dog_age", "test": "def check(candidate):\n    assert candidate(12) == 61\n    assert candidate(15) == 73\n    assert candidate(24) == 109\n\ndef test_check():\n    check(dog_age)\n\ntest_check()\n", "sample_io": ["assert dog_age(12) == 61"], "source_codes": ["\ndef dog_age(h_age: int) -> int:\n    if h_age <= 0:\n        return 0\n    elif h_age <= 2:\n        dog_years = h_age * 10.5\n    else:\n        dog_years = 21 + (h_age - 2) * 4\n    return int(dog_years)\n\n# Sample Test case\nassert dog_age(12) == 61\n\n\n"], "responses": ["\ndef dog_age(h_age: int) -> int:\n    if h_age <= 0:\n        return 0\n    elif h_age <= 2:\n        dog_years = h_age * 10.5\n    else:\n        dog_years = 21 + (h_age - 2) * 4\n    return int(dog_years)\n\n# Sample Test case\nassert dog_age(12) == 61\n\n\n"], "prompt_tokens": [3593], "completion_tokens": [2200], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_264_dog_age"}
{"name": "mbpp_305_start_withp", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "start_withp", "test": "def check(candidate):\n    assert candidate(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')\n    assert candidate(['Python Programming', 'Java Programming']) == ('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv']) == ('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n", "sample_io": ["assert start_withp(['Python PHP', 'Java JavaScript', 'c c++']) == ('Python', 'PHP')"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    results = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                results.append(word)\n                if len(results) == 2:\n                    return (results[0], results[1])\n    if results:\n        return (results[0], None)\n    return (None, None)\n\n\n"], "responses": ["\nfrom typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    results = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                results.append(word)\n                if len(results) == 2:\n                    return (results[0], results[1])\n    if results:\n        return (results[0], None)\n    return (None, None)\n\n\n"], "prompt_tokens": [9282], "completion_tokens": [5163], "no_of_try": 1, "api_calls": 16, "is_solved": true, "task_id": "mbpp_305_start_withp"}
{"name": "mbpp_96_divisor", "language": "Python3", "prompt": "def divisor(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the number of divisors of a given integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "divisor", "test": "def check(candidate):\n    assert candidate(15) == 4\n    assert candidate(12) == 6\n    assert candidate(9) == 3\n\ndef test_check():\n    check(divisor)\n\ntest_check()\n", "sample_io": ["assert divisor(15) == 4"], "source_codes": ["\ndef divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Sample Test cases\nassert divisor(15) == 4\n\n\n"], "responses": ["\ndef divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Sample Test cases\nassert divisor(15) == 4\n\n\n"], "prompt_tokens": [3530], "completion_tokens": [2331], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_96_divisor"}
{"name": "mbpp_262_split_two_parts", "language": "Python3", "prompt": "from typing import List, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Any:\n    \"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "split_two_parts", "test": "def check(candidate):\n    assert candidate([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1])\n    assert candidate(['a', 'b', 'c', 'd'], 2) == (['a', 'b'], ['c', 'd'])\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'], 4) == (['p', 'y', 't', 'h'], ['o', 'n'])\n\ndef test_check():\n    check(split_two_parts)\n\ntest_check()\n", "sample_io": ["assert split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1])"], "source_codes": ["\nfrom typing import List, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Any:\n    if not list1:\n        return ([], [])\n    if L > len(list1):\n        return (list1, [])\n    return (list1[:L], list1[L:])\n\n\n"], "responses": ["\nfrom typing import List, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Any:\n    if not list1:\n        return ([], [])\n    if L > len(list1):\n        return (list1, [])\n    return (list1[:L], list1[L:])\n\n\n"], "prompt_tokens": [4301], "completion_tokens": [2274], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_262_split_two_parts"}
{"name": "mbpp_741_all_Characters_Same", "language": "Python3", "prompt": "def all_Characters_Same(s: str) -> bool:\n    \"\"\"\n\tWrite a python function to check whether all the characters are same or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "all_Characters_Same", "test": "def check(candidate):\n    assert candidate('python') == False\n    assert candidate('aaa') == True\n    assert candidate('data') == False\n\ndef test_check():\n    check(all_Characters_Same)\n\ntest_check()\n", "sample_io": ["assert all_Characters_Same('python') == False"], "source_codes": ["\ndef all_Characters_Same(s: str) -> bool:\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True\n\n# Sample Test cases\nassert all_Characters_Same('python') == False\nassert all_Characters_Same('aaaa') == True\nassert all_Characters_Same('') == True\nassert all_Characters_Same('bbbb') == True\nassert all_Characters_Same('a') == True\n\n\n"], "responses": ["\ndef all_Characters_Same(s: str) -> bool:\n    if not s:\n        return True\n    first_char = s[0]\n    for char in s:\n        if char != first_char:\n            return False\n    return True\n\n# Sample Test cases\nassert all_Characters_Same('python') == False\nassert all_Characters_Same('aaaa') == True\nassert all_Characters_Same('') == True\nassert all_Characters_Same('bbbb') == True\nassert all_Characters_Same('a') == True\n\n\n"], "prompt_tokens": [3252], "completion_tokens": [2056], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_741_all_Characters_Same"}
{"name": "mbpp_290_max_length", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_length(list1: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\"\n\tWrite a function to find the list of maximum length in a list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_length", "test": "def check(candidate):\n    assert candidate([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])\n    assert candidate([[1], [5, 7], [10, 12, 14, 15]]) == (4, [10, 12, 14, 15])\n    assert candidate([[5], [15, 20, 25]]) == (3, [15, 20, 25])\n\ndef test_check():\n    check(max_length)\n\ntest_check()\n", "sample_io": ["assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])"], "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_length(list1: List[List[int]]) -> Tuple[int, List[int]]:\n    max_len = 0\n    max_list = []\n    \n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n            \n    return (max_len, max_list)\n\n\n"], "responses": ["\nfrom typing import List, Tuple\n\ndef max_length(list1: List[List[int]]) -> Tuple[int, List[int]]:\n    max_len = 0\n    max_list = []\n    \n    for sublist in list1:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n            \n    return (max_len, max_list)\n\n\n"], "prompt_tokens": [4126], "completion_tokens": [2664], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_290_max_length"}
{"name": "mbpp_583_catalan_number", "language": "Python3", "prompt": "def catalan_number(num: int) -> int:\n    \"\"\"\n\tWrite a function which returns nth catalan number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "catalan_number", "test": "def check(candidate):\n    assert candidate(10) == 16796\n    assert candidate(9) == 4862\n    assert candidate(7) == 429\n\ndef test_check():\n    check(catalan_number)\n\ntest_check()\n", "sample_io": ["assert catalan_number(10) == 16796"], "source_codes": ["\ndef catalan_number(num: int) -> int:\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    \n    for i in range(1, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - 1 - j]\n    \n    return catalan[num]\n\n# Sample Test case\nassert catalan_number(10) == 16796\n\n\n"], "responses": ["\ndef catalan_number(num: int) -> int:\n    catalan = [0] * (num + 1)\n    catalan[0] = 1\n    \n    for i in range(1, num + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - 1 - j]\n    \n    return catalan[num]\n\n# Sample Test case\nassert catalan_number(10) == 16796\n\n\n"], "prompt_tokens": [4060], "completion_tokens": [2614], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_583_catalan_number"}
{"name": "mbpp_249_intersection_array", "language": "Python3", "prompt": "from typing import List\n\ndef intersection_array(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find the intersection of two arrays.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "intersection_array", "test": "def check(candidate):\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]) == [1, 2, 8, 9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9]) == [3, 5, 7, 9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40]) == [10]\n\ndef test_check():\n    check(intersection_array)\n\ntest_check()\n", "sample_io": ["assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9]) == [1, 2, 8, 9]"], "source_codes": ["\nfrom typing import List\n\ndef intersection_array(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1 & set2\n    return sorted(list(intersection))\n\n\n"], "responses": ["\nfrom typing import List\n\ndef intersection_array(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    set1 = set(array_nums1)\n    set2 = set(array_nums2)\n    intersection = set1 & set2\n    return sorted(list(intersection))\n\n\n"], "prompt_tokens": [4530], "completion_tokens": [2408], "no_of_try": 1, "api_calls": 11, "is_solved": true, "task_id": "mbpp_249_intersection_array"}
{"name": "mbpp_463_max_subarray_product", "language": "Python3", "prompt": "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum product subarray of the given array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_subarray_product", "test": "def check(candidate):\n    assert candidate([1, -2, -3, 0, 7, -8, -2]) == 112\n    assert candidate([6, -3, -10, 0, 2]) == 180\n    assert candidate([-2, -40, 0, -2, -3]) == 80\n\ndef test_check():\n    check(max_subarray_product)\n\ntest_check()\n", "sample_io": ["assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112"], "source_codes": ["\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = float('-inf')\n    current_max = 1\n    current_min = 1\n    \n    for num in arr:\n        if num < 0:\n            current_max, current_min = current_min, current_max\n        \n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        \n        max_product = max(max_product, current_max)\n    \n    return max_product\n\n# Sample Test case\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\n\n"], "responses": ["\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = float('-inf')\n    current_max = 1\n    current_min = 1\n    \n    for num in arr:\n        if num < 0:\n            current_max, current_min = current_min, current_max\n        \n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        \n        max_product = max(max_product, current_max)\n    \n    return max_product\n\n# Sample Test case\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\n\n"], "prompt_tokens": [3949], "completion_tokens": [2527], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_463_max_subarray_product"}
{"name": "mbpp_477_is_lower", "language": "Python3", "prompt": "def is_lower(string: str) -> str:\n    \"\"\"\n\tWrite a python function to convert the given string to lower case.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_lower", "test": "def check(candidate):\n    assert candidate('InValid') == 'invalid'\n    assert candidate('TruE') == 'true'\n    assert candidate('SenTenCE') == 'sentence'\n\ndef test_check():\n    check(is_lower)\n\ntest_check()\n", "sample_io": ["assert is_lower('InValid') == 'invalid'"], "source_codes": ["\ndef is_lower(string: str) -> str:\n    result = \"\"\n    for char in string:\n        if 'A' <= char <= 'Z':\n            result += chr(ord(char) + 32)\n        else:\n            result += char\n    return result\n\n\n"], "responses": ["\ndef is_lower(string: str) -> str:\n    result = \"\"\n    for char in string:\n        if 'A' <= char <= 'Z':\n            result += chr(ord(char) + 32)\n        else:\n            result += char\n    return result\n\n\n"], "prompt_tokens": [3443], "completion_tokens": [1963], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_477_is_lower"}
{"name": "mbpp_803_is_perfect_square", "language": "Python3", "prompt": "def is_perfect_square(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_perfect_square", "test": "def check(candidate):\n    assert candidate(10) == False\n    assert candidate(36) == True\n    assert candidate(14) == False\n    assert candidate(196) == True\n    assert candidate(125) == False\n    assert candidate(15625) == True\n\ndef test_check():\n    check(is_perfect_square)\n\ntest_check()\n", "sample_io": ["assert is_perfect_square(10) == False"], "source_codes": ["\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    low, high = 0, n\n    while low <= high:\n        mid = (low + high) // 2\n        mid_squared = mid * mid\n        if mid_squared == n:\n            return True\n        elif mid_squared < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\n\n"], "responses": ["\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    low, high = 0, n\n    while low <= high:\n        mid = (low + high) // 2\n        mid_squared = mid * mid\n        if mid_squared == n:\n            return True\n        elif mid_squared < n:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\n\n"], "prompt_tokens": [4682], "completion_tokens": [2597], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_803_is_perfect_square"}
{"name": "mbpp_66_pos_count", "language": "Python3", "prompt": "from typing import List\n\ndef pos_count(list: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to count the number of positive numbers in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pos_count", "test": "def check(candidate):\n    assert candidate([1, -2, 3, -4]) == 2\n    assert candidate([3, 4, 5, -1]) == 3\n    assert candidate([1, 2, 3, 4]) == 4\n\ndef test_check():\n    check(pos_count)\n\ntest_check()\n", "sample_io": ["assert pos_count([1, -2, 3, -4]) == 2"], "source_codes": ["\nfrom typing import List\n\ndef pos_count(lst: List[int]) -> int:\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\n# Sample Test cases\nassert pos_count([1, -2, 3, -4]) == 2\n\n\n"], "responses": ["\nfrom typing import List\n\ndef pos_count(lst: List[int]) -> int:\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\n# Sample Test cases\nassert pos_count([1, -2, 3, -4]) == 2\n\n\n"], "prompt_tokens": [3637], "completion_tokens": [1991], "no_of_try": 1, "api_calls": 10, "is_solved": true, "task_id": "mbpp_66_pos_count"}
