{"task_id": "HumanEval/0", "solution": "from typing import *\n\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n\n\n"}
{"task_id": "HumanEval/1", "solution": "from typing import *\n\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            result.append(''.join(stack) + char)\n            stack = []\n    return result\n\n\n"}
{"task_id": "HumanEval/2", "solution": "from typing import *\n\ndef truncate_number(number: float) -> float:\n    return number - int(number)\n\n\n"}
{"task_id": "HumanEval/3", "solution": "from typing import *\n\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n\n"}
{"task_id": "HumanEval/4", "solution": "from typing import *\n\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    abs_diff = [abs(x - mean) for x in numbers]\n    return sum(abs_diff) / len(abs_diff)\n\n\n"}
{"task_id": "HumanEval/5", "solution": "from typing import *\n\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    result.pop()  # Remove the extra delimiter at the end\n    return result\n\n\n"}
{"task_id": "HumanEval/6", "solution": "from typing import *\n\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        stack = []\n        for char in group:\n            if char == '(':\n                stack.append(char)\n                max_depth = max(max_depth, len(stack))\n            elif char == ')':\n                stack.pop()\n        result.append(max_depth)\n    return result\n\n\n"}
{"task_id": "HumanEval/7", "solution": "from typing import *\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]\n\n\n"}
{"task_id": "HumanEval/8", "solution": "from typing import *\n\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    sum_result = 0\n    product_result = 1\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n    return sum_result, product_result\n\n\n"}
{"task_id": "HumanEval/9", "solution": "from typing import *\n\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    window = []\n    for i, num in enumerate(numbers):\n        while window and numbers[window[-1]] < num:\n            window.pop()\n        window.append(i)\n        if window[0] == i - 3:\n            window.pop(0)\n        if i >= 2:\n            result.append(numbers[window[0]])\n    return result\n\n\n"}
{"task_id": "HumanEval/10", "solution": "from typing import *\n\n   def longest_palindrome(s: str) -> str:\n       n = len(s)\n       dp = [[False] * n for _ in range(n)]\n       start, max_len = 0, 1\n       for i in range(n):\n           dp[i][i] = True\n           for j in range(i):\n               if s[i] == s[j] and (i - j < 2 or dp[j + 1][i - 1]):\n                   dp[j][i] = True\n                   if i - j + 1 > max_len:\n                       start = j\n                       max_len = i - j + 1\n       return s[start:start + max_len]\n\n## Python3 code to solve the original problem:\n\n\n"}
{"task_id": "HumanEval/11", "solution": "from typing import *\n\ndef string_xor(a: str, b: str) -> str:\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n    return result\n\n\n"}
{"task_id": "HumanEval/12", "solution": "from typing import *\n\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for string in strings:\n        if len(string) > len(longest_str):\n            longest_str = string\n    return longest_str\n\n\n"}
{"task_id": "HumanEval/13", "solution": "from typing import *\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\n\n"}
{"task_id": "HumanEval/14", "solution": "from typing import *\n\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n\n\n"}
{"task_id": "HumanEval/15", "solution": "from typing import *\n\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n+1))\n\n\n"}
{"task_id": "HumanEval/16", "solution": "from typing import *\n\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n\n\n"}
{"task_id": "HumanEval/17", "solution": "from typing import *\n\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats\n\n\n"}
{"task_id": "HumanEval/18", "solution": "from typing import *\n\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n\n"}
{"task_id": "HumanEval/19", "solution": "from typing import *\n\ndef sort_numbers(numbers: str) -> str:\n    num_to_str = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    str_to_num = {v: k for k, v in num_to_str.items()}\n    \n    nums = numbers.split()\n    nums = sorted([num_to_str[num] for num in nums])\n    sorted_nums = ' '.join([str_to_num[num] for num in nums])\n    \n    return sorted_nums\n\n\n"}
{"task_id": "HumanEval/20", "solution": "from typing import *\n\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0, 1)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i+1])\n    return closest_pair\n\n\n"}
{"task_id": "HumanEval/21", "solution": "from typing import *\n\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    number_range = max_number - min_number\n    rescaled_numbers = [(x - min_number) / number_range for x in numbers]\n    return rescaled_numbers\n\n\n"}
{"task_id": "HumanEval/22", "solution": "from typing import *\n\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n\n\n"}
{"task_id": "HumanEval/23", "solution": "from typing import *\n\ndef strlen(string: str) -> int:\n    return len(string)\n\n\n"}
{"task_id": "HumanEval/24", "solution": "from typing import *\n\ndef largest_divisor(n: int) -> int:\n    result = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            result = max(result, i, n // i)\n    return result\n\n\n"}
{"task_id": "HumanEval/25", "solution": "from typing import *\n\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n\n\n"}
{"task_id": "HumanEval/26", "solution": "from typing import *\n\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_set = set()\n    result = []\n    for num in numbers:\n        if num not in unique_set:\n            result.append(num)\n            unique_set.add(num)\n    return result\n\n\n"}
{"task_id": "HumanEval/27", "solution": "from typing import *\n\ndef flip_case(string: str) -> str:\n    return ''.join([char.lower() if char.isupper() else char.upper() for char in string])\n\n\n"}
{"task_id": "HumanEval/28", "solution": "from typing import *\n\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n\n\n"}
{"task_id": "HumanEval/29", "solution": "from typing import *\n\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [string for string in strings if string.startswith(prefix)]\n\n\n"}
{"task_id": "HumanEval/30", "solution": "from typing import *\n\ndef get_positive(l: list):\n    return [x for x in l if x > 0]\n\n\n"}
{"task_id": "HumanEval/31", "solution": "from typing import *\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\n"}
{"task_id": "HumanEval/32", "solution": "from typing import *\n\ndef find_zero(xs: list):\n    def poly(x):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n    def poly_derivative(x):\n        return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0])\n\n    def newton_raphson(x0, tol, max_iter):\n        for i in range(max_iter):\n            x1 = x0 - poly(x0) / poly_derivative(x0)\n            if abs(x1 - x0) < tol:\n                return x1\n            x0 = x1\n        return None\n\n    if len(xs) % 2 != 0:\n        return \"List xs must have an even number of coefficients\"\n    if max(xs) == 0:\n        return \"Largest non-zero coefficient must be non-zero\"\n\n    return newton_raphson(0, 1e-10, 1000)\n\n\n"}
{"task_id": "HumanEval/33", "solution": "from typing import *\n\ndef sort_third(l: list):\n    for i in range(len(l)):\n        if i % 3 == 0:\n            l[i] = sorted(l[i])\n    return l\n\n\n"}
{"task_id": "HumanEval/34", "solution": "from typing import *\n\ndef unique(l: list):\n    return sorted(list(set(l)))\n\n\n"}
{"task_id": "HumanEval/35", "solution": "from typing import *\n\ndef max_element(l: list):\n    return max(l)\n\n\n"}
{"task_id": "HumanEval/36", "solution": "from typing import *\n\ndef fizz_buzz(n: int):\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n\n"}
{"task_id": "HumanEval/37", "solution": "from typing import *\n\ndef sort_even(l: list):\n    result = l.copy()\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    for i, val in zip(even_indices, even_values):\n        result[i] = val\n    return result\n\n\n"}
{"task_id": "HumanEval/38", "solution": "from typing import *\n\ndef encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\n"}
{"task_id": "HumanEval/39", "solution": "from typing import *\n\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    a, b = 0, 1\n    count = 0\n    while count < n:\n        a, b = b, a + b\n        if is_prime(b):\n            count += 1\n    return b\n\n\n"}
{"task_id": "HumanEval/40", "solution": "from typing import *\n\ndef triples_sum_to_zero(l: list):\n    l.sort()\n    for i in range(len(l) - 2):\n        left, right = i + 1, len(l) - 1\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total < 0:\n                left += 1\n            elif total > 0:\n                right -= 1\n            else:\n                return True\n    return False\n\n\n"}
{"task_id": "HumanEval/41", "solution": "from typing import *\n\ndef car_race_collision(n: int):\n    collisions = 0\n    for i in range(n):\n        collisions += min(i, n - i - 1)\n    return collisions\n\n\n"}
{"task_id": "HumanEval/42", "solution": "from typing import *\n\ndef incr_list(l: list):\n    for i in range(len(l)):\n        l[i] += 1\n    return l\n\n\n"}
{"task_id": "HumanEval/43", "solution": "from typing import *\n\ndef pairs_sum_to_zero(l):\n    num_set = set()\n    for num in l:\n        if -num in num_set:\n            return True\n        num_set.add(num)\n    return False\n\n\n"}
{"task_id": "HumanEval/44", "solution": "from typing import *\n\ndef change_base(x: int, base: int):\n    result = \"\"\n    while x > 0:\n        result += str(x % base)\n        x //= base\n    return result[::-1]\n\n\n"}
{"task_id": "HumanEval/45", "solution": "from typing import *\n\ndef triangle_area(a, h):\n    area = 0.5 * a * h\n    return area\n\n\n"}
{"task_id": "HumanEval/46", "solution": "from typing import *\n\n   def lengthOfLIS(nums: List[int]) -> int:\n       dp = [1] * len(nums)\n       for i in range(len(nums)):\n           for j in range(i):\n               if nums[i] > nums[j]:\n                   dp[i] = max(dp[i], dp[j] + 1)\n       return max(dp)\n\n## Python3 code to solve the original problem:\n\n\n"}
{"task_id": "HumanEval/47", "solution": "from typing import *\n\ndef median(l: list):\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n\n\n"}
{"task_id": "HumanEval/48", "solution": "from typing import *\n\ndef is_palindrome(text: str) -> bool:\n    left, right = 0, len(text) - 1\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True\n\n\n"}
{"task_id": "HumanEval/49", "solution": "from typing import *\n\ndef modp(n: int, p: int):\n    result = 1\n    base = 2 % p\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n    return result\n\n\n"}
{"task_id": "HumanEval/50", "solution": "from typing import *\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\n"}
{"task_id": "HumanEval/51", "solution": "from typing import *\n\ndef remove_vowels(text):\n    new_text = ''\n    for char in text:\n        if char not in 'aeiouAEIOU':\n            new_text += char\n    return new_text\n\n\n"}
{"task_id": "HumanEval/52", "solution": "from typing import *\n\ndef below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True\n\n\n"}
{"task_id": "HumanEval/53", "solution": "from typing import *\n\n   def addStrings(num1: str, num2: str) -> str:\n       return str(int(num1) + int(num2))\n   \n "}
{"task_id": "HumanEval/54", "solution": "from typing import *\n\ndef same_chars(s0: str, s1: str):\n    char_freq = {}\n    for char in s0:\n        char_freq[char] = char_freq.get(char, 0) + 1\n    for char in s1:\n        if char not in char_freq or char_freq[char] == 0:\n            return False\n        char_freq[char] -= 1\n    return True\n\n\n"}
{"task_id": "HumanEval/55", "solution": "from typing import *\n\ndef fib(n: int, memo={}) -> int:\n    if n in memo:\n        return memo[n]\n    if n <= 2:\n        return 1\n    memo[n] = fib(n-1, memo) + fib(n-2, memo)\n    return memo[n]\n\n\n"}
{"task_id": "HumanEval/56", "solution": "from typing import *\n\ndef correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n\n"}
{"task_id": "HumanEval/57", "solution": "from typing import *\n\ndef monotonic(l: list):\n    increasing = all(l[i] <= l[i+1] for i in range(len(l)-1))\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l)-1))\n    return increasing or decreasing\n\n\n"}
{"task_id": "HumanEval/58", "solution": "from typing import *\n\ndef common(l1: list, l2: list) -> list:\n    set1 = set(l1)\n    set2 = set(l2)\n    return sorted(list(set1.intersection(set2)))\n\n\n"}
{"task_id": "HumanEval/59", "solution": "from typing import *\n\ndef largest_prime_factor(n):\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n\n\n\n"}
{"task_id": "HumanEval/60", "solution": "from typing import *\n\ndef sum_to_n(n: int):\n    return n * (n + 1) // 2\n\n\n"}
{"task_id": "HumanEval/61", "solution": "from typing import *\n\ndef correct_bracketing(brackets: str) -> bool:\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n\n\n"}
{"task_id": "HumanEval/62", "solution": "from typing import *\n\n  def derivative(xs: list):\n      result = []\n      for i in range(1, len(xs)):\n          result.append(xs[i] * i)\n      return result\n  \n "}
{"task_id": "HumanEval/63", "solution": "from typing import *\n\ndef fibfib(n: int) -> int:\n    memo = {0: 0, 1: 0, 2: 1}\n    def fib(n, memo):\n        if n in memo:\n            return memo[n]\n        memo[n] = fib(n-1, memo) + fib(n-2, memo) + fib(n-3, memo)\n        return memo[n]\n    return fib(n, memo)\n\n\n"}
{"task_id": "HumanEval/64", "solution": "from typing import *\n\ndef vowels_count(s):\n    count = 0\n    vowels = \"aeiou\"\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            if i == len(s) - 1 or (i == len(s) - 2 and s[i+1].lower() == 'y'):\n                count += 1\n    return count\n\n\n"}
{"task_id": "HumanEval/65", "solution": "from typing import *\n\ndef circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n\n\n"}
{"task_id": "HumanEval/66", "solution": "from typing import *\n\ndef digitSum(s):\n    total = 0\n    for char in s:\n        if char.isupper():\n            total += ord(char)\n    return total\n\n\n"}
{"task_id": "HumanEval/67", "solution": "from typing import *\n\ndef fruit_distribution(s, n):\n    apples = int(s.split()[0])\n    oranges = int(s.split()[3])\n    return n - apples - oranges\n\n\n"}
{"task_id": "HumanEval/68", "solution": "from typing import *\n\ndef pluck(arr):\n    smallest_even = float('inf')\n    index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_even:\n            smallest_even = arr[i]\n            index = i\n    if index == -1:\n        return []\n    return [smallest_even, index]\n\n\n"}
{"task_id": "HumanEval/69", "solution": "from typing import *\n\ndef search(lst):\n    count = {}\n    for num in lst:\n        if num > 0:\n            count[num] = count.get(num, 0) + 1\n    result = -1\n    for num, freq in count.items():\n        if freq >= num:\n            result = max(result, num)\n    return result\n\n\n"}
{"task_id": "HumanEval/70", "solution": "from typing import *\n\ndef strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result\n\n\n"}
{"task_id": "HumanEval/71", "solution": "from typing import *\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1\n\n\n"}
{"task_id": "HumanEval/72", "solution": "from typing import *\n\ndef will_it_fly(q, w):\n    def is_palindromic(lst):\n        return lst == lst[::-1]\n    \n    def is_balanced(lst, max_weight):\n        return sum(lst) <= max_weight\n    \n    return is_palindromic(q) and is_balanced(q, w)\n\n\n"}
{"task_id": "HumanEval/73", "solution": "from typing import *\n\ndef smallest_change(arr):\n    changes = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes\n\n# Test cases\nprint(smallest_change([1,2,3,5,4,7,9,6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))  # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))  # Output: 0\n\n\n"}
{"task_id": "HumanEval/74", "solution": "from typing import *\n\ndef total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    if total1 < total2:\n        return lst1\n    else:\n        return lst2 if total2 < total1 else lst1\n\n\n"}
{"task_id": "HumanEval/75", "solution": "from typing import *\n\ndef is_multiply_prime(a):\n    primes = []\n    is_prime = [True] * 100\n    for p in range(2, 100):\n        if is_prime[p]:\n            primes.append(p)\n            for i in range(p * p, 100, p):\n                is_prime[i] = False\n    for i in range(len(primes)):\n        for j in range(i + 1, len(primes)):\n            for k in range(j + 1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n\n"}
{"task_id": "HumanEval/76", "solution": "from typing import *\n\nimport math\n\ndef is_simple_power(x, n):\n    return x > 0 and math.log(x) / math.log(n) % 1 == 0\n\n\n"}
{"task_id": "HumanEval/77", "solution": "from typing import *\n\ndef iscube(a):\n    cube_root = a ** (1/3)\n    return cube_root == int(cube_root)\n\n\n"}
{"task_id": "HumanEval/78", "solution": "from typing import *\n\ndef hex_key(num):\n    def isPrime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    count = 0\n    for digit in num:\n        if digit.isdigit():\n            if isPrime(int(digit)):\n                count += 1\n        else:\n            if digit in ['A', 'B', 'C', 'D', 'E', 'F']:\n                if isPrime(int(digit, 16)):\n                    count += 1\n    return count\n\n\n"}
{"task_id": "HumanEval/79", "solution": "from typing import *\n\ndef decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"\n\n\n"}
{"task_id": "HumanEval/80", "solution": "from typing import *\n\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n            return False\n    return True\n\n\n"}
{"task_id": "HumanEval/81", "solution": "from typing import *\n\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        # ... continue with the rest of the conditions\n    return letter_grades\n\n\n"}
{"task_id": "HumanEval/82", "solution": "from typing import *\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))\n\n# Test cases\nprint(prime_length('Hello'))  # Output: True\nprint(prime_length('abcdcba'))  # Output: True\nprint(prime_length('kittens'))  # Output: True\nprint(prime_length('orange'))  # Output: False\n\n\n"}
{"task_id": "HumanEval/83", "solution": "from typing import *\n\ndef starts_one_ends(n):\n    start_with_1 = 9 * 10**(n-1)  # Count of n-digit positive integers that start with 1\n    end_with_1 = 10**(n-1)  # Count of n-digit positive integers that end with 1\n    return start_with_1 + end_with_1\n\n\n"}
{"task_id": "HumanEval/84", "solution": "from typing import *\n\ndef solve(N):\n    binary_sum = sum(int(digit) for digit in bin(N)[2:])\n    return bin(binary_sum)[2:]\n\n\n"}
{"task_id": "HumanEval/85", "solution": "from typing import *\n\ndef add(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n\n"}
{"task_id": "HumanEval/86", "solution": "from typing import *\n\ndef anti_shuffle(s):\n    words = s.split()\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)\n\n\n"}
{"task_id": "HumanEval/87", "solution": "from typing import *\n\ndef get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda x: (x[0], -x[1]))\n    return coordinates\n\n\n"}
{"task_id": "HumanEval/88", "solution": "from typing import *\n\ndef sort_array(array):\n    if len(array) == 0:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n\n"}
{"task_id": "HumanEval/89", "solution": "from typing import *\n\ndef encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 65 if char.isupper() else 97\n            result += chr((ord(char) - shift + 4) % 26 + shift)\n        else:\n            result += char\n    return result\n\n\n"}
{"task_id": "HumanEval/90", "solution": "from typing import *\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(lst)\n    return sorted_lst[1]\n\n\n"}
{"task_id": "HumanEval/91", "solution": "from typing import *\n\ndef is_bored(S):\n    sentences = S.split('.')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip() and sentence.strip().startswith(\"I\"):\n            count += 1\n    return count\n\n\n"}
{"task_id": "HumanEval/92", "solution": "from typing import *\n\ndef any_int(x, y, z):\n    if (x == y + z and x.is_integer()) or (y == x + z and y.is_integer()) or (z == x + y and z.is_integer()):\n        return True\n    else:\n        return False\n\n\n"}
{"task_id": "HumanEval/93", "solution": "from typing import *\n\ndef encode(message):\n    vowels = \"aeiouAEIOU\"\n    encoded_message = \"\"\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n\n\n"}
{"task_id": "HumanEval/94", "solution": "from typing import *\n\ndef skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    total = 0\n    while largest_prime > 0:\n        total += largest_prime % 10\n        largest_prime //= 10\n\n    return total\n\n\n"}
{"task_id": "HumanEval/95", "solution": "from typing import *\n\ndef check_dict_case(dict):\n    if not dict:\n        return False\n    lower = all(key.islower() for key in dict.keys())\n    upper = all(key.isupper() for key in dict.keys())\n    return lower or upper\n\n\n"}
{"task_id": "HumanEval/96", "solution": "from typing import *\n\ndef count_up_to(n):\n    primes = [True] * (n + 1)\n    primes[0], primes[1] = False, False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    result = [i for i in range(n) if primes[i]]\n    return result\n\n\n"}
{"task_id": "HumanEval/97", "solution": "from typing import *\n\ndef multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)\n\n\n"}
{"task_id": "HumanEval/98", "solution": "from typing import *\n\ndef count_upper(s):\n    count = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i % 2 == 0:\n            count += 1\n    return count\n\n\n"}
{"task_id": "HumanEval/99", "solution": "from typing import *\n\ndef closest_integer(value):\n    return round(float(value))\n\n\n"}
{"task_id": "HumanEval/100", "solution": "from typing import *\n\ndef make_a_pile(n):\n    stones = n\n    result = []\n    for i in range(n):\n        result.append(stones)\n        stones += 2 if n % 2 == 0 else 1\n    return result\n\n\n"}
{"task_id": "HumanEval/101", "solution": "from typing import *\n\ndef words_string(s):\n    words = s.replace(',', ' ').split()\n    return words\n\n\n"}
{"task_id": "HumanEval/102", "solution": "from typing import *\n\ndef choose_num(x, y):\n    largest_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > largest_even:\n            largest_even = num\n    return largest_even\n\n\n"}
{"task_id": "HumanEval/103", "solution": "from typing import *\n\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n    return bin(rounded_avg)\n\n\n"}
{"task_id": "HumanEval/104", "solution": "from typing import *\n\ndef unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)\n\n\n"}
{"task_id": "HumanEval/105", "solution": "from typing import *\n\ndef by_length(arr):\n    digit_names = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    arr = sorted(filter(lambda x: 1 <= x <= 9, arr), reverse=True)\n    return [digit_names[num] for num in arr]\n\n\n"}
{"task_id": "HumanEval/106", "solution": "from typing import *\n\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\n\n"}
{"task_id": "HumanEval/107", "solution": "from typing import *\n\ndef even_odd_palindrome(n):\n    def isPalindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even, odd = 0, 0\n    for i in range(1, n + 1):\n        if isPalindrome(i):\n            if i % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n    return (even, odd)\n\n\n"}
{"task_id": "HumanEval/108", "solution": "from typing import *\n\ndef count_nums(arr):\n    count = 0\n    for num in arr:\n        sum_digits = sum(int(digit) for digit in str(abs(num)))\n        if sum_digits > 0:\n            count += 1\n    return count\n\n\n"}
{"task_id": "HumanEval/109", "solution": "from typing import *\n\ndef move_one_ball(arr):\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted(arr):\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False\n\n\n"}
{"task_id": "HumanEval/110", "solution": "from typing import *\n\ndef exchange(lst1, lst2):\n    odd_count = sum(1 for num in lst1 if num % 2 != 0)\n    even_count = sum(1 for num in lst2 if num % 2 == 0)\n    if odd_count > even_count:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n\n"}
{"task_id": "HumanEval/111", "solution": "from typing import *\n\ndef histogram(test):\n    counts = {}\n    for char in test.split():\n        if char in counts:\n            counts[char] += 1\n        else:\n            counts[char] = 1\n    max_count = max(counts.values())\n    return {char: count for char, count in counts.items() if count == max_count}\n\n\n"}
{"task_id": "HumanEval/112", "solution": "from typing import *\n\ndef reverse_delete(s, c):\n    s = ''.join(ch for ch in s if ch not in c)\n    return s, s == s[::-1]\n\n\n"}
{"task_id": "HumanEval/113", "solution": "from typing import *\n\ndef odd_count(lst):\n    result = []\n    for string in lst:\n        count = 0\n        for char in string:\n            if char.isdigit() and int(char) % 2 != 0:\n                count += 1\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, count, count, count))\n    return result\n\n\n"}
{"task_id": "HumanEval/114", "solution": "from typing import *\n\ndef minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n\n\n"}
{"task_id": "HumanEval/115", "solution": "from typing import *\n\ndef max_fill(grid, capacity):\n    total_water = 0\n    for row in grid:\n        for well in row:\n            total_water += well\n    return math.ceil(total_water / capacity)\n\n\n"}
{"task_id": "HumanEval/116", "solution": "from typing import *\n\ndef sort_array(arr):\n    def count_ones(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n    \n    arr.sort(key=lambda x: (count_ones(x), x))\n    return arr\n\n\n"}
{"task_id": "HumanEval/117", "solution": "from typing import *\n\ndef select_words(s, n):\n    vowels = \"aeiouAEIOU\"\n    result = []\n    words = s.split()\n    for word in words:\n        consonants_count = sum(1 for char in word if char.isalpha() and char not in vowels)\n        if consonants_count == n:\n            result.append(word)\n    return result\n\n\n"}
{"task_id": "HumanEval/118", "solution": "from typing import *\n\ndef get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    for i in range(len(word) - 2, 0, -1):\n        if word[i] not in vowels and word[i - 1] in vowels and word[i + 1] not in vowels:\n            return word[i]\n    return \"\"\n\n\n"}
{"task_id": "HumanEval/119", "solution": "from typing import *\n\ndef match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                else:\n                    stack.pop()\n    return 'Yes' if not stack else 'No'\n\n\n"}
{"task_id": "HumanEval/120", "solution": "from typing import *\n\ndef maximum(arr, k):\n    arr.sort(reverse=True)\n    return arr[:k]\n\n\n"}
{"task_id": "HumanEval/121", "solution": "from typing import *\n\ndef solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if lst[i] % 2 == 1 and i % 2 == 0)\n\n\n"}
{"task_id": "HumanEval/122", "solution": "from typing import *\n\ndef add_elements(arr, k):\n    total = 0\n    for i in range(k):\n        if 0 < arr[i] < 100:\n            total += arr[i]\n    return total\n\n\n"}
{"task_id": "HumanEval/123", "solution": "from typing import *\n\ndef get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 != 0:\n            result.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    result.append(1)\n    return sorted(result)\n\n\n"}
{"task_id": "HumanEval/124", "solution": "from typing import *\n\ndef valid_date(date):\n    if date:\n        month, day, year = date.split('-')\n        if 1 <= int(month) <= 12:\n            if month in ['01', '03', '05', '07', '08', '10', '12']:\n                if 1 <= int(day) <= 31:\n                    return True\n            elif month in ['04', '06', '09', '11']:\n                if 1 <= int(day) <= 30:\n                    return True\n            elif month == '02':\n                if 1 <= int(day) <= 29:\n                    return True if int(year) % 4 == 0 else int(day) <= 28\n    return False\n\n\n"}
{"task_id": "HumanEval/125", "solution": "from typing import *\n\ndef split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n\n# Test cases\nprint(split_words(\"Hello world!\"))  # Output: [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # Output: [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))  # Output: 3\n\n\n"}
{"task_id": "HumanEval/126", "solution": "from typing import *\n\ndef is_sorted(lst):\n    counts = {}\n    for num in lst:\n        if num in counts:\n            return False\n        else:\n            counts[num] = 1\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n\n\n"}
{"task_id": "HumanEval/127", "solution": "from typing import *\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    max_start = max(interval1[0], interval2[0])\n    min_end = min(interval1[1], interval2[1])\n    if max_start > min_end:\n        return \"NO\"\n    length = min_end - max_start + 1\n    if is_prime(length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\n"}
{"task_id": "HumanEval/128", "solution": "from typing import *\n\ndef prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    magnitude_sum = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n            magnitude_sum += num\n        elif num < 0:\n            product *= -1\n            magnitude_sum += abs(num)\n        else:\n            product *= 0\n    return product * magnitude_sum\n\n\n"}
{"task_id": "HumanEval/129", "solution": "from typing import *\n\ndef minPath(grid, k):\n    m, n = len(grid), len(grid[0])\n    directions = [(1, 0), (0, 1), (-1, 0), (0, -1)]\n    visited = set()\n    path = []\n\n    def dfs(x, y, length):\n        if length == k:\n            return True\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < m and 0 <= ny < n and (nx, ny) not in visited:\n                visited.add((nx, ny))\n                path.append(grid[nx][ny])\n                if dfs(nx, ny, length + 1):\n                    return True\n                visited.remove((nx, ny))\n                path.pop()\n        return False\n\n    for i in range(m):\n        for j in range(n):\n            visited.add((i, j))\n            path.append(grid[i][j])\n            if dfs(i, j, 1):\n                return path\n\ngrid1 = [[1,2,3], [4,5,6], [7,8,9]]\nk1 = 3\nprint(minPath(grid1, k1))  # Output: [1, 2, 1]\n\ngrid2 = [[5,9,3], [4,1,6], [7,8,2]]\nk2 = 1\nprint(minPath(grid2, k2))  # Output: [1]\n\n\n"}
{"task_id": "HumanEval/130", "solution": "from typing import *\n\ndef tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 1]\n    else:\n        tribonacci = [0, 1, 1]\n        for i in range(3, n + 1):\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n        return tribonacci\n\n\n"}
{"task_id": "HumanEval/131", "solution": "from typing import *\n\ndef digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product != 1 else 0\n\n\n"}
{"task_id": "HumanEval/132", "solution": "from typing import *\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < len(string) and len(stack) > 0\n\n\n"}
{"task_id": "HumanEval/133", "solution": "from typing import *\n\nimport math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)\n\n\n"}
{"task_id": "HumanEval/134", "solution": "from typing import *\n\n  def check_if_last_char_is_a_letter(txt):\n      if len(txt) == 0 or not txt[-1].isalpha():\n          return False\n      if txt[-2] == \" \":\n          return True\n      return False\n  \n "}
{"task_id": "HumanEval/135", "solution": "from typing import *\n\ndef can_arrange(arr):\n    result = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            result = i - 1\n    return result\n\n\n"}
{"task_id": "HumanEval/136", "solution": "from typing import *\n\ndef largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n    return (largest_negative, smallest_positive)\n\n\n"}
{"task_id": "HumanEval/137", "solution": "from typing import *\n\ndef compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        return max(a, b)\n    elif isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        if float(a) > float(b):\n            return a\n        elif float(b) > float(a):\n            return b\n        else:\n            return None\n    else:\n        return None\n\n\n"}
{"task_id": "HumanEval/138", "solution": "from typing import *\n\ndef is_equal_to_sum_even(n):\n    return n % 4 == 0\n\n\n"}
{"task_id": "HumanEval/139", "solution": "from typing import *\n\ndef special_factorial(n):\n    result = 1\n    for i in range(n, 0, -1):\n        result *= math.factorial(i)\n    return result\n\n\n"}
{"task_id": "HumanEval/140", "solution": "from typing import *\n\ndef fix_spaces(text):\n    result = \"\"\n    consecutive_spaces = 0\n    for char in text:\n        if char == \" \":\n            consecutive_spaces += 1\n            if consecutive_spaces > 2:\n                result += \"-\"\n            else:\n                result += \"_\"\n        else:\n            result += char\n            consecutive_spaces = 0\n    return result\n\n\n"}
{"task_id": "HumanEval/141", "solution": "from typing import *\n\ndef file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    name, ext = file_name.split('.')\n    \n    if len(name) == 0 or not name[0].isalpha():\n        return 'No'\n    \n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    if sum(c.isdigit() for c in name) > 3:\n        return 'No'\n    \n    return 'Yes'\n\n\n"}
{"task_id": "HumanEval/142", "solution": "from typing import *\n\ndef sum_squares(lst):\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            result += lst[i]**2\n        elif i % 4 == 0:\n            result += lst[i]**3\n    return result\n\n\n"}
{"task_id": "HumanEval/143", "solution": "from typing import *\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n\n\n"}
{"task_id": "HumanEval/144", "solution": "from typing import *\n\ndef simplify(x, n):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    \n    def simplify_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        common = gcd(numerator, denominator)\n        return numerator // common, denominator // common\n    \n    x_num, x_denom = simplify_fraction(x)\n    n_num, n_denom = simplify_fraction(n)\n    product_num = x_num * n_num\n    product_denom = x_denom * n_denom\n    return product_num % product_denom == 0\n\n\n"}
{"task_id": "HumanEval/145", "solution": "from typing import *\n\ndef order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    nums.sort(key=lambda x: (sum_of_digits(x), nums.index(x)))\n    return nums\n\n\n"}
{"task_id": "HumanEval/146", "solution": "from typing import *\n\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count\n\n\n"}
{"task_id": "HumanEval/147", "solution": "from typing import *\n\ndef get_max_triples(n):\n    count = 0\n    a = [i * i - i + 1 for i in range(1, n+1)]\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n\n"}
{"task_id": "HumanEval/148", "solution": "from typing import *\n\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    start = planets.index(planet1)\n    end = planets.index(planet2)\n    if start > end:\n        start, end = end, start\n    return tuple(planets[start + 1:end])\n\n# Test cases\nprint(bf(\"Jupiter\", \"Neptune\"))  # Output: ('Saturn', 'Uranus')\nprint(bf(\"Earth\", \"Mercury\"))  # Output: ('Venus')\nprint(bf(\"Mercury\", \"Uranus\"))  # Output: ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n\n\n"}
{"task_id": "HumanEval/149", "solution": "from typing import *\n\ndef sorted_list_sum(lst):\n    return sorted(filter(lambda x: len(x) % 2 == 0, lst), key=lambda x: (len(x), x))\n\n\n"}
{"task_id": "HumanEval/150", "solution": "from typing import *\n\ndef x_or_y(n, x, y):\n    if n < 2:\n        return y\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return y\n    return x\n\n\n"}
{"task_id": "HumanEval/151", "solution": "from typing import *\n\ndef double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if num > 0 and num % 2 != 0 and isinstance(num, int):\n            result += num ** 2\n    return result * 2\n\n\n"}
{"task_id": "HumanEval/152", "solution": "from typing import *\n\ndef compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            result.append(0)\n        else:\n            result.append(abs(game[i] - guess[i]))\n    return result\n\n\n"}
{"task_id": "HumanEval/153", "solution": "from typing import *\n\ndef Strongest_Extension(class_name, extensions):\n    strongest_extension = extensions[0]\n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        strength = cap_count - sm_count\n        if strength > (sum(1 for c in strongest_extension if c.isupper()) - sum(1 for c in strongest_extension if c.islower())):\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\n\n\n"}
{"task_id": "HumanEval/154", "solution": "from typing import *\n\ndef cycpattern_check(a, b):\n    if len(a) != len(b):\n        return False\n    return b in a + a\n\n\n"}
{"task_id": "HumanEval/155", "solution": "from typing import *\n\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n\n"}
{"task_id": "HumanEval/156", "solution": "from typing import *\n\ndef int_to_mini_roman(number):\n    roman_map = {1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc', 50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'}\n    result = ''\n    for value, numeral in roman_map.items():\n        result += (number // value) * numeral\n        number %= value\n    return result\n\n\n"}
{"task_id": "HumanEval/157", "solution": "from typing import *\n\ndef right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2\n\n\n"}
{"task_id": "HumanEval/158", "solution": "from typing import *\n\ndef find_max(words):\n    max_unique = 0\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique or (unique_chars == max_unique and word < max_word):\n            max_unique = unique_chars\n            max_word = word\n    return max_word\n\n\n"}
{"task_id": "HumanEval/159", "solution": "from typing import *\n\ndef eat(number, need, remaining):\n    total_eaten = number + need\n    if total_eaten > remaining:\n        return [total_eaten, 0]\n    else:\n        return [total_eaten, remaining - need]\n\n\n"}
{"task_id": "HumanEval/160", "solution": "from typing import *\n\ndef do_algebra(operator, operand):\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n    return result\n\n\n"}
{"task_id": "HumanEval/161", "solution": "from typing import *\n\ndef solve(s):\n    letters = [c for c in s if c.isalpha()]\n    if not letters:\n        return s[::-1]\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in s)\n\n\n"}
{"task_id": "HumanEval/162", "solution": "from typing import *\n\nimport hashlib\n\ndef string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    else:\n        return None\n\n\n"}
{"task_id": "HumanEval/163", "solution": "from typing import *\n\ndef generate_integers(a, b):\n    result = []\n    for i in range(a, b+1):\n        if i % 2 == 0:\n            result.append(i)\n    return result\n\n\n"}
