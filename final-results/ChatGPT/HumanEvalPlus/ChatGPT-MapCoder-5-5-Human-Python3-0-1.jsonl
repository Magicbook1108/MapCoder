{"task_id": "HumanEval/79", "solution": "from typing import *\ndef decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return \"db\" + binary + \"db\""}
{"task_id": "HumanEval/86", "solution": "from typing import *\ndef anti_shuffle(s):\n    words = s.split()\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)"}
{"task_id": "HumanEval/116", "solution": "from typing import *\n\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x if x >= 0 else float('inf')))\n\n\n"}
{"task_id": "HumanEval/148", "solution": "from typing import *\n\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    if planet1 not in planets or planet2 not in planets or planet1 == planet2:\n        return ()\n    start = min(planets.index(planet1), planets.index(planet2))\n    end = max(planets.index(planet1), planets.index(planet2))\n    result = planets[start+1:end]\n    result.sort(key=lambda x: planets.index(x))\n    return tuple(result)\n\n\n"}
{"task_id": "HumanEval/160", "solution": "from typing import *\n\ndef do_algebra(operator, operand):\n    stack = [operand[0]]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            stack.append(operand[i+1])\n        elif operator[i] == '-':\n            stack.append(-operand[i+1])\n        elif operator[i] == '*':\n            stack[-1] *= operand[i+1]\n        elif operator[i] == '//':\n            stack[-1] //= operand[i+1]\n        elif operator[i] == '**':\n            stack[-1] **= operand[i+1]\n    return sum(stack)\n\n\n"}
{"task_id": "HumanEval/163", "solution": "from typing import *\n\ndef generate_integers(a, b):\n    even_digits = []\n    start = min(a, b)\n    end = max(a, b)\n    for num in range(start, end+1):\n        if num % 2 == 0 and num != 0:  # Check if the number is even and not equal to 0\n            even_digits.append(num)\n    return even_digits\n\n\n"}
{"task_id": "HumanEval/159", "solution": "from typing import *\n\ndef eat(number, need, remaining):\n    total_eaten = number + need\n    carrots_left = max(0, remaining - total_eaten)\n    return [total_eaten, carrots_left]\n\n\n"}
{"task_id": "HumanEval/154", "solution": "from typing import *\n\ndef cycpattern_check(a, b):\n    def is_rotation(s1, s2):\n        return len(s1) == len(s2) and s2 in s1 + s1\n    \n    rotations = [b]\n    for i in range(1, len(b)):\n        rotations.append(rotations[-1][1:] + rotations[-1][0])\n    \n    for rotation in rotations:\n        if rotation in a:\n            return True\n    return False\n\n\n"}
{"task_id": "HumanEval/145", "solution": "from typing import *\n\ndef order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    def merge_sort(arr):\n        if len(arr) > 1:\n            mid = len(arr) // 2\n            left_half = arr[:mid]\n            right_half = arr[mid:]\n\n            merge_sort(left_half)\n            merge_sort(right_half)\n\n            i = j = k = 0\n\n            while i < len(left_half) and j < len(right_half):\n                if sum_of_digits(left_half[i]) < sum_of_digits(right_half[j]):\n                    arr[k] = left_half[i]\n                    i += 1\n                elif sum_of_digits(left_half[i]) == sum_of_digits(right_half[j]):\n                    if left_half[i] < right_half[j]:  # Compare based on index if sum of digits is equal\n                        arr[k] = left_half[i]\n                        i += 1\n                    else:\n                        arr[k] = right_half[j]\n                        j += 1\n                else:\n                    arr[k] = right_half[j]\n                    j += 1\n                k += 1\n\n            while i < len(left_half):\n                arr[k] = left_half[i]\n                i += 1\n                k += 1\n\n            while j < len(right_half):\n                arr[k] = right_half[j]\n                j += 1\n                k += 1\n\n    merge_sort(nums)\n    return nums\n\n\n"}
{"task_id": "HumanEval/140", "solution": "from typing import *\n\ndef fix_spaces(text):\n    text = text.replace(\" \", \"_\")\n    i = 0\n    while i < len(text) - 2:\n        if text[i] == \"_\" and text[i+1] == \"_\" and text[i+2] == \"_\":\n            text = text[:i] + \"-\" + text[i+3:]\n        else:\n            i += 1\n    return text\n\n\n"}
{"task_id": "HumanEval/137", "solution": "from typing import *\n\ndef compare_one(a, b):\n    if type(a) in [int, float] and type(b) in [int, float]:\n        return max(a, b)\n    elif type(a) == str and type(b) == str:\n        a = float(a.replace(',', '.'))\n        b = float(b.replace(',', '.'))\n        return str(max(a, b)).replace('.', ',')\n    elif type(a) == str:\n        a = float(a.replace(',', '.'))\n        if type(b) in [int, float]:\n            return str(max(a, b)).replace('.', ',')\n        else:\n            return b\n    elif type(b) == str:\n        b = float(b.replace(',', '.'))\n        if type(a) in [int, float]:\n            return str(max(a, b)).replace('.', ',')\n        else:\n            return a\n    else:\n        return None\n\n\n"}
{"task_id": "HumanEval/134", "solution": "from typing import *\n\ndef check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    return txt[-1].isalpha() and (len(txt.split()[-1]) == 1 or txt.split()[-1][-1] != txt[-1])\n\n\n"}
{"task_id": "HumanEval/132", "solution": "from typing import *\n\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack[-1] != '[':\n                return False\n            stack.pop()\n    return len(stack) != 0  # Modified to return True if the stack is not empty, indicating nested brackets\n\n\n"}
{"task_id": "HumanEval/131", "solution": "from typing import *\n\ndef digits(n):\n    n_str = str(n)\n    product = 1\n    has_odd = False\n    for digit in n_str:\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n            has_odd = True\n    return product if has_odd else 0\n\n\n"}
{"task_id": "HumanEval/130", "solution": "from typing import *\n\ndef tri(n):\n    tribonacci = [0] * (n + 1)\n    tribonacci[0] = 0\n    if n > 0:\n        tribonacci[1] = 1\n    if n > 1:\n        tribonacci[2] = 1\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            tribonacci[i] = 1 + i // 2\n        else:\n            tribonacci[i] = tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3]\n    return tribonacci[:n + 1]\n\n\n"}
{"task_id": "HumanEval/129", "solution": "from typing import *\ndef minPath(grid, k):\n    n = len(grid)\n    dp = [[None] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            dp[i][j] = [grid[i][j]]\n    for _ in range(1, k):\n        new_dp = [[None] * n for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                neighbors = []\n                if i > 0:\n                    neighbors.append(dp[i-1][j] + [grid[i][j]])\n                if i < n-1:\n                    neighbors.append(dp[i+1][j] + [grid[i][j]])\n                if j > 0:\n                    neighbors.append(dp[i][j-1] + [grid[i][j]])\n                if j < n-1:\n                    neighbors.append(dp[i][j+1] + [grid[i][j]])\n                new_dp[i][j] = min(neighbors)\n        dp = new_dp\n    return min(min(row) for row in dp)"}
{"task_id": "HumanEval/127", "solution": "from typing import *\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    \n    if start > end:\n        return \"NO\"\n    \n    length = end - start\n    if length < 2:\n        return \"NO\"\n    \n    count = 0\n    for i in range(2, length):\n        if length % i == 0:\n            count += 1\n    if count == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\n"}
{"task_id": "HumanEval/126", "solution": "from typing import *\n\ndef is_sorted(lst):\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n    for i in range(len(lst)):\n        if lst[i] in lst[i+1:]:\n            return False\n    return True\n\n\n"}
{"task_id": "HumanEval/125", "solution": "from typing import *\ndef split_words(txt):\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and ord(char) % 2 != 0:\n                count += 1\n        return count"}
{"task_id": "HumanEval/124", "solution": "from typing import *\n\ndef valid_date(date):\n    if date == \"\":\n        return False\n    if '-' not in date:\n        return False\n    month, day, year = date.split('-')\n    if not (1 <= int(month) <= 12):\n        return False\n    if int(month) in [1, 3, 5, 7, 8, 10, 12]:\n        if not (1 <= int(day) <= 31):\n            return False\n    elif int(month) in [4, 6, 9, 11]:\n        if not (1 <= int(day) <= 30):\n            return False\n    elif int(month) == 2:\n        if int(year) % 4 == 0:\n            if not (1 <= int(day) <= 29):\n                return False\n        else:\n            if not (1 <= int(day) <= 28):\n                return False\n    return True\n\n\n"}
{"task_id": "HumanEval/120", "solution": "from typing import *\ndef maximum(arr, k):\n    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/119", "solution": "from typing import *\n\ndef match_parens(lst):\n    stack = []\n    for s in lst:\n        for char in s:\n            if char == '(':\n                stack.append(char)\n            else:\n                if not stack:\n                    return 'No'\n                stack.pop()\n    if not stack:\n        return 'Yes'\n    else:\n        open_count = stack.count('(')\n        close_count = len(lst[1]) - open_count\n        if open_count <= close_count:\n            return 'Yes'\n        else:\n            return 'No'\n\n\n"}
{"task_id": "HumanEval/113", "solution": "from typing import *\ndef odd_count(lst):\n    result = []\n    for s in lst:\n        count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(count, count, count, count))\n    return result"}
{"task_id": "HumanEval/110", "solution": "from typing import *\n\ndef exchange(lst1, lst2):\n    count = sum(1 for num in lst1 if num % 2 != 0)\n    if count > 0:\n        return \"NO\"\n    else:\n        even_count = sum(1 for num in lst2 if num % 2 == 0)\n        if even_count >= len(lst1):\n            return \"YES\"\n        else:\n            return \"NO\"\n\n\n"}
{"task_id": "HumanEval/109", "solution": "from typing import *\ndef move_one_ball(arr):\n    if not arr:\n        return True\n    min_index = arr.index(min(arr))\n    return arr == sorted(arr) or arr[min_index:] + arr[:min_index] == sorted(arr)"}
{"task_id": "HumanEval/108", "solution": "from typing import *\n\ndef count_nums(arr):\n    count = 0\n    for num in arr:\n        digits_sum = sum(int(d) for d in str(abs(num)))\n        if num < 0:\n            digits_sum *= -1\n        if digits_sum > 0:\n            count += 1\n    return count\n\n\n"}
{"task_id": "HumanEval/100", "solution": "from typing import *\ndef make_a_pile(n):\n    stones = [n]\n    for i in range(n-1):\n        if stones[-1] % 2 == 0:\n            stones.append(stones[-1] + 1)\n        else:\n            stones.append(stones[-1] + 2)\n    return stones"}
{"task_id": "HumanEval/98", "solution": "from typing import *\ndef count_upper(s):\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in 'AEIOU':\n            count += 1\n    return count"}
{"task_id": "HumanEval/95", "solution": "from typing import *\n\ndef check_dict_case(dict):\n    if len(dict) == 0:\n        return False\n    lower_case = all(str(key).islower() for key in dict.keys())\n    upper_case = all(str(key).isupper() for key in dict.keys())\n    return lower_case or upper_case\n\n\n"}
{"task_id": "HumanEval/94", "solution": "from typing import *\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef skjkasdkd(lst):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    max_prime = 0\n    for num in lst:\n        if is_prime(num) and num > max_prime:\n            max_prime = num\n\n    return sum_of_digits(max_prime)\n\n\n"}
{"task_id": "HumanEval/93", "solution": "from typing import *\n\ndef encode(message):\n    result = \"\"\n    vowels = \"aeiouAEIOU\"\n    vowel_mapping = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                result += vowel_mapping[char.lower()].upper() if char.isupper() else vowel_mapping[char.lower()]\n            else:\n                result += char.swapcase()\n        else:\n            result += char\n    return result\n\n\n"}
{"task_id": "HumanEval/91", "solution": "from typing import *\n\ndef is_bored(S):\n    count = 0\n    sentence = \"\"\n    for char in S:\n        if char in ['.', '?', '!']:\n            if sentence.strip().startswith(\"I \"):  # Modified to handle leading/trailing spaces\n                count += 1\n            sentence = \"\"\n        else:\n            sentence += char\n    if sentence.strip().startswith(\"I \"):  # Check for the last sentence\n        count += 1\n    return count\n\n\n"}
{"task_id": "HumanEval/89", "solution": "from typing import *\n\ndef encrypt(s):\n    original_alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    rotated_alphabet = 'cdefghijklmnopqrstuvwxyzab'\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            index = (original_alphabet.index(char) + 2) % 26\n            encrypted_string += rotated_alphabet[index]\n        else:\n            encrypted_string += char\n    return encrypted_string\n\n\n"}
{"task_id": "HumanEval/84", "solution": "from typing import *\n\ndef solve(N):\n    binary = bin(N)[2:]\n    return bin(sum(int(digit) for digit in binary))[2:]\n]"}
{"task_id": "HumanEval/83", "solution": "from typing import *\ndef starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count"}
{"task_id": "HumanEval/81", "solution": "from typing import *\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades"}
{"task_id": "HumanEval/77", "solution": "from typing import *\n\ndef iscube(a):\n    if a == 0:\n        return True\n    for i in range(1, abs(a) + 1):\n        if i ** 3 == abs(a):\n            return True\n    return False\n\n\n"}
{"task_id": "HumanEval/75", "solution": "from typing import *\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i+1, len(primes)):\n            for k in range(j+1, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n\n"}
{"task_id": "HumanEval/65", "solution": "from typing import *\ndef circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    actual_shift = shift % length\n    result = x_str[length-actual_shift:] + x_str[:length-actual_shift]\n    return result"}
{"task_id": "HumanEval/49", "solution": "from typing import *\ndef modp(n: int, p: int) -> int:\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        n = n // 2\n        base = (base * base) % p\n    return result"}
{"task_id": "HumanEval/41", "solution": "from typing import *\ndef car_race_collision(n: int):\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i < j:\n                count += 1\n    return count * 2"}
{"task_id": "HumanEval/39", "solution": "from typing import *\ndef prime_fib(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def generate_primes(limit):\n        sieve = [True] * (limit + 1)\n        sieve[0], sieve[1] = False, False\n        for i in range(2, int(limit ** 0.5) + 1):\n            if sieve[i]:\n                for j in range(i * i, limit + 1, i):\n                    sieve[j] = False\n        return [i for i in range(limit + 1) if sieve[i]]\n\n    def generate_fibonacci(n):\n        fib = [0, 1]\n        for i in range(2, n + 1):\n            fib.append(fib[i - 1] + fib[i - 2])\n        return fib\n\n    primes = generate_primes(10000)\n    fib_numbers = generate_fibonacci(10000)\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fib_numbers[i]) and fib_numbers[i] > 1:\n            count += 1\n        i += 1\n    return fib_numbers[i - 1]"}
{"task_id": "HumanEval/37", "solution": "from typing import *\ndef sort_even(l: list):\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    result = l.copy()\n    for i, val in zip(even_indices, even_values):\n        result[i] = val\n    return result"}
{"task_id": "HumanEval/36", "solution": "from typing import *\n\ndef fizz_buzz(n: int):\n    count = 0\n    for i in range(11, n, 11):\n        count += str(i).count('7')\n    for i in range(13, n, 13):\n        count += str(i).count('7')\n    return count\n\n\n"}
{"task_id": "HumanEval/32", "solution": "from typing import *\n\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: list):\n    if len(xs) == 2:\n        return -xs[0] / xs[-1]\n    else:\n        # Use Newton's method to find the zero point\n        x0 = 1.0  # Initial guess\n        while True:\n            x1 = x0 - poly(xs, x0) / poly([xs[i] * i for i in range(1, len(xs))], x0)\n            if abs(x1 - x0) < 0.0001:  # Check for convergence\n                return x1\n            x0 = x1\n\nassert round(find_zero([1, 2]), 2) == -0.5\nassert round(find_zero([-6, 11, -6, 1]), 2) == 1.0\n\n\n"}
{"task_id": "HumanEval/26", "solution": "from typing import *\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for num in numbers:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result\nt"}
{"task_id": "HumanEval/1", "solution": "from typing import *\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    stack = []\n    current = \"\"\n    for char in paren_string:\n        if char == \"(\":\n            stack.append(char)\n            current += char\n        elif char == \")\":\n            stack.pop()\n            current += char\n            if not stack:\n                result.append(current)\n                current = \"\"\n    return result"}
{"task_id": "HumanEval/162", "solution": "from typing import *\nimport hashlib\n\ndef string_to_md5(text):\n    if text:\n        return hashlib.md5(text.encode()).hexdigest()\n    else:\n        return None"}
{"task_id": "HumanEval/161", "solution": "from typing import *\ndef solve(s):\n    result = \"\"\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        result = result[::-1]\n    return result"}
{"task_id": "HumanEval/158", "solution": "from typing import *\ndef find_max(words):\n    def count_unique_chars(word):\n        char_count = {}\n        for char in word:\n            char_count[char] = char_count.get(char, 0) + 1\n        return len(char_count)\n\n    words.sort(key=lambda x: (-count_unique_chars(x), x))\n    return words[0]"}
{"task_id": "HumanEval/157", "solution": "from typing import *\ndef right_angle_triangle(a, b, c):\n    return a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2"}
{"task_id": "HumanEval/156", "solution": "from typing import *\ndef int_to_mini_roman(number):\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n        100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n        10: 'x', 9: 'ix', 5: 'v', 4: 'iv',\n        1: 'i'\n    }\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n    return result.lower()"}
{"task_id": "HumanEval/155", "solution": "from typing import *\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    num_str = str(abs(num))\n    for digit in num_str:\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/153", "solution": "from typing import *\ndef Strongest_Extension(class_name, extensions):\n    strongest_extension = extensions[0]\n    max_strength = sum(c.isupper() for c in strongest_extension) - sum(c.islower() for c in strongest_extension)\n    \n    for extension in extensions[1:]:\n        strength = sum(c.isupper() for c in extension) - sum(c.islower() for c in extension)\n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = extension\n    \n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/152", "solution": "from typing import *\n\ndef compare(game,guess):\n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n\n\n"}
{"task_id": "HumanEval/151", "solution": "from typing import *\ndef double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if num > 0 and num % 2 != 0 and isinstance(num, int):\n            result += num ** 2\n    return result"}
{"task_id": "HumanEval/150", "solution": "from typing import *\ndef x_or_y(n, x, y):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    \n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/149", "solution": "from typing import *\ndef sorted_list_sum(lst):\n    return sorted([word for word in lst if len(word) % 2 == 0])"}
{"task_id": "HumanEval/147", "solution": "from typing import *\n\ndef get_max_triples(n):\n    count = 0\n    remainder_count = [0, 0, 0]\n    prefix_sum = 0\n    for i in range(1, n+1):\n        a_i = i * i - i + 1\n        prefix_sum += a_i\n        remainder = prefix_sum % 3\n        remainder_count[remainder] += 1\n    count += (remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2)) // 6\n    count += (remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2)) // 6\n    count += (remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2)) // 6\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]\n    return count\n\n\n"}
{"task_id": "HumanEval/146", "solution": "from typing import *\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and int(str(num)[0]) % 2 != 0 and int(str(num)[-1]) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/144", "solution": "from typing import *\ndef simplify(x, n):\n    x_num, x_denom = map(int, x.split('/'))\n    n_num, n_denom = map(int, n.split('/'))\n    \n    result_num = x_num * n_num\n    result_denom = x_denom * n_denom\n    \n    return result_num % result_denom == 0"}
{"task_id": "HumanEval/143", "solution": "from typing import *\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    def is_prime_length(word):\n        return is_prime(len(word))\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime_length(word)]\n    return ' '.join(prime_length_words)"}
{"task_id": "HumanEval/142", "solution": "from typing import *\ndef sum_squares(lst):\n    return sum(x**2 if i % 3 == 0 else x**3 if i % 4 == 0 else x for i, x in enumerate(lst))"}
{"task_id": "HumanEval/141", "solution": "from typing import *\n\nimport re\n\ndef file_name_check(file_name):\n    pattern = r'^[a-zA-Z][a-zA-Z0-9]*\\.[txt|exe|dll]$'\n    if re.match(pattern, file_name) and file_name.count('.') == 1 and file_name.count('txt') + file_name.count('exe') + file_name.count('dll') == 1 and len(re.findall(r'\\d', file_name)) <= 3:\n        return 'Yes'\n    else:\n        return 'No'\n\n\n"}
{"task_id": "HumanEval/139", "solution": "from typing import *\ndef special_factorial(n):\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= factorial(i)\n    \n    return result"}
{"task_id": "HumanEval/138", "solution": "from typing import *\n\ndef is_equal_to_sum_even(n):\n    for i in range(2, n//4 + 1, 2):\n        for j in range(i, n//4 + 1, 2):\n            for k in range(j, n//4 + 1, 2):\n                l = n - i - j - k\n                if l % 2 == 0 and l >= k:\n                    return True\n    return False\n\n\n"}
{"task_id": "HumanEval/136", "solution": "from typing import *\ndef largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n    for num in lst:\n        if num < 0 and (largest_negative is None or num > largest_negative):\n            largest_negative = num\n        elif num > 0 and (smallest_positive is None or num < smallest_positive):\n            smallest_positive = num\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/135", "solution": "from typing import *\n\ndef can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] < arr[j]:\n                largest_index = max(largest_index, i)\n    return largest_index\n\n\n"}
{"task_id": "HumanEval/133", "solution": "from typing import *\n\nimport math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += (math.ceil(num) ** 2)\n    return total\n\n\n"}
{"task_id": "HumanEval/128", "solution": "from typing import *\ndef prod_signs(arr):\n    if not arr:\n        return None\n    product = 1\n    total = 0\n    for num in arr:\n        if num > 0:\n            product *= 1\n            total += abs(num)\n        elif num < 0:\n            product *= -1\n            total += abs(num)\n        else:\n            product *= 0\n    return total * product"}
{"task_id": "HumanEval/123", "solution": "from typing import *\ndef get_odd_collatz(n):\n    result = []\n    while n != 1:\n        if n % 2 != 0:\n            result.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    result.append(1)\n    return sorted(result)"}
{"task_id": "HumanEval/122", "solution": "from typing import *\ndef add_elements(arr, k):\n    return sum(x for x in arr[:k] if len(str(x)) <= 2)"}
{"task_id": "HumanEval/121", "solution": "from typing import *\ndef solution(lst):\n    return sum(lst[i] for i in range(len(lst)) if i % 2 == 0 and lst[i] % 2 != 0)"}
{"task_id": "HumanEval/118", "solution": "from typing import *\n\ndef get_closest_vowel(word):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n    \n    closest_vowel = ''\n    min_distance = float('inf')\n    \n    for i in range(len(word)-1, 0, -1):\n        if word[i] in vowels:\n            for j in range(i-1, -1, -1):  # Modified the range to include the first character\n                if word[j] in consonants:\n                    distance = i - j\n                    if distance < min_distance:\n                        min_distance = distance\n                        closest_vowel = word[i]\n                        break  # Added break to stop iterating through consonants once the closest one is found\n                    else:\n                        break  # Added break to stop iterating through consonants if no consonant is found\n            if closest_vowel:\n                break\n    return closest_vowel\n\n\n"}
{"task_id": "HumanEval/117", "solution": "from typing import *\ndef select_words(s, n):\n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        count = 0\n        for char in word:\n            if char in consonants:\n                count += 1\n        return count\n\n    words = s.split()\n    result = []\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/115", "solution": "from typing import *\ndef max_fill(grid, capacity):\n    count = 0\n    for row in grid:\n        bucket = 0\n        for well in row:\n            if well > 0:\n                if bucket > 0:\n                    bucket -= 1\n                else:\n                    count += 1\n                    bucket = capacity - 1\n    return count"}
{"task_id": "HumanEval/114", "solution": "from typing import *\ndef minSubArraySum(nums):\n    min_sum = float('inf')\n    current_sum = 0\n    for num in nums:\n        current_sum = min(num, num + current_sum)\n        min_sum = min(min_sum, current_sum)\n    return min_sum"}
{"task_id": "HumanEval/112", "solution": "from typing import *\ndef reverse_delete(s, c):\n    result = \"\"\n    for char in s:\n        if char not in c:\n            result += char\n    return (result, result == result[::-1])"}
{"task_id": "HumanEval/111", "solution": "from typing import *\n\ndef histogram(test):\n    if test == '':\n        return {}\n    letters = test.split()\n    frequency = {}\n    for letter in letters:\n        if letter in frequency:\n            frequency[letter] += 1\n        else:\n            frequency[letter] = 1\n    max_frequency = max(frequency.values())\n    result = {key: value for key, value in frequency.items() if value == max_frequency}\n    return result\n\n\n"}
{"task_id": "HumanEval/107", "solution": "from typing import *\ndef even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/106", "solution": "from typing import *\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/105", "solution": "from typing import *\ndef by_length(arr):\n    filtered_arr = [x for x in arr if 1 <= x <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    names_arr = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n    result = [names_arr[x-1] for x in reversed_arr]\n    return result"}
{"task_id": "HumanEval/104", "solution": "from typing import *\ndef unique_digits(x):\n    result = []\n    for num in x:\n        if all(int(digit) % 2 != 0 for digit in str(num)):\n            result.append(num)\n    return sorted(result)"}
{"task_id": "HumanEval/103", "solution": "from typing import *\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    total = 0\n    count = 0\n    for i in range(n, m+1):\n        total += i\n        count += 1\n    avg = round(total / count)\n    return bin(avg)"}
{"task_id": "HumanEval/102", "solution": "from typing import *\ndef choose_num(x, y):\n    max_even = -1\n    for i in range(x, y+1):\n        if i % 2 == 0:\n            max_even = max(max_even, i)\n    return max_even"}
{"task_id": "HumanEval/101", "solution": "from typing import *\ndef words_string(s):\n    return [word.strip() for word in s.replace(\",\", \" \").split()]"}
{"task_id": "HumanEval/99", "solution": "from typing import *\ndef closest_integer(value):\n    value = float(value)\n    if int(value + 0.5) - value == value - int(value - 0.5):\n        return int(value + 0.5) if value > 0 else int(value - 0.5)\n    return round(value)"}
{"task_id": "HumanEval/97", "solution": "from typing import *\ndef multiply(a, b):\n    return (abs(a) % 10) * (abs(b) % 10)"}
{"task_id": "HumanEval/96", "solution": "from typing import *\ndef count_up_to(n):\n    if n < 2:\n        return []\n    primes = [True] * n\n    primes[0], primes[1] = False, False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return [i for i in range(n) if primes[i]]"}
{"task_id": "HumanEval/92", "solution": "from typing import *\n\ndef any_int(x, y, z):\n    nums = [x, y, z]\n    for i in range(3):\n        for j in range(3):\n            if i != j:\n                if isinstance(nums[i], int) and isinstance(nums[j], int) and isinstance(nums[3 - i - j], int):\n                    if nums[i] == nums[j] + nums[3 - i - j]:\n                        return True\n    return False\n\n\n"}
{"task_id": "HumanEval/90", "solution": "from typing import *\n\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    else:\n        unique_lst = list(set(lst))  # Remove duplicates\n        unique_lst.sort()  # Sort the list\n        if len(unique_lst) < 2:\n            return None\n        else:\n            return unique_lst[1]  # Return the 2nd smallest element\n\n\n"}
{"task_id": "HumanEval/88", "solution": "from typing import *\n\ndef sort_array(array):\n    if len(array) == 0:\n        return array\n    if (array[0] + array[-1]) % 2 == 0:\n        return sorted(array, reverse=True)\n    else:\n        return sorted(array)\n\n\n"}
{"task_id": "HumanEval/87", "solution": "from typing import *\n\ndef get_row(lst, x):\n    coordinates = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if lst[i][j] == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda x: (x[0], -x[1]))  # Sort by rows in ascending order and by columns in descending order\n    return coordinates\n\n\n"}
{"task_id": "HumanEval/85", "solution": "from typing import *\ndef add(lst):\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total"}
{"task_id": "HumanEval/82", "solution": "from typing import *\nimport math\n\ndef prime_length(string):\n    if len(string) < 2:\n        return False\n    for i in range(2, int(math.sqrt(len(string)))+1):\n        if len(string) % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/80", "solution": "from typing import *\ndef is_happy(s):\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return len(s) >= 3"}
{"task_id": "HumanEval/78", "solution": "from typing import *\n\ndef hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count\n\n\n"}
{"task_id": "HumanEval/76", "solution": "from typing import *\n\ndef is_simple_power(x, n):\n    if n == 1:\n        return x == 1\n    while x > 1:\n        if x % n != 0:\n            return False\n        x /= n\n    return x == 1\n\n\n"}
{"task_id": "HumanEval/74", "solution": "from typing import *\ndef total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n    \n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    else:\n        return lst2 if total_chars_lst1 != total_chars_lst2 else lst1"}
{"task_id": "HumanEval/73", "solution": "from typing import *\ndef smallest_change(arr):\n    left = 0\n    right = len(arr) - 1\n    count = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            count += 1\n        left += 1\n        right -= 1\n    return count"}
{"task_id": "HumanEval/72", "solution": "from typing import *\ndef will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w"}
{"task_id": "HumanEval/71", "solution": "from typing import *\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/70", "solution": "from typing import *\ndef strange_sort_list(lst):\n    lst.sort()\n    result = []\n    while lst:\n        result.append(lst.pop(0))\n        if lst:\n            result.append(lst.pop())\n    return result"}
{"task_id": "HumanEval/69", "solution": "from typing import *\n\nfrom collections import Counter\n\ndef search(lst):\n    freq = Counter(lst)\n    max_int = -1\n    for key, value in freq.items():\n        if key > 0 and value >= key:  # Modified condition to check if frequency is greater than or equal to the value\n            max_int = max(max_int, key)\n    return max_int\n\n\n"}
{"task_id": "HumanEval/68", "solution": "from typing import *\ndef pluck(arr):\n    smallest_even = float('inf')\n    smallest_even_index = -1\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_even:\n            smallest_even = arr[i]\n            smallest_even_index = i\n    if smallest_even_index == -1:\n        return []\n    return [smallest_even, smallest_even_index]"}
{"task_id": "HumanEval/67", "solution": "from typing import *\ndef fruit_distribution(s, n):\n    fruits = s.split()\n    apples = int(fruits[0])\n    oranges = int(fruits[3])\n    return n - apples - oranges"}
{"task_id": "HumanEval/66", "solution": "from typing import *\ndef digitSum(s):\n    total_sum = 0\n    for char in s:\n        if char.isupper():\n            total_sum += ord(char)\n    return total_sum"}
{"task_id": "HumanEval/64", "solution": "from typing import *\ndef vowels_count(s):\n    count = 0\n    vowels = \"aeiou\"\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            count += 1\n        elif i == len(s) - 1 and s[i].lower() == 'y':\n            count += 1\n    return count"}
{"task_id": "HumanEval/63", "solution": "from typing import *\ndef fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        dp = [0] * (n+1)\n        dp[1] = 0\n        dp[2] = 1\n        dp[3] = 1\n        for i in range(4, n+1):\n            dp[i] = dp[i-1] + dp[i-2] + dp[i-3]\n        return dp[n]"}
{"task_id": "HumanEval/62", "solution": "from typing import *\ndef derivative(xs):\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result"}
{"task_id": "HumanEval/61", "solution": "from typing import *\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        else:\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/60", "solution": "from typing import *\ndef sum_to_n(n: int):\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/59", "solution": "from typing import *\ndef largest_prime_factor(n: int):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(int(n ** 0.5), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i"}
{"task_id": "HumanEval/58", "solution": "from typing import *\ndef common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/57", "solution": "from typing import *\ndef monotonic(l: list):\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        if l[i] > l[i-1]:\n            decreasing = False\n    return increasing or decreasing"}
{"task_id": "HumanEval/56", "solution": "from typing import *\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/55", "solution": "from typing import *\ndef fib(n: int, memo={}) -> int:\n    if n in memo:\n        return memo[n]\n    if n <= 2:\n        return 1\n    memo[n] = fib(n-1, memo) + fib(n-2, memo)\n    return memo[n]"}
{"task_id": "HumanEval/54", "solution": "from typing import *\ndef same_chars(s0: str, s1: str):\n    for char in s0:\n        if char not in s1:\n            return False\n    for char in s1:\n        if char not in s0:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "solution": "from typing import *\ndef add(x: int, y: int):\n    return x + y"}
{"task_id": "HumanEval/52", "solution": "from typing import *\ndef below_threshold(l: list, t: int):\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/51", "solution": "from typing import *\ndef remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/50", "solution": "from typing import *\ndef encode_shift(s: str):\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\ndef decode_shift(s: str):\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])"}
{"task_id": "HumanEval/48", "solution": "from typing import *\ndef is_palindrome(text: str):\n    left = 0\n    right = len(text) - 1\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n    return True"}
{"task_id": "HumanEval/47", "solution": "from typing import *\n\ndef median(l: list):\n    if not l:\n        return 0\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n\n\n"}
{"task_id": "HumanEval/46", "solution": "from typing import *\ndef fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    dp = [0] * (n+1)\n    dp[2] = 2\n    for i in range(4, n+1):\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n    \n    return dp[n]"}
{"task_id": "HumanEval/45", "solution": "from typing import *\ndef triangle_area(a, h):\n    return (1/2) * a * h"}
{"task_id": "HumanEval/44", "solution": "from typing import *\ndef change_base(x: int, base: int):\n    res = \"\"\n    while x > 0:\n        res = str(x % base) + res\n        x //= base\n    return res"}
{"task_id": "HumanEval/43", "solution": "from typing import *\ndef pairs_sum_to_zero(l):\n    s = set()\n    for num in l:\n        if -num in s:\n            return True\n        s.add(num)\n    return False"}
{"task_id": "HumanEval/42", "solution": "from typing import *\ndef incr_list(l: list):\n    result = []\n    for num in l:\n        result.append(num + 1)\n    return result"}
{"task_id": "HumanEval/40", "solution": "from typing import *\ndef triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False"}
{"task_id": "HumanEval/38", "solution": "from typing import *\ndef encode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/35", "solution": "from typing import *\ndef max_element(l: list):\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n    return max_val"}
{"task_id": "HumanEval/34", "solution": "from typing import *\ndef unique(l: list):\n    return sorted(list(set(l)))"}
{"task_id": "HumanEval/33", "solution": "from typing import *\n\ndef sort_third(l: list):\n    for i in range(2, len(l), 3):\n        l[i-2:i+1] = sorted(l[i-2:i+1])\n    return l\n\n\n"}
{"task_id": "HumanEval/31", "solution": "from typing import *\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/30", "solution": "from typing import *\ndef get_positive(l: list):\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/29", "solution": "from typing import *\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/28", "solution": "from typing import *\ndef concatenate(strings: List[str]) -> str:\n    result = ''\n    for s in strings:\n        result += s\n    return result"}
{"task_id": "HumanEval/27", "solution": "from typing import *\ndef flip_case(string: str) -> str:\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/25", "solution": "from typing import *\ndef factorize(n: int) -> List[int]:\n    def sieve(n):\n        primes = []\n        is_prime = [True] * (n + 1)\n        is_prime[0], is_prime[1] = False, False\n        for p in range(2, n + 1):\n            if is_prime[p]:\n                primes.append(p)\n                for i in range(p * p, n + 1, p):\n                    is_prime[i] = False\n        return primes\n\n    primes = sieve(n)\n    factors = []\n    for p in primes:\n        while n % p == 0:\n            factors.append(p)\n            n //= p\n    return factors"}
{"task_id": "HumanEval/24", "solution": "from typing import *\ndef largest_divisor(n: int) -> int:\n    for i in range(n-1, 1, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/23", "solution": "from typing import *\ndef strlen(string: str) -> int:\n    count = 0\n    for char in string:\n        count += 1\n    return count"}
{"task_id": "HumanEval/22", "solution": "from typing import *\ndef filter_integers(values: List[Any]) -> List[int]:\n    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result"}
{"task_id": "HumanEval/21", "solution": "from typing import *\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    rescaled = [(x - min_num) / (max_num - min_num) for x in numbers]\n    return rescaled"}
{"task_id": "HumanEval/20", "solution": "from typing import *\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[0] - numbers[1])\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < min_diff:\n                min_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n    return closest_pair"}
{"task_id": "HumanEval/19", "solution": "from typing import *\ndef sort_numbers(numbers: str) -> str:\n    num_dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    nums = [num_dict[word] for word in words]\n    sorted_nums = sorted(nums)\n    sorted_words = [key for value, key in sorted([(value, key) for key, value in num_dict.items()])]\n    return ' '.join(sorted_words[num] for num in sorted_nums)"}
{"task_id": "HumanEval/18", "solution": "from typing import *\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count"}
{"task_id": "HumanEval/17", "solution": "from typing import *\ndef parse_music(music_string: str) -> List[int]:\n    beats = []\n    for note in music_string.split():\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"}
{"task_id": "HumanEval/16", "solution": "from typing import *\ndef count_distinct_characters(string: str) -> int:\n    char_count = {}\n    for char in string:\n        if char.lower() not in char_count:\n            char_count[char.lower()] = 1\n    return len(char_count)"}
{"task_id": "HumanEval/15", "solution": "from typing import *\ndef string_sequence(n: int) -> str:\n    result = \"\"\n    for i in range(n+1):\n        result += str(i) + \" \"\n    return result.strip()"}
{"task_id": "HumanEval/14", "solution": "from typing import *\ndef all_prefixes(string: str) -> List[str]:\n    prefixes = []\n    for i in range(len(string)):\n        prefixes.append(string[:i+1])\n    return prefixes"}
{"task_id": "HumanEval/13", "solution": "from typing import *\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/12", "solution": "from typing import *\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str"}
{"task_id": "HumanEval/11", "solution": "from typing import *\ndef string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] != b[i]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result"}
{"task_id": "HumanEval/10", "solution": "from typing import *\ndef is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"}
{"task_id": "HumanEval/9", "solution": "from typing import *\nfrom typing import List, Tuple\nfrom collections import deque\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    window = deque()\n    for i, num in enumerate(numbers):\n        while window and numbers[window[-1]] < num:\n            window.pop()\n        window.append(i)\n        if window[0] == i - len(numbers):\n            window.popleft()\n        result.append(numbers[window[0]])\n    return result"}
{"task_id": "HumanEval/8", "solution": "from typing import *\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    else:\n        sum_val = 0\n        product_val = 1\n        for num in numbers:\n            sum_val += num\n            product_val *= num\n        return (sum_val, product_val)"}
{"task_id": "HumanEval/7", "solution": "from typing import *\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    result = []\n    for s in strings:\n        if substring in s:\n            result.append(s)\n    return result"}
{"task_id": "HumanEval/6", "solution": "from typing import *\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"}
{"task_id": "HumanEval/5", "solution": "from typing import *\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i != len(numbers) - 1:  # Check if it's not the last element\n            result.append(delimeter)\n    return result\n\n\n"}
{"task_id": "HumanEval/4", "solution": "from typing import *\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    absolute_diff = [abs(num - mean) for num in numbers]\n    return sum(absolute_diff) / len(absolute_diff)"}
{"task_id": "HumanEval/3", "solution": "from typing import *\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/2", "solution": "from typing import *\ndef truncate_number(number: float) -> float:\n    return number - int(number)"}
{"task_id": "HumanEval/0", "solution": "from typing import *\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
