{"name": "mbpp_3_is_not_prime", "language": "Python3", "prompt": "def is_not_prime(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to identify non-prime numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_not_prime", "test": "def check(candidate):\n    \n    assert candidate(10)==True\n    assert candidate(35)==True\n    assert candidate(37)==False\n\ndef test_check():\n    check(is_not_prime)\n\ntest_check()\n", "source_codes": ["\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n\n"], "responses": ["```python\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n```"], "prompt_tokens": [74], "completion_tokens": [62], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_3_is_not_prime"}
{"name": "mbpp_4_heap_queue_largest", "language": "Python3", "prompt": "from typing import List\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "heap_queue_largest", "test": "def check(candidate):\n    \n    assert candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2)==[85, 75]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)==[85, 75, 65, 58, 35]\n\ndef test_check():\n    check(heap_queue_largest)\n\ntest_check()\n", "source_codes": ["\nimport heapq\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    if n <= 0:\n        return []\n    # Use nlargest from heapq to find the n largest elements\n    return heapq.nlargest(n, nums)[::-1]  # Reverse to get descending order\n\n\n"], "responses": ["```python\nimport heapq\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    if n <= 0:\n        return []\n    # Use nlargest from heapq to find the n largest elements\n    return heapq.nlargest(n, nums)[::-1]  # Reverse to get descending order\n```"], "prompt_tokens": [96], "completion_tokens": [70], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_4_heap_queue_largest"}
{"name": "mbpp_6_differ_At_One_Bit_Pos", "language": "Python3", "prompt": "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "differ_At_One_Bit_Pos", "test": "def check(candidate):\n    \n    assert candidate(15, 8)==False\n    assert candidate(2, 4)==False\n    assert candidate(2, 3)==True\n    assert candidate(5, 1)==True\n    assert candidate(1, 5)==True\n\ndef test_check():\n    check(differ_At_One_Bit_Pos)\n\ntest_check()\n", "source_codes": ["\ndef differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    # XOR of two numbers will have set bits only at positions where a and b differ\n    xor_result = a ^ b\n    # Check if XOR result is a power of 2, which means only one bit is different\n    return xor_result and not (xor_result & (xor_result - 1))\n\n\n"], "responses": ["```python\ndef differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    # XOR of two numbers will have set bits only at positions where a and b differ\n    xor_result = a ^ b\n    # Check if XOR result is a power of 2, which means only one bit is different\n    return xor_result and not (xor_result & (xor_result - 1))\n```"], "prompt_tokens": [89], "completion_tokens": [87], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_6_differ_At_One_Bit_Pos"}
{"name": "mbpp_8_square_nums", "language": "Python3", "prompt": "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find squares of individual elements in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "square_nums", "test": "def check(candidate):\n    \n    assert candidate([10, 20, 30])==[100, 400, 900]\n    assert candidate([12, 15])==[144, 225]\n\ndef test_check():\n    check(square_nums)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]\n```"], "prompt_tokens": [82], "completion_tokens": [33], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_8_square_nums"}
{"name": "mbpp_9_find_Rotations", "language": "Python3", "prompt": "def find_Rotations(str: str) -> int:\n    \"\"\"\n\tWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Rotations", "test": "def check(candidate):\n    \n    assert candidate('ab')==2\n    assert candidate('abc')==3\n\ndef test_check():\n    check(find_Rotations)\n\ntest_check()\n", "source_codes": ["\ndef find_Rotations(s: str) -> int:\n    # Concatenate the string with itself\n    temp = s + s\n    # Initialize the number of rotations\n    n = len(s)\n    \n    # Loop through the string to find the smallest rotation\n    for i in range(1, n):\n        # Check if the substring is equal to the original string\n        if temp[i:i+n] == s:\n            return i\n    # If no rotation is found, return the length of the string\n    return n\n\n# Example usage:\n# print(find_Rotations(\"abcde\"))  # Output: 5 (since no rotation gives the same string)\n\n\n"], "responses": ["```python\ndef find_Rotations(s: str) -> int:\n    # Concatenate the string with itself\n    temp = s + s\n    # Initialize the number of rotations\n    n = len(s)\n    \n    # Loop through the string to find the smallest rotation\n    for i in range(1, n):\n        # Check if the substring is equal to the original string\n        if temp[i:i+n] == s:\n            return i\n    # If no rotation is found, return the length of the string\n    return n\n\n# Example usage:\n# print(find_Rotations(\"abcde\"))  # Output: 5 (since no rotation gives the same string)\n```"], "prompt_tokens": [88], "completion_tokens": [144], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_9_find_Rotations"}
{"name": "mbpp_11_remove_Occ", "language": "Python3", "prompt": "def remove_Occ(s: str, ch: str) -> str:\n    \"\"\"\n\tWrite a python function to remove first and last occurrence of a given character from the string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_Occ", "test": "def check(candidate):\n    \n    assert candidate('abcda', 'a')=='bcd'\n    assert candidate('PHP', 'P')=='H'\n\ndef test_check():\n    check(remove_Occ)\n\ntest_check()\n", "source_codes": ["\ndef remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    if first_occ != -1:\n        s = s[:first_occ] + s[first_occ+1:]\n    last_occ = s.rfind(ch)\n    if last_occ != -1:\n        s = s[:last_occ] + s[last_occ+1:]\n    return s\n\n\n"], "responses": ["```python\ndef remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    if first_occ != -1:\n        s = s[:first_occ] + s[first_occ+1:]\n    last_occ = s.rfind(ch)\n    if last_occ != -1:\n        s = s[:last_occ] + s[last_occ+1:]\n    return s\n```"], "prompt_tokens": [85], "completion_tokens": [86], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_11_remove_Occ"}
{"name": "mbpp_12_sort_matrix", "language": "Python3", "prompt": "from typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_matrix", "test": "def check(candidate):\n    \n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    assert candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n\ndef test_check():\n    check(sort_matrix)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    # Sort the matrix based on the sum of rows\n    M.sort(key=sum)\n    return M\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    # Sort the matrix based on the sum of rows\n    M.sort(key=sum)\n    return M\n```"], "prompt_tokens": [90], "completion_tokens": [45], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_12_sort_matrix"}
{"name": "mbpp_14_find_Volume", "language": "Python3", "prompt": "def find_Volume(l: int, b: int, h: int) -> int:\n    \"\"\"\n\tWrite a python function to find the volume of a triangular prism.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Volume", "test": "def check(candidate):\n    \n    assert candidate(3, 2, 2)==6\n    assert candidate(1, 2, 1)==1\n\ndef test_check():\n    check(find_Volume)\n\ntest_check()\n", "source_codes": ["\ndef find_Volume(l: int, b: int, h: int) -> int:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \"\"\"\n    # The area of the triangular base (A) is given by (1/2) * base * height\n    # where 'b' is the base and 'h' is the height of the triangle\n    area_of_triangle = 0.5 * b * h\n\n    # The volume (V) of the prism is the product of the area of the triangle (A)\n    # and the length (l) of the prism\n    volume = area_of_triangle * l\n\n    return int(volume)\n\n\n"], "responses": ["```python\ndef find_Volume(l: int, b: int, h: int) -> int:\n    \"\"\"\n    Calculate the volume of a triangular prism.\n    \"\"\"\n    # The area of the triangular base (A) is given by (1/2) * base * height\n    # where 'b' is the base and 'h' is the height of the triangle\n    area_of_triangle = 0.5 * b * h\n\n    # The volume (V) of the prism is the product of the area of the triangle (A)\n    # and the length (l) of the prism\n    volume = area_of_triangle * l\n\n    return int(volume)\n```"], "prompt_tokens": [84], "completion_tokens": [142], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_14_find_Volume"}
{"name": "mbpp_16_text_lowercase_underscore", "language": "Python3", "prompt": "def text_lowercase_underscore(text: str) -> bool:\n    \"\"\"\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_lowercase_underscore", "test": "def check(candidate):\n    \n    assert candidate('aab_Abbbc')==False\n    assert candidate('Aaab_abbbc')==False\n\ndef test_check():\n    check(text_lowercase_underscore)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match(r'^[a-z]+(_[a-z]+)*$', text))\n\n\n"], "responses": ["```python\nimport re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.match(r'^[a-z]+(_[a-z]+)*$', text))\n```"], "prompt_tokens": [88], "completion_tokens": [39], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_16_text_lowercase_underscore"}
{"name": "mbpp_17_square_perimeter", "language": "Python3", "prompt": "def square_perimeter(a: int) -> int:\n    \"\"\"\n\tWrite a function that returns the perimeter of a square given its side length as input.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "square_perimeter", "test": "def check(candidate):\n    \n    assert candidate(5)==20\n    assert candidate(4)==16\n\ndef test_check():\n    check(square_perimeter)\n\ntest_check()\n", "source_codes": ["\ndef square_perimeter(a: int) -> int:\n    return 4 * a\n\n\n"], "responses": ["```\ndef square_perimeter(a: int) -> int:\n    return 4 * a\n```"], "prompt_tokens": [80], "completion_tokens": [21], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_17_square_perimeter"}
{"name": "mbpp_18_remove_dirty_chars", "language": "Python3", "prompt": "def remove_dirty_chars(string: str, second_string: str) -> str:\n    \"\"\"\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_dirty_chars", "test": "def check(candidate):\n    \n    assert candidate('digitalindia', 'talent')=='digiidi'\n    assert candidate('exoticmiles', 'toxic')=='emles'\n\ndef test_check():\n    check(remove_dirty_chars)\n\ntest_check()\n", "source_codes": ["\ndef remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join(char for char in string if char not in second_string)\n\n\n"], "responses": ["```\ndef remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join(char for char in string if char not in second_string)\n```"], "prompt_tokens": [86], "completion_tokens": [35], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_18_remove_dirty_chars"}
{"name": "mbpp_19_test_duplicate", "language": "Python3", "prompt": "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to find whether a given array of integers contains any duplicate element.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "test_duplicate", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 4])==True\n    assert candidate([1, 1, 2, 2, 3, 3, 4, 4, 5])==True\n\ndef test_check():\n    check(test_duplicate)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    return len(arraynums) != len(set(arraynums))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    return len(arraynums) != len(set(arraynums))\n```"], "prompt_tokens": [85], "completion_tokens": [54], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_19_test_duplicate"}
{"name": "mbpp_20_is_woodall", "language": "Python3", "prompt": "def is_woodall(x: int) -> bool:\n    \"\"\"\n\tWrite a function to check if the given number is woodball or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_woodall", "test": "def check(candidate):\n    \n    assert candidate(254)==False\n    assert candidate(200)==False\n\ndef test_check():\n    check(is_woodall)\n\ntest_check()\n", "source_codes": ["\ndef is_woodall(x: int) -> bool:\n    \"\"\"\n    Check if the given number is a Woodall number.\n    A Woodall number is of the form n * 2^n - 1.\n    \"\"\"\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1\n\n\n"], "responses": ["```python\ndef is_woodall(x: int) -> bool:\n    \"\"\"\n    Check if the given number is a Woodall number.\n    A Woodall number is of the form n * 2^n - 1.\n    \"\"\"\n    n = 1\n    while True:\n        woodall_number = n * (2 ** n) - 1\n        if woodall_number == x:\n            return True\n        elif woodall_number > x:\n            return False\n        n += 1\n```"], "prompt_tokens": [79], "completion_tokens": [106], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_20_is_woodall"}
{"name": "mbpp_56_checks", "language": "Python3", "prompt": "def checks(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check if a given number is one less than twice its reverse.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "checks", "test": "def check(candidate):\n    \n    assert candidate(23)==False\n    assert candidate(73)==True\n\ndef test_check():\n    check(checks)\n\ntest_check()\n", "source_codes": ["\ndef checks(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])  # Reverse the number by converting it to a string and then back to an int\n    return n == 2 * reverse_n - 1  # Check if the number is one less than twice its reverse\n\n\n"], "responses": ["```python\ndef checks(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])  # Reverse the number by converting it to a string and then back to an int\n    return n == 2 * reverse_n - 1  # Check if the number is one less than twice its reverse\n```"], "prompt_tokens": [79], "completion_tokens": [68], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_56_checks"}
{"name": "mbpp_57_find_Max_Num", "language": "Python3", "prompt": "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the largest number that can be formed with the given list of digits.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Max_Num", "test": "def check(candidate):\n    \n    assert candidate([4, 5, 6, 1])==6541\n    assert candidate([1, 2, 3, 9])==9321\n\ndef test_check():\n    check(find_Max_Num)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    # Convert integers to strings to be able to sort them\n    arr = list(map(str, arr))\n    \n    # Sort the array in descending order based on the rule that\n    # for any two numbers X and Y, XY should be greater than YX\n    arr.sort(key=lambda x: x*10, reverse=True)\n    \n    # Concatenate the sorted strings\n    largest_num_str = ''.join(arr)\n    \n    # Convert the concatenated string back to an integer\n    largest_num = int(largest_num_str)\n    \n    return largest_num\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    # Convert integers to strings to be able to sort them\n    arr = list(map(str, arr))\n    \n    # Sort the array in descending order based on the rule that\n    # for any two numbers X and Y, XY should be greater than YX\n    arr.sort(key=lambda x: x*10, reverse=True)\n    \n    # Concatenate the sorted strings\n    largest_num_str = ''.join(arr)\n    \n    # Convert the concatenated string back to an integer\n    largest_num = int(largest_num_str)\n    \n    return largest_num\n```"], "prompt_tokens": [89], "completion_tokens": [136], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_57_find_Max_Num"}
{"name": "mbpp_58_opposite_Signs", "language": "Python3", "prompt": "def opposite_Signs(x: int, y: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "opposite_Signs", "test": "def check(candidate):\n    \n    assert candidate(3, 2)==False\n    assert candidate(-10, -10)==False\n    assert candidate(-2, 2)==True\n\ndef test_check():\n    check(opposite_Signs)\n\ntest_check()\n", "source_codes": ["\ndef opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) < 0\n\n\n"], "responses": ["```python\ndef opposite_Signs(x: int, y: int) -> bool:\n    return (x ^ y) < 0\n```"], "prompt_tokens": [85], "completion_tokens": [31], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_58_opposite_Signs"}
{"name": "mbpp_59_is_octagonal", "language": "Python3", "prompt": "def is_octagonal(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth octagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_octagonal", "test": "def check(candidate):\n    \n    assert candidate(10)==280\n    assert candidate(15)==645\n\ndef test_check():\n    check(is_octagonal)\n\ntest_check()\n", "source_codes": ["\ndef is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number.\n    \"\"\"\n    return n * (3 * n - 2)\n\n\n"], "responses": ["```\ndef is_octagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth octagonal number.\n    \"\"\"\n    return n * (3 * n - 2)\n```"], "prompt_tokens": [74], "completion_tokens": [38], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_59_is_octagonal"}
{"name": "mbpp_61_count_Substrings", "language": "Python3", "prompt": "def count_Substrings(s: str) -> int:\n    \"\"\"\n\tWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Substrings", "test": "def check(candidate):\n    \n    assert candidate('111')==6\n    assert candidate('1101112')==12\n\ndef test_check():\n    check(count_Substrings)\n\ntest_check()\n", "source_codes": ["\ndef count_Substrings(s: str) -> int:\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digit_sum = sum(int(char) for char in substring if char.isdigit())\n            if digit_sum == len(substring):\n                count += 1\n    return count\n\n\n"], "responses": ["```python\ndef count_Substrings(s: str) -> int:\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digit_sum = sum(int(char) for char in substring if char.isdigit())\n            if digit_sum == len(substring):\n                count += 1\n    return count\n```"], "prompt_tokens": [84], "completion_tokens": [85], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_61_count_Substrings"}
{"name": "mbpp_62_smallest_num", "language": "Python3", "prompt": "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find smallest number in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "smallest_num", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3])==1\n    assert candidate([45, 46, 50, 60])==45\n\ndef test_check():\n    check(smallest_num)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    if not xs:  # Check if the list is empty\n        return float('inf')  # Return infinity if the list is empty\n    return min(xs)  # Use the built-in min function to find the smallest number\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    \"\"\"\n    Write a python function to find the smallest number in a list.\n    \"\"\"\n    if not xs:  # Check if the list is empty\n        return float('inf')  # Return infinity if the list is empty\n    return min(xs)  # Use the built-in min function to find the smallest number\n```"], "prompt_tokens": [80], "completion_tokens": [87], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_62_smallest_num"}
{"name": "mbpp_63_max_difference", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum difference between available pairs in the given tuple list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_difference", "test": "def check(candidate):\n    \n    assert candidate([(4, 6), (2, 17), (9, 13), (11, 12)])==15\n    assert candidate([(12, 35), (21, 27), (13, 23), (41, 22)])==23\n\ndef test_check():\n    check(max_difference)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    if not test_list:\n        return 0  # If the list is empty, there is no difference to calculate.\n    min_val = min(test_list, key=lambda x: x[0])[0]\n    max_val = max(test_list, key=lambda x: x[1])[1]\n    return max_val - min_val\n\n# Example usage:\n# test_list = [(2, 3), (1, 7), (5, 10)]\n# print(max_difference(test_list))  # Output should be 9, which is 10 - 1\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    if not test_list:\n        return 0  # If the list is empty, there is no difference to calculate.\n    min_val = min(test_list, key=lambda x: x[0])[0]\n    max_val = max(test_list, key=lambda x: x[1])[1]\n    return max_val - min_val\n\n# Example usage:\n# test_list = [(2, 3), (1, 7), (5, 10)]\n# print(max_difference(test_list))  # Output should be 9, which is 10 - 1\n```"], "prompt_tokens": [92], "completion_tokens": [145], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_63_max_difference"}
{"name": "mbpp_64_subject_marks", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    \"\"\"\n\tWrite a function to sort a list of tuples using the second value of each tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "subject_marks", "test": "def check(candidate):\n    \n    assert candidate([('Telugu', 49), ('Hindhi', 54), ('Social', 33)])==[('Social', 33), ('Telugu', 49), ('Hindhi', 54)]\n    assert candidate([('Physics', 96), ('Chemistry', 97), ('Biology', 45)])==[('Biology', 45), ('Physics', 96), ('Chemistry', 97)]\n\ndef test_check():\n    check(subject_marks)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    # Sort the list of tuples based on the second value (marks) of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    # Sort the list of tuples based on the second value (marks) of each tuple\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n```"], "prompt_tokens": [97], "completion_tokens": [68], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_64_subject_marks"}
{"name": "mbpp_65_recursive_list_sum", "language": "Python3", "prompt": "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List[int]]]) -> int:\n    \"\"\"\n\tWrite a function to flatten a list and sum all of its elements.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "recursive_list_sum", "test": "def check(candidate):\n    \n    assert candidate([7, 10, [15, 14], [19, 41]])==106\n    assert candidate([10, 20, [30, 40], [50, 60]])==210\n\ndef test_check():\n    check(recursive_list_sum)\n\ntest_check()\n", "source_codes": ["\ndef recursive_list_sum(data_list: List[Union[int, List[int]]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n\n\n"], "responses": ["```python\ndef recursive_list_sum(data_list: List[Union[int, List[int]]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total\n```"], "prompt_tokens": [92], "completion_tokens": [63], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_65_recursive_list_sum"}
{"name": "mbpp_66_pos_count", "language": "Python3", "prompt": "from typing import List\n\ndef pos_count(list: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to count the number of positive numbers in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pos_count", "test": "def check(candidate):\n    \n    assert candidate([3, 4, 5, -1])==3\n    assert candidate([1, 2, 3, 4])==4\n\ndef test_check():\n    check(pos_count)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef pos_count(lst: List[int]) -> int:\n    return sum(1 for x in lst if x > 0)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef pos_count(lst: List[int]) -> int:\n    return sum(1 for x in lst if x > 0)\n```"], "prompt_tokens": [83], "completion_tokens": [35], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_66_pos_count"}
{"name": "mbpp_67_bell_number", "language": "Python3", "prompt": "def bell_number(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the number of ways to partition a set of Bell numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "bell_number", "test": "def check(candidate):\n    \n    assert candidate(10)==115975\n    assert candidate(56)==6775685320645824322581483068371419745979053216268760300\n\ndef test_check():\n    check(bell_number)\n\ntest_check()\n", "source_codes": ["\ndef bell_number(n: int) -> int:\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n\n"], "responses": ["```python\ndef bell_number(n: int) -> int:\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n```"], "prompt_tokens": [79], "completion_tokens": [117], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_67_bell_number"}
{"name": "mbpp_68_is_Monotonic", "language": "Python3", "prompt": "from typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Monotonic", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 2, 3])==True\n    assert candidate([1, 3, 2])==False\n\ndef test_check():\n    check(is_Monotonic)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        if A[i] < A[i - 1]:\n            increasing = False\n    return increasing or decreasing\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        if A[i] < A[i - 1]:\n            increasing = False\n    return increasing or decreasing\n```"], "prompt_tokens": [87], "completion_tokens": [81], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_68_is_Monotonic"}
{"name": "mbpp_69_is_sublist", "language": "Python3", "prompt": "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_sublist", "test": "def check(candidate):\n    \n    assert candidate([2, 4, 3, 5, 7], [4, 3])==True\n    assert candidate([2, 4, 3, 5, 7], [1, 6])==False\n\ndef test_check():\n    check(is_sublist)\n\ntest_check()\n", "source_codes": ["\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:  # An empty list is a sublist of any list\n        return True\n    if not l:  # A non-empty sublist cannot be in an empty list\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n\n\n"], "responses": ["```python\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:  # An empty list is a sublist of any list\n        return True\n    if not l:  # A non-empty sublist cannot be in an empty list\n        return False\n\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n```"], "prompt_tokens": [89], "completion_tokens": [99], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_69_is_sublist"}
{"name": "mbpp_70_get_equal", "language": "Python3", "prompt": "from typing import List\n\ndef get_equal(Input: List[List[int]]) -> bool:\n    \"\"\"\n\tWrite a function to find whether all the given lists have equal length or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_equal", "test": "def check(candidate):\n    \n    assert candidate([[1, 2, 3], [4, 5, 6, 7]])==False\n    assert candidate([[1, 2], [3, 4]])==True\n\ndef test_check():\n    check(get_equal)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef get_equal(Input: List[List[int]]) -> bool:\n    if not Input:  # Check if the input list is empty\n        return True  # An empty list of lists is considered to have equal length lists\n    \n    # Get the length of the first list\n    first_length = len(Input[0])\n    \n    # Compare the length of the first list with the rest of the lists\n    for lst in Input:\n        if len(lst) != first_length:\n            return False  # If any list has a different length, return False\n    \n    return True  # If all lists have the same length, return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef get_equal(Input: List[List[int]]) -> bool:\n    if not Input:  # Check if the input list is empty\n        return True  # An empty list of lists is considered to have equal length lists\n    \n    # Get the length of the first list\n    first_length = len(Input[0])\n    \n    # Compare the length of the first list with the rest of the lists\n    for lst in Input:\n        if len(lst) != first_length:\n            return False  # If any list has a different length, return False\n    \n    return True  # If all lists have the same length, return True\n```"], "prompt_tokens": [85], "completion_tokens": [137], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_70_get_equal"}
{"name": "mbpp_71_comb_sort", "language": "Python3", "prompt": "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a list of elements.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "comb_sort", "test": "def check(candidate):\n    \n    assert candidate([41, 32, 15, 19, 22])==[15, 19, 22, 32, 41]\n    assert candidate([99, 15, 13, 47])==[13, 15, 47, 99]\n\ndef test_check():\n    check(comb_sort)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3  # shrink factor\n    sorted = False\n\n    while not sorted:\n        # Update the gap value for a next comb\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        index = 0\n        while index + gap < len(nums):\n            if nums[index] > nums[index + gap]:\n                # Swap values\n                nums[index], nums[index + gap] = nums[index + gap], nums[index]\n                sorted = False\n            index += 1\n\n    return nums\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3  # shrink factor\n    sorted = False\n\n    while not sorted:\n        # Update the gap value for a next comb\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        index = 0\n        while index + gap < len(nums):\n            if nums[index] > nums[index + gap]:\n                # Swap values\n                nums[index], nums[index + gap] = nums[index + gap], nums[index]\n                sorted = False\n            index += 1\n\n    return nums\n```"], "prompt_tokens": [79], "completion_tokens": [151], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_71_comb_sort"}
{"name": "mbpp_72_dif_Square", "language": "Python3", "prompt": "def dif_Square(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "dif_Square", "test": "def check(candidate):\n    \n    assert candidate(10)==False\n    assert candidate(15)==True\n\ndef test_check():\n    check(dif_Square)\n\ntest_check()\n", "source_codes": ["\ndef dif_Square(n: int) -> bool:\n    # A number can be represented as the difference of two squares\n    # if and only if it is not of the form 4k+2 for any integer k.\n    # This is because n = a^2 - b^2 = (a+b)(a-b)\n    # For n to be the difference of two squares, (a+b) and (a-b) must be of different parity\n    # (one even and one odd), because if both were even or both were odd, their difference\n    # would be even and their product would be a multiple of 4.\n    # Therefore, n cannot be a multiple of 4 plus 2.\n    return n % 4 != 2\n\n# Example usage:\n# print(dif_Square(5))  # True, because 5 = 3^2 - 2^2\n# print(dif_Square(6))  # False, because 6 cannot be expressed as the difference of two squares\n\n\n"], "responses": ["```python\ndef dif_Square(n: int) -> bool:\n    # A number can be represented as the difference of two squares\n    # if and only if it is not of the form 4k+2 for any integer k.\n    # This is because n = a^2 - b^2 = (a+b)(a-b)\n    # For n to be the difference of two squares, (a+b) and (a-b) must be of different parity\n    # (one even and one odd), because if both were even or both were odd, their difference\n    # would be even and their product would be a multiple of 4.\n    # Therefore, n cannot be a multiple of 4 plus 2.\n    return n % 4 != 2\n\n# Example usage:\n# print(dif_Square(5))  # True, because 5 = 3^2 - 2^2\n# print(dif_Square(6))  # False, because 6 cannot be expressed as the difference of two squares\n```"], "prompt_tokens": [85], "completion_tokens": [221], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_72_dif_Square"}
{"name": "mbpp_74_is_samepatterns", "language": "Python3", "prompt": "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    \"\"\"\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_samepatterns", "test": "def check(candidate):\n    \n    assert candidate(['red', 'green', 'greenn'], ['a', 'b', 'b'])==False\n    assert candidate(['red', 'green', 'greenn'], ['a', 'b'])==False\n\ndef test_check():\n    check(is_samepatterns)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n\n    color_to_pattern = {}\n    pattern_to_color = {}\n\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n\n    color_to_pattern = {}\n    pattern_to_color = {}\n\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n\n    return True\n```"], "prompt_tokens": [90], "completion_tokens": [137], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_74_is_samepatterns"}
{"name": "mbpp_75_find_tuples", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, int, int]], K: int) -> List[Tuple[int, int, int]]:\n    \"\"\"\n\tWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_tuples", "test": "def check(candidate):\n    \n    assert candidate([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5)==[(5, 25, 30)]\n    assert candidate([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4)==[(8, 16, 4)]\n\ndef test_check():\n    check(find_tuples)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, int, int]], K: int) -> List[Tuple[int, int, int]]:\n    return [tup for tup in test_list if all(elem % K == 0 for elem in tup)]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, int, int]], K: int) -> List[Tuple[int, int, int]]:\n    return [tup for tup in test_list if all(elem % K == 0 for elem in tup)]\n```"], "prompt_tokens": [108], "completion_tokens": [63], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_75_find_tuples"}
{"name": "mbpp_77_is_Diff", "language": "Python3", "prompt": "def is_Diff(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to find whether a number is divisible by 11.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Diff", "test": "def check(candidate):\n    \n    assert candidate(1212112)==True\n    assert candidate(1212)==False\n\ndef test_check():\n    check(is_Diff)\n\ntest_check()\n", "source_codes": ["\ndef is_Diff(n: int) -> bool:\n    return n % 11 == 0\n\n\n"], "responses": ["```python\ndef is_Diff(n: int) -> bool:\n    return n % 11 == 0\n```"], "prompt_tokens": [78], "completion_tokens": [25], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_77_is_Diff"}
{"name": "mbpp_79_word_len", "language": "Python3", "prompt": "def word_len(s: str) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the length of the word is odd or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "word_len", "test": "def check(candidate):\n    \n    assert candidate('great')==True\n    assert candidate('structure')==True\n\ndef test_check():\n    check(word_len)\n\ntest_check()\n", "source_codes": ["\ndef word_len(s: str) -> bool:\n    \"\"\"\n    Check whether the length of the word is odd or not.\n    \"\"\"\n    return len(s) % 2 != 0\n\n\n"], "responses": ["```python\ndef word_len(s: str) -> bool:\n    \"\"\"\n    Check whether the length of the word is odd or not.\n    \"\"\"\n    return len(s) % 2 != 0\n```"], "prompt_tokens": [79], "completion_tokens": [43], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_79_word_len"}
{"name": "mbpp_80_tetrahedral_number", "language": "Python3", "prompt": "def tetrahedral_number(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth tetrahedral number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tetrahedral_number", "test": "def check(candidate):\n    \n    assert candidate(6)==56\n    assert candidate(7)==84\n\ndef test_check():\n    check(tetrahedral_number)\n\ntest_check()\n", "source_codes": ["\ndef tetrahedral_number(n: int) -> int:\n    return n * (n + 1) * (n + 2) // 6\n\n\n"], "responses": ["```python\ndef tetrahedral_number(n: int) -> int:\n    return n * (n + 1) * (n + 2) // 6\n```"], "prompt_tokens": [76], "completion_tokens": [37], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_80_tetrahedral_number"}
{"name": "mbpp_83_get_Char", "language": "Python3", "prompt": "def get_Char(strr: str) -> str:\n    \"\"\"\n\tWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_Char", "test": "def check(candidate):\n    \n    assert candidate('gfg')=='t'\n    assert candidate('ab')=='c'\n\ndef test_check():\n    check(get_Char)\n\ntest_check()\n", "source_codes": ["\ndef get_Char(strr: str) -> str:\n    total_ascii = sum(ord(char) for char in strr)\n    return chr((total_ascii % 26) + ord('A'))\n\n# Example usage:\n# result = get_Char(\"Hello\")\n# print(result)  # This will print a character based on the ASCII sum modulo 26\n\n\n"], "responses": ["```python\ndef get_Char(strr: str) -> str:\n    total_ascii = sum(ord(char) for char in strr)\n    return chr((total_ascii % 26) + ord('A'))\n\n# Example usage:\n# result = get_Char(\"Hello\")\n# print(result)  # This will print a character based on the ASCII sum modulo 26\n```"], "prompt_tokens": [89], "completion_tokens": [75], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_83_get_Char"}
{"name": "mbpp_84_sequence", "language": "Python3", "prompt": "def sequence(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth number in the newman conway sequence.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_84_sequence.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sequence", "test": "def check(candidate):\n    \n    assert candidate(2)==1\n    assert candidate(3)==2\n\ndef test_check():\n    check(sequence)\n\ntest_check()\n", "source_codes": ["\ndef sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    seq = [0, 1, 1]  # Start with a base list to hold the sequence\n    for i in range(3, n + 1):\n        seq.append(seq[seq[i - 1]] + seq[i - seq[i - 1]])\n    return seq[n]\n\n\n"], "responses": ["```python\ndef sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    seq = [0, 1, 1]  # Start with a base list to hold the sequence\n    for i in range(3, n + 1):\n        seq.append(seq[seq[i - 1]] + seq[i - seq[i - 1]])\n    return seq[n]\n```"], "prompt_tokens": [77], "completion_tokens": [93], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_84_sequence"}
{"name": "mbpp_86_centered_hexagonal_number", "language": "Python3", "prompt": "def centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n\tWrite a function to find nth centered hexagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "centered_hexagonal_number", "test": "def check(candidate):\n    \n    assert candidate(2)==7\n    assert candidate(9)==217\n\ndef test_check():\n    check(centered_hexagonal_number)\n\ntest_check()\n", "source_codes": ["\ndef centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1\n\n\n"], "responses": ["```python\ndef centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1\n```"], "prompt_tokens": [75], "completion_tokens": [33], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_86_centered_hexagonal_number"}
{"name": "mbpp_87_merge_dictionaries_three", "language": "Python3", "prompt": "from typing import Dict\n\ndef merge_dictionaries_three(dict1: Dict[str, str], dict2: Dict[str, str], dict3: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"\n\tWrite a function to merge three dictionaries into a single dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_87_merge_dictionaries_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "merge_dictionaries_three", "test": "def check(candidate):\n    \n    assert candidate({ 'R': 'Red', 'B': 'Black', 'P': 'Pink' }, { 'G': 'Green', 'W': 'White' }, { 'L': 'lavender', 'B': 'Blue' })=={ 'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender' }\n    assert candidate({ 'R': 'Red', 'B': 'Black', 'P': 'Pink' }, { 'L': 'lavender', 'B': 'Blue' }, { 'G': 'Green', 'W': 'White' })=={ 'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White' }\n\ndef test_check():\n    check(merge_dictionaries_three)\n\ntest_check()\n", "source_codes": ["\ndef merge_dictionaries_three(dict1: Dict[str, str], dict2: Dict[str, str], dict3: Dict[str, str]) -> Dict[str, str]:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n\n\n"], "responses": ["```python\ndef merge_dictionaries_three(dict1: Dict[str, str], dict2: Dict[str, str], dict3: Dict[str, str]) -> Dict[str, str]:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n```"], "prompt_tokens": [104], "completion_tokens": [61], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_87_merge_dictionaries_three"}
{"name": "mbpp_88_freq_count", "language": "Python3", "prompt": "from typing import List, Dict\n\ndef freq_count(list1: List[int]) -> Dict[int, int]:\n    \"\"\"\n\tWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "freq_count", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4])=={ 1: 3, 2: 2, 3: 3, 4: 3 }\n    assert candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5])=={ 10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2 }\n\ndef test_check():\n    check(freq_count)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Dict\n\ndef freq_count(list1: List[int]) -> Dict[int, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n\n\n"], "responses": ["```python\nfrom typing import List, Dict\n\ndef freq_count(list1: List[int]) -> Dict[int, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n```"], "prompt_tokens": [94], "completion_tokens": [66], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_88_freq_count"}
{"name": "mbpp_89_closest_num", "language": "Python3", "prompt": "def closest_num(N: int) -> int:\n    \"\"\"\n\tWrite a function to find the closest smaller number than n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "closest_num", "test": "def check(candidate):\n    \n    assert candidate(7)==6\n    assert candidate(12)==11\n\ndef test_check():\n    check(closest_num)\n\ntest_check()\n", "source_codes": ["\ndef closest_num(N: int) -> int:\n    return N - 1\n\n\n"], "responses": ["```python\ndef closest_num(N: int) -> int:\n    return N - 1\n```"], "prompt_tokens": [74], "completion_tokens": [21], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_89_closest_num"}
{"name": "mbpp_90_len_log", "language": "Python3", "prompt": "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    \"\"\"\n\tWrite a python function to find the length of the longest word.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "len_log", "test": "def check(candidate):\n    \n    assert candidate(['a', 'ab', 'abc'])==3\n    assert candidate(['small', 'big', 'tall'])==5\n\ndef test_check():\n    check(len_log)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max(len(word) for word in list1)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max(len(word) for word in list1)\n```"], "prompt_tokens": [82], "completion_tokens": [33], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_90_len_log"}
{"name": "mbpp_91_find_substring", "language": "Python3", "prompt": "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    \"\"\"\n\tWrite a function to check if a string is present as a substring in a given list of string values.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_substring", "test": "def check(candidate):\n    \n    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'abc')==False\n    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ange')==True\n\ndef test_check():\n    check(find_substring)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_substring(str_list: List[str], sub_str: str) -> bool:\n    for s in str_list:\n        if sub_str in s:\n            return True\n    return False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_substring(str_list: List[str], sub_str: str) -> bool:\n    for s in str_list:\n        if sub_str in s:\n            return True\n    return False\n```"], "prompt_tokens": [96], "completion_tokens": [49], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_91_find_substring"}
{"name": "mbpp_92_is_undulating", "language": "Python3", "prompt": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_undulating", "test": "def check(candidate):\n    \n    assert candidate(1991)==False\n    assert candidate(121)==True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n", "source_codes": ["\ndef is_undulating(n: int) -> bool:\n    str_n = str(n)\n    if len(str_n) < 3 or len(set(str_n)) == 1:\n        return False\n    return all(str_n[i] != str_n[i+1] for i in range(len(str_n) - 1))\n\n\n"], "responses": ["```python\ndef is_undulating(n: int) -> bool:\n    str_n = str(n)\n    if len(str_n) < 3 or len(set(str_n)) == 1:\n        return False\n    return all(str_n[i] != str_n[i+1] for i in range(len(str_n) - 1))\n```"], "prompt_tokens": [79], "completion_tokens": [72], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_92_is_undulating"}
{"name": "mbpp_93_power", "language": "Python3", "prompt": "def power(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the value of 'a' to the power 'b'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_93_power.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "power", "test": "def check(candidate):\n    \n    assert candidate(2, 3)==8\n    assert candidate(5, 5)==3125\n\ndef test_check():\n    check(power)\n\ntest_check()\n", "source_codes": ["\ndef power(a: int, b: int) -> int:\n    return a ** b\n\n\n"], "responses": ["```\ndef power(a: int, b: int) -> int:\n    return a ** b\n```"], "prompt_tokens": [82], "completion_tokens": [22], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_93_power"}
{"name": "mbpp_94_index_minimum", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> str:\n    \"\"\"\n\tGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "index_minimum", "test": "def check(candidate):\n    \n    assert candidate([('Yash', 185), ('Dawood', 125), ('Sanya', 175)])=='Dawood'\n    assert candidate([('Sai', 345), ('Salman', 145), ('Ayesha', 96)])=='Ayesha'\n\ndef test_check():\n    check(index_minimum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> str:\n    # Initialize the minimum value with infinity\n    min_value = float('inf')\n    min_index = ''\n    \n    # Iterate through the list of tuples\n    for item in test_list:\n        # Check if the current tuple's second value is less than the minimum found so far\n        if item[1] < min_value:\n            min_value = item[1]\n            min_index = item[0]\n    \n    # Return the first value of the tuple with the smallest second value\n    return min_index\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> str:\n    # Initialize the minimum value with infinity\n    min_value = float('inf')\n    min_index = ''\n    \n    # Iterate through the list of tuples\n    for item in test_list:\n        # Check if the current tuple's second value is less than the minimum found so far\n        if item[1] < min_value:\n            min_value = item[1]\n            min_index = item[0]\n    \n    # Return the first value of the tuple with the smallest second value\n    return min_index\n```"], "prompt_tokens": [99], "completion_tokens": [132], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_94_index_minimum"}
{"name": "mbpp_95_Find_Min_Length", "language": "Python3", "prompt": "from typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a python function to find the length of the smallest list in a list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Min_Length", "test": "def check(candidate):\n    \n    assert candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]])==2\n    assert candidate([[3, 3, 3], [4, 4, 4, 4]])==3\n\ndef test_check():\n    check(Find_Min_Length)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> int:\n    return min(len(sublist) for sublist in lst)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> int:\n    return min(len(sublist) for sublist in lst)\n```"], "prompt_tokens": [88], "completion_tokens": [34], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_95_Find_Min_Length"}
{"name": "mbpp_96_divisor", "language": "Python3", "prompt": "def divisor(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the number of divisors of a given integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "divisor", "test": "def check(candidate):\n    \n    assert candidate(12)==6\n    assert candidate(9)==3\n\ndef test_check():\n    check(divisor)\n\ntest_check()\n", "source_codes": ["\ndef divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n\n"], "responses": ["```python\ndef divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n```"], "prompt_tokens": [77], "completion_tokens": [51], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_96_divisor"}
{"name": "mbpp_97_frequency_lists", "language": "Python3", "prompt": "from typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    \"\"\"\n\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "frequency_lists", "test": "def check(candidate):\n    \n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])=={ 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1 }\n    assert candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]])=={ 20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1 }\n\ndef test_check():\n    check(frequency_lists)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    # Use Counter to count the frequency of each element\n    frequency = Counter(flat_list)\n    return dict(frequency)\n\n\n"], "responses": ["```python\nfrom typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    # Flatten the list of lists\n    flat_list = [item for sublist in list1 for item in sublist]\n    # Use Counter to count the frequency of each element\n    frequency = Counter(flat_list)\n    return dict(frequency)\n```"], "prompt_tokens": [96], "completion_tokens": [82], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_97_frequency_lists"}
{"name": "mbpp_99_decimal_to_binary", "language": "Python3", "prompt": "def decimal_to_binary(n: int) -> str:\n    \"\"\"\n\tWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "decimal_to_binary", "test": "def check(candidate):\n    \n    assert candidate(18)=='10010'\n    assert candidate(7)=='111'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n", "source_codes": ["\ndef decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return \"0\"\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str\n\n\n"], "responses": ["```\ndef decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return \"0\"\n    binary_str = \"\"\n    while n > 0:\n        binary_str = str(n % 2) + binary_str\n        n = n // 2\n    return binary_str\n```"], "prompt_tokens": [86], "completion_tokens": [65], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_99_decimal_to_binary"}
{"name": "mbpp_100_next_smallest_palindrome", "language": "Python3", "prompt": "def next_smallest_palindrome(num: int) -> int:\n    \"\"\"\n\tWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "next_smallest_palindrome", "test": "def check(candidate):\n    \n    assert candidate(1221)==1331\n    assert candidate(120)==121\n\ndef test_check():\n    check(next_smallest_palindrome)\n\ntest_check()\n", "source_codes": ["\ndef next_smallest_palindrome(num: int) -> int:\n    num += 1  # Start checking from the next number\n    while True:\n        if str(num) == str(num)[::-1]:  # Check if the number is a palindrome\n            return num\n        num += 1\n\n\n"], "responses": ["```python\ndef next_smallest_palindrome(num: int) -> int:\n    num += 1  # Start checking from the next number\n    while True:\n        if str(num) == str(num)[::-1]:  # Check if the number is a palindrome\n            return num\n        num += 1\n```"], "prompt_tokens": [84], "completion_tokens": [67], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_100_next_smallest_palindrome"}
{"name": "mbpp_101_kth_element", "language": "Python3", "prompt": "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    \"\"\"\n\tWrite a function to find the kth element in the given array using 1-based indexing.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "kth_element", "test": "def check(candidate):\n    \n    assert candidate([17, 24, 8, 23], 3)==8\n    assert candidate([16, 21, 25, 36, 4], 4)==36\n\ndef test_check():\n    check(kth_element)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k-1]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    arr.sort()\n    return arr[k-1]\n```"], "prompt_tokens": [92], "completion_tokens": [36], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_101_kth_element"}
{"name": "mbpp_102_snake_to_camel", "language": "Python3", "prompt": "def snake_to_camel(word: str) -> str:\n    \"\"\"\n\tWrite a function to convert a snake case string to camel case string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "snake_to_camel", "test": "def check(candidate):\n    \n    assert candidate('python_language')=='PythonLanguage'\n    assert candidate('programming_language')=='ProgrammingLanguage'\n\ndef test_check():\n    check(snake_to_camel)\n\ntest_check()\n", "source_codes": ["\ndef snake_to_camel(word: str) -> str:\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n\n"], "responses": ["```\ndef snake_to_camel(word: str) -> str:\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n```"], "prompt_tokens": [78], "completion_tokens": [31], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_102_snake_to_camel"}
{"name": "mbpp_103_eulerian_num", "language": "Python3", "prompt": "def eulerian_num(n: int, m: int) -> int:\n    \"\"\"\n\tWrite a function to find the Eulerian number a(n, m).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "eulerian_num", "test": "def check(candidate):\n    \n    assert candidate(4, 1)==11\n    assert candidate(5, 3)==26\n\ndef test_check():\n    check(eulerian_num)\n\ntest_check()\n", "source_codes": ["\ndef eulerian_num(n: int, m: int) -> int:\n    # Initialize a 2D array to store the Eulerian numbers\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # Base case\n    dp[0][0] = 1\n    \n    # Fill the Eulerian number table using dynamic programming\n    for i in range(1, n+1):\n        for j in range(0, i+1):\n            if j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (i - j) * dp[i-1][j-1] + (j + 1) * dp[i-1][j]\n    \n    # Return the result\n    return dp[n][m]\n\n# Example usage:\n# print(eulerian_num(3, 1))  # Output: 4\n\n\n"], "responses": ["```python\ndef eulerian_num(n: int, m: int) -> int:\n    # Initialize a 2D array to store the Eulerian numbers\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    \n    # Base case\n    dp[0][0] = 1\n    \n    # Fill the Eulerian number table using dynamic programming\n    for i in range(1, n+1):\n        for j in range(0, i+1):\n            if j == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (i - j) * dp[i-1][j-1] + (j + 1) * dp[i-1][j]\n    \n    # Return the result\n    return dp[n][m]\n\n# Example usage:\n# print(eulerian_num(3, 1))  # Output: 4\n```"], "prompt_tokens": [81], "completion_tokens": [202], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_103_eulerian_num"}
{"name": "mbpp_104_sort_sublists", "language": "Python3", "prompt": "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_sublists", "test": "def check(candidate):\n    \n    assert candidate([[' red ', 'green'], ['blue ', ' black'], [' orange', 'brown']])==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate([['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze']])==[['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]\n```"], "prompt_tokens": [89], "completion_tokens": [38], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_104_sort_sublists"}
{"name": "mbpp_105_count", "language": "Python3", "prompt": "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    \"\"\"\n\tWrite a python function to count true booleans in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count", "test": "def check(candidate):\n    \n    assert candidate([False, False])==0\n    assert candidate([True, True, True])==3\n\ndef test_check():\n    check(count)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)\n```"], "prompt_tokens": [82], "completion_tokens": [25], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_105_count"}
{"name": "mbpp_106_add_lists", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef add_lists(test_list: List[int], test_tup: Tuple[int, int]) -> Tuple[int, int, int, int, int]:\n    \"\"\"\n\tWrite a function to append the given list to the given tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_lists", "test": "def check(candidate):\n    \n    assert candidate([6, 7, 8], (10, 11))==(10, 11, 6, 7, 8)\n    assert candidate([7, 8, 9], (11, 12))==(11, 12, 7, 8, 9)\n\ndef test_check():\n    check(add_lists)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef add_lists(test_list: List[int], test_tup: Tuple[int, int]) -> Tuple[int, int, int, int, int]:\n    return tuple(test_list) + test_tup\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef add_lists(test_list: List[int], test_tup: Tuple[int, int]) -> Tuple[int, int, int, int, int]:\n    return tuple(test_list) + test_tup\n```"], "prompt_tokens": [102], "completion_tokens": [52], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_106_add_lists"}
{"name": "mbpp_108_merge_sorted_list", "language": "Python3", "prompt": "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to merge three lists into a single sorted list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "merge_sorted_list", "test": "def check(candidate):\n    \n    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n\ndef test_check():\n    check(merge_sorted_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\nimport heapq\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    # Merge the three lists and then sort the resulting list\n    merged_list = num1 + num2 + num3\n    heapq.heapify(merged_list)\n    sorted_list = [heapq.heappop(merged_list) for _ in range(len(merged_list))]\n    return sorted_list\n\n\n"], "responses": ["```python\nfrom typing import List\nimport heapq\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    # Merge the three lists and then sort the resulting list\n    merged_list = num1 + num2 + num3\n    heapq.heapify(merged_list)\n    sorted_list = [heapq.heappop(merged_list) for _ in range(len(merged_list))]\n    return sorted_list\n```"], "prompt_tokens": [96], "completion_tokens": [100], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_108_merge_sorted_list"}
{"name": "mbpp_109_odd_Equivalent", "language": "Python3", "prompt": "def odd_Equivalent(s: str, n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_109_odd_Equivalent.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_Equivalent", "test": "def check(candidate):\n    \n    assert candidate('11011', 5)==4\n    assert candidate('1010', 4)==2\n\ndef test_check():\n    check(odd_Equivalent)\n\ntest_check()\n", "source_codes": ["\ndef odd_Equivalent(s: str, n: int) -> int:\n    # Convert the binary string to an integer\n    num = int(s, 2)\n    length = len(s)\n    odd_count = 0\n\n    # Perform the rotations and count the odd results\n    for _ in range(n):\n        # Rotate the number by shifting it left by 1 and moving the leftmost bit to the rightmost position\n        num = (num << 1) | (num >> (length - 1))\n        # Mask the number to maintain the same length as the original binary string\n        num &= (1 << length) - 1\n        # Check if the result is odd\n        if num % 2 == 1:\n            odd_count += 1\n\n    return odd_count\n\n\n"], "responses": ["```python\ndef odd_Equivalent(s: str, n: int) -> int:\n    # Convert the binary string to an integer\n    num = int(s, 2)\n    length = len(s)\n    odd_count = 0\n\n    # Perform the rotations and count the odd results\n    for _ in range(n):\n        # Rotate the number by shifting it left by 1 and moving the leftmost bit to the rightmost position\n        num = (num << 1) | (num >> (length - 1))\n        # Mask the number to maintain the same length as the original binary string\n        num &= (1 << length) - 1\n        # Check if the result is odd\n        if num % 2 == 1:\n            odd_count += 1\n\n    return odd_count\n```"], "prompt_tokens": [93], "completion_tokens": [172], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_109_odd_Equivalent"}
{"name": "mbpp_113_check_integer", "language": "Python3", "prompt": "def check_integer(text: str) -> bool:\n    \"\"\"\n\tWrite a function to check if a string represents an integer or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_integer", "test": "def check(candidate):\n    \n    assert candidate('1')==True\n    assert candidate('12345')==True\n\ndef test_check():\n    check(check_integer)\n\ntest_check()\n", "source_codes": ["\ndef check_integer(text: str) -> bool:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n\n"], "responses": ["```\ndef check_integer(text: str) -> bool:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n```"], "prompt_tokens": [76], "completion_tokens": [32], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_113_check_integer"}
{"name": "mbpp_116_tuple_to_int", "language": "Python3", "prompt": "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, int, int]) -> int:\n    \"\"\"\n\tWrite a function to convert a given tuple of positive integers into a single integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tuple_to_int", "test": "def check(candidate):\n    \n    assert candidate((4, 5, 6))==456\n    assert candidate((5, 6, 7))==567\n\ndef test_check():\n    check(tuple_to_int)\n\ntest_check()\n", "source_codes": ["\ndef tuple_to_int(nums: Tuple[int, int, int]) -> int:\n    return int(''.join(map(str, nums)))\n\n\n"], "responses": ["```python\ndef tuple_to_int(nums: Tuple[int, int, int]) -> int:\n    return int(''.join(map(str, nums)))\n```"], "prompt_tokens": [89], "completion_tokens": [31], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_116_tuple_to_int"}
{"name": "mbpp_117_list_to_float", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef list_to_float(test_list: List[Tuple[str, str]]) -> List[Tuple[float, float]]:\n    \"\"\"\n\tWrite a function to convert all possible convertible elements in a list of lists to floats.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "list_to_float", "test": "def check(candidate):\n    \n    assert candidate([('4', '4'), ('2', '27'), ('4.12', '9'), ('7', '11')])==[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\n    assert candidate([('6', '78'), ('5', '26.45'), ('1.33', '4'), ('82', '13')])==[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\n\ndef test_check():\n    check(list_to_float)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef list_to_float(test_list: List[Tuple[str, str]]) -> List[Tuple[float, float]]:\n    result = []\n    for item in test_list:\n        try:\n            # Attempt to convert both elements of the tuple to float\n            float_tuple = (float(item[0]), float(item[1]))\n            result.append(float_tuple)\n        except ValueError:\n            # If conversion fails, skip the tuple\n            continue\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef list_to_float(test_list: List[Tuple[str, str]]) -> List[Tuple[float, float]]:\n    result = []\n    for item in test_list:\n        try:\n            # Attempt to convert both elements of the tuple to float\n            float_tuple = (float(item[0]), float(item[1]))\n            result.append(float_tuple)\n        except ValueError:\n            # If conversion fails, skip the tuple\n            continue\n    return result\n```"], "prompt_tokens": [98], "completion_tokens": [102], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_117_list_to_float"}
{"name": "mbpp_118_string_to_list", "language": "Python3", "prompt": "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    \"\"\"\n\tWrite a function to convert a string to a list of strings split on the space character.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "string_to_list", "test": "def check(candidate):\n    \n    assert candidate('lists tuples strings')==['lists', 'tuples', 'strings']\n    assert candidate('write a program')==['write', 'a', 'program']\n\ndef test_check():\n    check(string_to_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')\n```"], "prompt_tokens": [87], "completion_tokens": [27], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_118_string_to_list"}
{"name": "mbpp_119_search", "language": "Python3", "prompt": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "search", "test": "def check(candidate):\n    \n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8])==8\n    assert candidate([1, 2, 2, 3, 3, 4, 4])==1\n\ndef test_check():\n    check(search)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        # Check if the mid is at the even index and the next element is the same\n        if mid % 2 == 0:\n            if mid + 1 < len(arr) and arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        # Check if the mid is at the odd index and the previous element is the same\n        else:\n            if mid - 1 >= 0 and arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return arr[left]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        # Check if the mid is at the even index and the next element is the same\n        if mid % 2 == 0:\n            if mid + 1 < len(arr) and arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        # Check if the mid is at the odd index and the previous element is the same\n        else:\n            if mid - 1 >= 0 and arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid - 1\n    return arr[left]\n```"], "prompt_tokens": [84], "completion_tokens": [186], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_119_search"}
{"name": "mbpp_120_max_product_tuple", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_product_tuple", "test": "def check(candidate):\n    \n    assert candidate([(10, 20), (15, 2), (5, 10)])==200\n    assert candidate([(11, 44), (10, 15), (20, 5), (12, 9)])==484\n\ndef test_check():\n    check(max_product_tuple)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = float('-inf')\n    for pair in list1:\n        product = abs(pair[0] * pair[1])\n        if product > max_product:\n            max_product = product\n    return max_product\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = float('-inf')\n    for pair in list1:\n        product = abs(pair[0] * pair[1])\n        if product > max_product:\n            max_product = product\n    return max_product\n```"], "prompt_tokens": [96], "completion_tokens": [74], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_120_max_product_tuple"}
{"name": "mbpp_123_amicable_numbers_sum", "language": "Python3", "prompt": "def amicable_numbers_sum(limit: int) -> int:\n    \"\"\"\n\tWrite a function to sum all amicable numbers from 1 to a specified number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "amicable_numbers_sum", "test": "def check(candidate):\n    \n    assert candidate(9999)==31626\n    assert candidate(99)==0\n\ndef test_check():\n    check(amicable_numbers_sum)\n\ntest_check()\n", "source_codes": ["\ndef sum_of_divisors(n):\n    total = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for num in range(2, limit):\n        partner = sum_of_divisors(num)\n        if partner > num and sum_of_divisors(partner) == num:\n            amicable_sum += num + partner\n    return amicable_sum\n\n# Example usage:\n# print(amicable_numbers_sum(10000))\n\n\n"], "responses": ["```python\ndef sum_of_divisors(n):\n    total = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\ndef amicable_numbers_sum(limit):\n    amicable_sum = 0\n    for num in range(2, limit):\n        partner = sum_of_divisors(num)\n        if partner > num and sum_of_divisors(partner) == num:\n            amicable_sum += num + partner\n    return amicable_sum\n\n# Example usage:\n# print(amicable_numbers_sum(10000))\n```"], "prompt_tokens": [81], "completion_tokens": [149], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_123_amicable_numbers_sum"}
{"name": "mbpp_125_find_length", "language": "Python3", "prompt": "def find_length(string: str) -> int:\n    \"\"\"\n\tWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_length", "test": "def check(candidate):\n    \n    assert candidate('10111')==1\n    assert candidate('11011101100101')==2\n\ndef test_check():\n    check(find_length)\n\ntest_check()\n", "source_codes": ["\ndef find_length(string: str) -> int:\n    max_diff = 0\n    count = 0  # This will count the difference between 0's and 1's\n\n    for char in string:\n        if char == '0':\n            count += 1\n        else:\n            count -= 1\n\n        # If count becomes negative, reset it to zero\n        if count < 0:\n            count = 0\n\n        # Update max_diff if count is greater than max_diff\n        max_diff = max(max_diff, count)\n\n    # Reset count for the case where there are more 1's than 0's\n    count = 0\n    for char in string:\n        if char == '1':\n            count += 1\n        else:\n            count -= 1\n\n        # If count becomes negative, reset it to zero\n        if count < 0:\n            count = 0\n\n        # Update max_diff if count is greater than max_diff\n        max_diff = max(max_diff, count)\n\n    return max_diff\n\n\n"], "responses": ["```python\ndef find_length(string: str) -> int:\n    max_diff = 0\n    count = 0  # This will count the difference between 0's and 1's\n\n    for char in string:\n        if char == '0':\n            count += 1\n        else:\n            count -= 1\n\n        # If count becomes negative, reset it to zero\n        if count < 0:\n            count = 0\n\n        # Update max_diff if count is greater than max_diff\n        max_diff = max(max_diff, count)\n\n    # Reset count for the case where there are more 1's than 0's\n    count = 0\n    for char in string:\n        if char == '1':\n            count += 1\n        else:\n            count -= 1\n\n        # If count becomes negative, reset it to zero\n        if count < 0:\n            count = 0\n\n        # Update max_diff if count is greater than max_diff\n        max_diff = max(max_diff, count)\n\n    return max_diff\n```"], "prompt_tokens": [93], "completion_tokens": [224], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_125_find_length"}
{"name": "mbpp_126_sum", "language": "Python3", "prompt": "def sum(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of common divisors of two given numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum", "test": "def check(candidate):\n    \n    assert candidate(100, 150)==93\n    assert candidate(4, 6)==3\n\ndef test_check():\n    check(sum)\n\ntest_check()\n", "source_codes": ["\ndef sum_common_divisors(a: int, b: int) -> int:\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def sum_divisors(n):\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n\n    common_gcd = gcd(a, b)\n    return sum_divisors(common_gcd)\n\n\n"], "responses": ["```python\ndef sum_common_divisors(a: int, b: int) -> int:\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def sum_divisors(n):\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n\n    common_gcd = gcd(a, b)\n    return sum_divisors(common_gcd)\n```"], "prompt_tokens": [82], "completion_tokens": [109], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_126_sum"}
{"name": "mbpp_127_multiply_int", "language": "Python3", "prompt": "def multiply_int(x: int, y: int) -> int:\n    \"\"\"\n\tWrite a function to multiply two integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "multiply_int", "test": "def check(candidate):\n    \n    assert candidate(5, 10)==50\n    assert candidate(4, 8)==32\n\ndef test_check():\n    check(multiply_int)\n\ntest_check()\n", "source_codes": ["\ndef multiply_int(x: int, y: int) -> int:\n    return x * y\n\n\n"], "responses": ["```\ndef multiply_int(x: int, y: int) -> int:\n    return x * y\n```"], "prompt_tokens": [74], "completion_tokens": [23], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_127_multiply_int"}
{"name": "mbpp_128_long_words", "language": "Python3", "prompt": "from typing import List\n\ndef long_words(n: int, str: str) -> List[str]:\n    \"\"\"\n\tWrite a function to find words that are longer than n characters from a given list of words.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "long_words", "test": "def check(candidate):\n    \n    assert candidate(2, 'writing a program')==['writing', 'program']\n    assert candidate(5, 'sorting list')==['sorting']\n\ndef test_check():\n    check(long_words)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef long_words(n: int, words: List[str]) -> List[str]:\n    return [word for word in words if len(word) > n]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef long_words(n: int, words: List[str]) -> List[str]:\n    return [word for word in words if len(word) > n]\n```"], "prompt_tokens": [91], "completion_tokens": [40], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_128_long_words"}
{"name": "mbpp_129_magic_square_test", "language": "Python3", "prompt": "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    \"\"\"\n\tWrite a function to calculate whether the matrix is a magic square.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "magic_square_test", "test": "def check(candidate):\n    \n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False\n\ndef test_check():\n    check(magic_square_test)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if n == 0 or any(len(row) != n for row in my_matrix):\n        return False  # Not a square matrix\n\n    # Calculate the sum of the first row to set as the magic constant\n    magic_constant = sum(my_matrix[0])\n\n    # Check the sum of each row\n    for row in my_matrix:\n        if sum(row) != magic_constant:\n            return False\n\n    # Check the sum of each column\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != magic_constant:\n            return False\n\n    # Check the sum of the main diagonal\n    if sum(my_matrix[i][i] for i in range(n)) != magic_constant:\n        return False\n\n    # Check the sum of the secondary diagonal\n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != magic_constant:\n        return False\n\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if n == 0 or any(len(row) != n for row in my_matrix):\n        return False  # Not a square matrix\n\n    # Calculate the sum of the first row to set as the magic constant\n    magic_constant = sum(my_matrix[0])\n\n    # Check the sum of each row\n    for row in my_matrix:\n        if sum(row) != magic_constant:\n            return False\n\n    # Check the sum of each column\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != magic_constant:\n            return False\n\n    # Check the sum of the main diagonal\n    if sum(my_matrix[i][i] for i in range(n)) != magic_constant:\n        return False\n\n    # Check the sum of the secondary diagonal\n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != magic_constant:\n        return False\n\n    return True\n```"], "prompt_tokens": [84], "completion_tokens": [228], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_129_magic_square_test"}
{"name": "mbpp_130_max_occurrences", "language": "Python3", "prompt": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_occurrences", "test": "def check(candidate):\n    \n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18])==8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10])==20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    count = Counter(nums)\n    return max(count.values())\n\n\n"], "responses": ["```python\nfrom typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    count = Counter(nums)\n    return max(count.values())\n```"], "prompt_tokens": [84], "completion_tokens": [48], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_130_max_occurrences"}
{"name": "mbpp_131_reverse_vowels", "language": "Python3", "prompt": "def reverse_vowels(str1: str) -> str:\n    \"\"\"\n\tWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "reverse_vowels", "test": "def check(candidate):\n    \n    assert candidate('USA')=='ASU'\n    assert candidate('ab')=='ab'\n\ndef test_check():\n    check(reverse_vowels)\n\ntest_check()\n", "source_codes": ["\ndef reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    i, j = 0, len(str_list) - 1\n\n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i, j = i + 1, j - 1\n\n    return ''.join(str_list)\n\n\n"], "responses": ["```python\ndef reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    i, j = 0, len(str_list) - 1\n\n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = str_list[j], str_list[i]\n            i, j = i + 1, j - 1\n\n    return ''.join(str_list)\n```"], "prompt_tokens": [86], "completion_tokens": [132], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_131_reverse_vowels"}
{"name": "mbpp_132_tup_string", "language": "Python3", "prompt": "from typing import List\n\ndef tup_string(tup1: List[str]) -> str:\n    \"\"\"\n\tWrite a function to convert a list to a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_132_tup_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tup_string", "test": "def check(candidate):\n    \n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'])=='python'\n    assert candidate(['p', 'r', 'o', 'g', 'r', 'a', 'm'])=='program'\n\ndef test_check():\n    check(tup_string)\n\ntest_check()\n", "source_codes": ["\ndef tup_string(tup1: List[str]) -> str:\n    return ''.join(tup1)\n\n\n"], "responses": ["```python\ndef tup_string(tup1: List[str]) -> str:\n    return ''.join(tup1)\n```"], "prompt_tokens": [81], "completion_tokens": [25], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_132_tup_string"}
{"name": "mbpp_133_sum_negativenum", "language": "Python3", "prompt": "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_negativenum", "test": "def check(candidate):\n    \n    assert candidate([10, 15, -14, 13, -18, 12, -20])==-52\n    assert candidate([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])==-894\n\ndef test_check():\n    check(sum_negativenum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum(filter(lambda x: x < 0, nums))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum(filter(lambda x: x < 0, nums))\n```"], "prompt_tokens": [89], "completion_tokens": [37], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_133_sum_negativenum"}
{"name": "mbpp_135_hexagonal_num", "language": "Python3", "prompt": "def hexagonal_num(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth hexagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "hexagonal_num", "test": "def check(candidate):\n    \n    assert candidate(5)==45\n    assert candidate(7)==91\n\ndef test_check():\n    check(hexagonal_num)\n\ntest_check()\n", "source_codes": ["\ndef hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)\n\n\n"], "responses": ["```\ndef hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)\n```"], "prompt_tokens": [74], "completion_tokens": [26], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_135_hexagonal_num"}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "Python3", "prompt": "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Sum_Of_Powers_Of_Two", "test": "def check(candidate):\n    \n    assert candidate(7)==False\n    assert candidate(14)==True\n\ndef test_check():\n    check(is_Sum_Of_Powers_Of_Two)\n\ntest_check()\n", "source_codes": ["\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    # If n is less than or equal to 0, it cannot be represented as a sum of non-zero powers of 2\n    if n <= 0:\n        return False\n    # Check if n is a power of 2 or a sum of distinct powers of 2\n    # This works because in binary representation, a power of 2 has only one '1'\n    # and a sum of distinct powers of 2 will have '1's at distinct places.\n    return (n & (n - 1)) == 0\n\n\n"], "responses": ["```python\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    # If n is less than or equal to 0, it cannot be represented as a sum of non-zero powers of 2\n    if n <= 0:\n        return False\n    # Check if n is a power of 2 or a sum of distinct powers of 2\n    # This works because in binary representation, a power of 2 has only one '1'\n    # and a sum of distinct powers of 2 will have '1's at distinct places.\n    return (n & (n - 1)) == 0\n```"], "prompt_tokens": [93], "completion_tokens": [135], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_138_is_Sum_Of_Powers_Of_Two"}
{"name": "mbpp_141_pancake_sort", "language": "Python3", "prompt": "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a list of elements.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pancake_sort", "test": "def check(candidate):\n    \n    assert candidate([98, 12, 54, 36, 85])==[12, 36, 54, 85, 98]\n    assert candidate([41, 42, 32, 12, 23])==[12, 23, 32, 41, 42]\n\ndef test_check():\n    check(pancake_sort)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef flip(nums: List[int], k: int):\n    i = 0\n    while i < k // 2:\n        nums[i], nums[k - i - 1] = nums[k - i - 1], nums[i]\n        i += 1\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    n = len(nums)\n    for size in range(n, 1, -1):\n        # Find the index of the maximum number in the sublist\n        max_index = nums.index(max(nums[:size]))\n        # Bring the maximum number to the front if it's not already there\n        if max_index != size - 1:\n            # Flip the maximum number to the front\n            if max_index != 0:\n                flip(nums, max_index + 1)\n            # Flip it to its correct position\n            flip(nums, size)\n    return nums\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef flip(nums: List[int], k: int):\n    i = 0\n    while i < k // 2:\n        nums[i], nums[k - i - 1] = nums[k - i - 1], nums[i]\n        i += 1\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    n = len(nums)\n    for size in range(n, 1, -1):\n        # Find the index of the maximum number in the sublist\n        max_index = nums.index(max(nums[:size]))\n        # Bring the maximum number to the front if it's not already there\n        if max_index != size - 1:\n            # Flip the maximum number to the front\n            if max_index != 0:\n                flip(nums, max_index + 1)\n            # Flip it to its correct position\n            flip(nums, size)\n    return nums\n```"], "prompt_tokens": [80], "completion_tokens": [194], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_141_pancake_sort"}
{"name": "mbpp_142_count_samepair", "language": "Python3", "prompt": "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    \"\"\"\n\tWrite a function to count number items that are identical in the same position of three given lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_samepair", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])==4\n    assert candidate([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])==5\n\ndef test_check():\n    check(count_samepair)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum(1 for a, b, c in zip(list1, list2, list3) if a == b == c)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum(1 for a, b, c in zip(list1, list2, list3) if a == b == c)\n```"], "prompt_tokens": [101], "completion_tokens": [63], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_142_count_samepair"}
{"name": "mbpp_143_find_lists", "language": "Python3", "prompt": "from typing import List, Any\n\ndef find_lists(Input: List[Any]) -> int:\n    \"\"\"\n\tWrite a function to find number of lists present in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_143_find_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_lists", "test": "def check(candidate):\n    \n    assert candidate([[1, 2], [3, 4], [5, 6]])==3\n    assert candidate([9, 8, 7, 6, 5, 4, 3, 2, 1])==1\n\ndef test_check():\n    check(find_lists)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef find_lists(Input: List[Any]) -> int:\n    return sum(isinstance(item, list) for item in Input)\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef find_lists(Input: List[Any]) -> int:\n    return sum(isinstance(item, list) for item in Input)\n```"], "prompt_tokens": [84], "completion_tokens": [35], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_143_find_lists"}
{"name": "mbpp_145_max_Abs_Diff", "language": "Python3", "prompt": "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the maximum difference between any two elements in a given array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_145_max_Abs_Diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_Abs_Diff", "test": "def check(candidate):\n    \n    assert candidate([9, 3, 2, 5, 1])==8\n    assert candidate([3, 2, 1])==2\n\ndef test_check():\n    check(max_Abs_Diff)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    max_val = max(arr)\n    min_val = min(arr)\n    return max_val - min_val\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    max_val = max(arr)\n    min_val = min(arr)\n    return max_val - min_val\n```"], "prompt_tokens": [89], "completion_tokens": [45], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_145_max_Abs_Diff"}
{"name": "mbpp_160_find_solution", "language": "Python3", "prompt": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_solution", "test": "def check(candidate):\n    \n    assert candidate(4, 2, 7)==None\n    assert candidate(1, 13, 17)==(4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Optional, Tuple\nfrom math import gcd\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    # Check if there is a solution using the gcd of a and b\n    if n % gcd(a, b) != 0:\n        return None\n\n    # Extended Euclidean Algorithm to find one solution (x0, y0)\n    def extended_gcd(aa: int, bb: int) -> Tuple[int, int, int]:\n        if aa == 0:\n            return (bb, 0, 1)\n        else:\n            g, x, y = extended_gcd(bb % aa, aa)\n            return (g, y - (bb // aa) * x, x)\n\n    g, x0, y0 = extended_gcd(a, b)\n\n    # Scale the solution to satisfy the equation ax + by = n\n    factor = n // g\n    x = x0 * factor\n    y = y0 * factor\n\n    return (x, y)\n\n# Example usage:\n# print(find_solution(3, 5, 8))  # Output could be (1, 1) since 3*1 + 5*1 = 8\n\n\n"], "responses": ["```python\nfrom typing import Optional, Tuple\nfrom math import gcd\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    # Check if there is a solution using the gcd of a and b\n    if n % gcd(a, b) != 0:\n        return None\n\n    # Extended Euclidean Algorithm to find one solution (x0, y0)\n    def extended_gcd(aa: int, bb: int) -> Tuple[int, int, int]:\n        if aa == 0:\n            return (bb, 0, 1)\n        else:\n            g, x, y = extended_gcd(bb % aa, aa)\n            return (g, y - (bb // aa) * x, x)\n\n    g, x0, y0 = extended_gcd(a, b)\n\n    # Scale the solution to satisfy the equation ax + by = n\n    factor = n // g\n    x = x0 * factor\n    y = y0 * factor\n\n    return (x, y)\n\n# Example usage:\n# print(find_solution(3, 5, 8))  # Output could be (1, 1) since 3*1 + 5*1 = 8\n```"], "prompt_tokens": [110], "completion_tokens": [267], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_160_find_solution"}
{"name": "mbpp_161_remove_elements", "language": "Python3", "prompt": "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to remove all elements from a given list present in another list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_elements", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7])==[1, 2, 3, 4, 6, 8, 9, 10]\n\ndef test_check():\n    check(remove_elements)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [element for element in list1 if element not in list2]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [element for element in list1 if element not in list2]\n```"], "prompt_tokens": [92], "completion_tokens": [44], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_161_remove_elements"}
{"name": "mbpp_162_sum_series", "language": "Python3", "prompt": "def sum_series(n: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_162_sum_series.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_series", "test": "def check(candidate):\n    \n    assert candidate(10)==30\n    assert candidate(9)==25\n\ndef test_check():\n    check(sum_series)\n\ntest_check()\n", "source_codes": ["\ndef sum_series(n: int) -> int:\n    return sum(n - 2*i for i in range(n // 2 + 1))\n\n\n"], "responses": ["```python\ndef sum_series(n: int) -> int:\n    return sum(n - 2*i for i in range(n // 2 + 1))\n```"], "prompt_tokens": [110], "completion_tokens": [34], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_162_sum_series"}
{"name": "mbpp_164_are_equivalent", "language": "Python3", "prompt": "def are_equivalent(num1: int, num2: int) -> bool:\n    \"\"\"\n\tWrite a function to determine if the sum of the divisors of two integers are the same.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "are_equivalent", "test": "def check(candidate):\n    \n    assert candidate(2, 4)==False\n    assert candidate(23, 47)==True\n\ndef test_check():\n    check(are_equivalent)\n\ntest_check()\n", "source_codes": ["\ndef sum_of_divisors(num: int) -> int:\n    sum_divisors = 1 + num\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            sum_divisors += i\n            if i != num // i:\n                sum_divisors += num // i\n    return sum_divisors\n\ndef are_equivalent(num1: int, num2: int) -> bool:\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n\n\n"], "responses": ["```python\ndef sum_of_divisors(num: int) -> int:\n    sum_divisors = 1 + num\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            sum_divisors += i\n            if i != num // i:\n                sum_divisors += num // i\n    return sum_divisors\n\ndef are_equivalent(num1: int, num2: int) -> bool:\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n```"], "prompt_tokens": [88], "completion_tokens": [118], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_164_are_equivalent"}
{"name": "mbpp_165_count_char_position", "language": "Python3", "prompt": "def count_char_position(str1: str) -> int:\n    \"\"\"\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_char_position", "test": "def check(candidate):\n    \n    assert candidate('ABcED')==3\n    assert candidate('AbgdeF')==5\n\ndef test_check():\n    check(count_char_position)\n\ntest_check()\n", "source_codes": ["\ndef count_char_position(str1: str) -> int:\n    count = 0\n    for index, char in enumerate(str1.lower()):\n        if ord(char) - 96 == index + 1:\n            count += 1\n    return count\n\n\n"], "responses": ["```python\ndef count_char_position(str1: str) -> int:\n    count = 0\n    for index, char in enumerate(str1.lower()):\n        if ord(char) - 96 == index + 1:\n            count += 1\n    return count\n```"], "prompt_tokens": [94], "completion_tokens": [57], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_165_count_char_position"}
{"name": "mbpp_166_find_even_pair", "language": "Python3", "prompt": "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    \"\"\"\n\tWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_even_pair", "test": "def check(candidate):\n    \n    assert candidate([7, 2, 8, 1, 0, 5, 11])==9\n    assert candidate([1, 2, 3])==1\n\ndef test_check():\n    check(find_even_pair)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    even_count = 0\n    odd_count = 0\n    \n    # Count even and odd numbers\n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Calculate pairs\n    # Even XOR Even = Even, Odd XOR Odd = Even\n    even_pairs = (even_count * (even_count - 1) // 2) + (odd_count * (odd_count - 1) // 2)\n    \n    return even_pairs\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    even_count = 0\n    odd_count = 0\n    \n    # Count even and odd numbers\n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # Calculate pairs\n    # Even XOR Even = Even, Odd XOR Odd = Even\n    even_pairs = (even_count * (even_count - 1) // 2) + (odd_count * (odd_count - 1) // 2)\n    \n    return even_pairs\n```"], "prompt_tokens": [90], "completion_tokens": [136], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_166_find_even_pair"}
{"name": "mbpp_167_next_power_of_2", "language": "Python3", "prompt": "def next_power_of_2(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the smallest power of 2 greater than or equal to n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "next_power_of_2", "test": "def check(candidate):\n    \n    assert candidate(5)==8\n    assert candidate(17)==32\n\ndef test_check():\n    check(next_power_of_2)\n\ntest_check()\n", "source_codes": ["\ndef next_power_of_2(n: int) -> int:\n    # If n is already a power of 2, return n\n    if n and not (n & (n - 1)):\n        return n\n    \n    power = 1\n    while power < n:\n        power <<= 1\n    return power\n\n\n"], "responses": ["```python\ndef next_power_of_2(n: int) -> int:\n    # If n is already a power of 2, return n\n    if n and not (n & (n - 1)):\n        return n\n    \n    power = 1\n    while power < n:\n        power <<= 1\n    return power\n```"], "prompt_tokens": [84], "completion_tokens": [72], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_167_next_power_of_2"}
{"name": "mbpp_168_frequency", "language": "Python3", "prompt": "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to count the number of occurrences of a number in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "frequency", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 2, 3, 3, 3, 4], 3)==3\n    assert candidate([0, 1, 2, 3, 1, 2], 1)==2\n\ndef test_check():\n    check(frequency)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)\n```"], "prompt_tokens": [88], "completion_tokens": [29], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_168_frequency"}
{"name": "mbpp_170_sum_range_list", "language": "Python3", "prompt": "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    \"\"\"\n\tWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_range_list", "test": "def check(candidate):\n    \n    assert candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7)==16\n    assert candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10)==38\n\ndef test_check():\n    check(sum_range_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    if m < 0 or n >= len(list1) or m > n:\n        raise ValueError(\"Invalid range for the given list.\")\n    return sum(list1[m:n+1])\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    if m < 0 or n >= len(list1) or m > n:\n        raise ValueError(\"Invalid range for the given list.\")\n    return sum(list1[m:n+1])\n```"], "prompt_tokens": [98], "completion_tokens": [69], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_170_sum_range_list"}
{"name": "mbpp_171_perimeter_pentagon", "language": "Python3", "prompt": "def perimeter_pentagon(a: int) -> int:\n    \"\"\"\n\tWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "perimeter_pentagon", "test": "def check(candidate):\n    \n    assert candidate(10)==50\n    assert candidate(15)==75\n\ndef test_check():\n    check(perimeter_pentagon)\n\ntest_check()\n", "source_codes": ["\ndef perimeter_pentagon(a: int) -> int:\n    return 5 * a\n\n\n"], "responses": ["```python\ndef perimeter_pentagon(a: int) -> int:\n    return 5 * a\n```"], "prompt_tokens": [83], "completion_tokens": [23], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_171_perimeter_pentagon"}
{"name": "mbpp_172_count_occurance", "language": "Python3", "prompt": "def count_occurance(s: str) -> int:\n    \"\"\"\n\tWrite a function to count the number of occurence of the string 'std' in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_occurance", "test": "def check(candidate):\n    \n    assert candidate('truststdsolensporsd')==1\n    assert candidate('makestdsostdworthit')==2\n    assert candidate('stds')==1\n    assert candidate('')==0\n\ndef test_check():\n    check(count_occurance)\n\ntest_check()\n", "source_codes": ["\ndef count_occurance(s: str) -> int:\n    \"\"\"\n    Write a function to count the number of occurrence of the string 'std' in a given string.\n    \"\"\"\n    return s.count('std')\n\n\n"], "responses": ["```python\ndef count_occurance(s: str) -> int:\n    \"\"\"\n    Write a function to count the number of occurrence of the string 'std' in a given string.\n    \"\"\"\n    return s.count('std')\n```"], "prompt_tokens": [85], "completion_tokens": [48], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_172_count_occurance"}
{"name": "mbpp_222_check_type", "language": "Python3", "prompt": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_type", "test": "def check(candidate):\n    \n    assert candidate((1, 2, '4'))==False\n    assert candidate((3, 2, 1, 4, 5))==True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Any, Tuple\n\ndef check_type(test_tuple: Tuple[Any, ...]) -> bool:\n    if not test_tuple:  # Empty tuple case\n        return True\n    first_type = type(test_tuple[0])\n    return all(type(element) == first_type for element in test_tuple)\n\n\n"], "responses": ["```python\nfrom typing import Any, Tuple\n\ndef check_type(test_tuple: Tuple[Any, ...]) -> bool:\n    if not test_tuple:  # Empty tuple case\n        return True\n    first_type = type(test_tuple[0])\n    return all(type(element) == first_type for element in test_tuple)\n```"], "prompt_tokens": [86], "completion_tokens": [66], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_222_check_type"}
{"name": "mbpp_223_is_majority", "language": "Python3", "prompt": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_majority", "test": "def check(candidate):\n    \n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)==False\n    assert candidate([1, 1, 1, 2, 2], 5, 1)==True\n    assert candidate([1, 1, 2, 2], 5, 1)==False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = arr.count(x)\n    return count > n // 2\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = arr.count(x)\n    return count > n // 2\n```"], "prompt_tokens": [126], "completion_tokens": [45], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_223_is_majority"}
{"name": "mbpp_224_count_Set_Bits", "language": "Python3", "prompt": "def count_Set_Bits(n: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Set_Bits", "test": "def check(candidate):\n    \n    assert candidate(4)==1\n    assert candidate(6)==2\n\ndef test_check():\n    check(count_Set_Bits)\n\ntest_check()\n", "source_codes": ["\ndef count_Set_Bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n\n"], "responses": ["```python\ndef count_Set_Bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n```"], "prompt_tokens": [88], "completion_tokens": [44], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_224_count_Set_Bits"}
{"name": "mbpp_226_odd_values_string", "language": "Python3", "prompt": "def odd_values_string(str: str) -> str:\n    \"\"\"\n\tWrite a python function to remove the characters which have odd index values of a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_values_string", "test": "def check(candidate):\n    \n    assert candidate('python')=='pto'\n    assert candidate('data')=='dt'\n    assert candidate('lambs')=='lms'\n\ndef test_check():\n    check(odd_values_string)\n\ntest_check()\n", "source_codes": ["\ndef odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n\n\n"], "responses": ["```\ndef odd_values_string(str):\n    result = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            result += str[i]\n    return result\n```"], "prompt_tokens": [81], "completion_tokens": [41], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_226_odd_values_string"}
{"name": "mbpp_227_min_of_three", "language": "Python3", "prompt": "def min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n\tWrite a function to find minimum of three numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_of_three", "test": "def check(candidate):\n    \n    assert candidate(19, 15, 18)==15\n    assert candidate(-10, -20, -30)==-30\n\ndef test_check():\n    check(min_of_three)\n\ntest_check()\n", "source_codes": ["\ndef min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)\n\n\n"], "responses": ["```\ndef min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)\n```"], "prompt_tokens": [81], "completion_tokens": [31], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_227_min_of_three"}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "Python3", "prompt": "def all_Bits_Set_In_The_Given_Range(n: int, l: int, r: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether all the bits are unset in the given range or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "all_Bits_Set_In_The_Given_Range", "test": "def check(candidate):\n    \n    assert candidate(17, 2, 4)==True\n    assert candidate(39, 4, 6)==False\n\ndef test_check():\n    check(all_Bits_Set_In_The_Given_Range)\n\ntest_check()\n", "source_codes": ["\ndef all_Bits_Set_In_The_Given_Range(n: int, l: int, r: int) -> bool:\n    # Create a mask with all bits set in the given range [l, r]\n    mask = (1 << (r - l + 1)) - 1\n    # Shift the mask to the correct position\n    mask <<= (l - 1)\n    # Use bitwise AND to check if all bits in the range are set in n\n    return (n & mask) == mask\n\n\n"], "responses": ["```python\ndef all_Bits_Set_In_The_Given_Range(n: int, l: int, r: int) -> bool:\n    # Create a mask with all bits set in the given range [l, r]\n    mask = (1 << (r - l + 1)) - 1\n    # Shift the mask to the correct position\n    mask <<= (l - 1)\n    # Use bitwise AND to check if all bits in the range are set in n\n    return (n & mask) == mask\n```"], "prompt_tokens": [98], "completion_tokens": [114], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_228_all_Bits_Set_In_The_Given_Range"}
{"name": "mbpp_229_re_arrange_array", "language": "Python3", "prompt": "from typing import List\n\ndef re_arrange_array(arr: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "re_arrange_array", "test": "def check(candidate):\n    \n    assert candidate([12, -14, -26, 13, 15], 5)==[-14, -26, 12, 13, 15]\n    assert candidate([10, 24, 36, -42, -39, -78, 85], 7)==[-42, -39, -78, 10, 24, 36, 85]\n\ndef test_check():\n    check(re_arrange_array)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef re_arrange_array(arr: List[int], n: int) -> List[int]:\n    negative_elements = [x for x in arr[:n] if x < 0]\n    non_negative_elements = [x for x in arr[:n] if x >= 0]\n    return negative_elements + non_negative_elements + arr[n:]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef re_arrange_array(arr: List[int], n: int) -> List[int]:\n    negative_elements = [x for x in arr[:n] if x < 0]\n    non_negative_elements = [x for x in arr[:n] if x >= 0]\n    return negative_elements + non_negative_elements + arr[n:]\n```"], "prompt_tokens": [124], "completion_tokens": [78], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_229_re_arrange_array"}
{"name": "mbpp_230_replace_blank", "language": "Python3", "prompt": "def replace_blank(str1: str, char: str) -> str:\n    \"\"\"\n\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_blank", "test": "def check(candidate):\n    \n    assert candidate('python program language', '$')=='python$program$language'\n    assert candidate('blank space', '-')=='blank-space'\n\ndef test_check():\n    check(replace_blank)\n\ntest_check()\n", "source_codes": ["\ndef replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)\n\n\n"], "responses": ["```\ndef replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)\n```"], "prompt_tokens": [93], "completion_tokens": [27], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_230_replace_blank"}
{"name": "mbpp_234_volume_cube", "language": "Python3", "prompt": "def volume_cube(l: int) -> int:\n    \"\"\"\n\tWrite a function to find the volume of a cube given its side length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "volume_cube", "test": "def check(candidate):\n    \n    assert candidate(2)==8\n    assert candidate(5)==125\n\ndef test_check():\n    check(volume_cube)\n\ntest_check()\n", "source_codes": ["\ndef volume_cube(l: int) -> int:\n    return l ** 3\n\n\n"], "responses": ["```\ndef volume_cube(l: int) -> int:\n    return l ** 3\n```"], "prompt_tokens": [77], "completion_tokens": [20], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_234_volume_cube"}
{"name": "mbpp_237_check_occurences", "language": "Python3", "prompt": "from typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    \"\"\"\n\tWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_occurences", "test": "def check(candidate):\n    \n    assert candidate([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)])=={ (2, 4): 2, (3, 6): 2, (4, 7): 1 }\n    assert candidate([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)])=={ (2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1 }\n\ndef test_check():\n    check(check_occurences)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    occurence_dict = {}\n    for tup in test_list:\n        if tup in occurence_dict:\n            occurence_dict[tup] += 1\n        else:\n            occurence_dict[tup] = 1\n    return occurence_dict\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    occurence_dict = {}\n    for tup in test_list:\n        if tup in occurence_dict:\n            occurence_dict[tup] += 1\n        else:\n            occurence_dict[tup] = 1\n    return occurence_dict\n```"], "prompt_tokens": [115], "completion_tokens": [90], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_237_check_occurences"}
{"name": "mbpp_238_number_of_substrings", "language": "Python3", "prompt": "def number_of_substrings(str: str) -> int:\n    \"\"\"\n\tWrite a python function to count the number of non-empty substrings of a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "number_of_substrings", "test": "def check(candidate):\n    \n    assert candidate('abcd')==10\n    assert candidate('abcde')==15\n\ndef test_check():\n    check(number_of_substrings)\n\ntest_check()\n", "source_codes": ["\ndef number_of_substrings(str: str) -> int:\n    n = len(str)\n    return n * (n + 1) // 2\n\n\n"], "responses": ["```python\ndef number_of_substrings(str: str) -> int:\n    n = len(str)\n    return n * (n + 1) // 2\n```"], "prompt_tokens": [82], "completion_tokens": [36], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_238_number_of_substrings"}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "Python3", "prompt": "def get_total_number_of_sequences(m: int, n: int) -> int:\n    \"\"\"\n\tWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_total_number_of_sequences", "test": "def check(candidate):\n    \n    assert candidate(5, 2)==6\n    assert candidate(16, 3)==84\n\ndef test_check():\n    check(get_total_number_of_sequences)\n\ntest_check()\n", "source_codes": ["\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n    # A recursive function to count the number of sequences\n    def count_sequences(m, n, prev):\n        # Base case: if length of the sequence is 0, return 1\n        if n == 0:\n            return 1\n        # Initialize count of sequences\n        count = 0\n        # Start from the previous element (or 1 if it's the first element)\n        # and iterate up to m\n        for i in range(prev, m + 1):\n            # For each i, count the sequences of length n-1\n            # where the next element is at least twice of i\n            count += count_sequences(m, n - 1, i * 2)\n        return count\n\n    # Start the recursion with prev = 1 (as the first element can be 1)\n    return count_sequences(m, n, 1)\n\n# Example usage:\n# print(get_total_number_of_sequences(5, 2))  # Output: 4\n\n\n"], "responses": ["```python\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n    # A recursive function to count the number of sequences\n    def count_sequences(m, n, prev):\n        # Base case: if length of the sequence is 0, return 1\n        if n == 0:\n            return 1\n        # Initialize count of sequences\n        count = 0\n        # Start from the previous element (or 1 if it's the first element)\n        # and iterate up to m\n        for i in range(prev, m + 1):\n            # For each i, count the sequences of length n-1\n            # where the next element is at least twice of i\n            count += count_sequences(m, n - 1, i * 2)\n        return count\n\n    # Start the recursion with prev = 1 (as the first element can be 1)\n    return count_sequences(m, n, 1)\n\n# Example usage:\n# print(get_total_number_of_sequences(5, 2))  # Output: 4\n```"], "prompt_tokens": [118], "completion_tokens": [228], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_239_get_total_number_of_sequences"}
{"name": "mbpp_240_replace_list", "language": "Python3", "prompt": "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    \"\"\"\n\tWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_240_replace_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_list", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5], [5, 6, 7, 8])==[1, 2, 3, 4, 5, 6, 7, 8]\n    assert candidate(['red', 'blue', 'green'], ['yellow'])==['red', 'blue', 'yellow']\n\ndef test_check():\n    check(replace_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    # Check if the first list is not empty\n    if list1:\n        # Remove the last element from the first list\n        list1.pop()\n        # Extend the first list with the elements of the second list\n        list1.extend(list2)\n    else:\n        # If the first list is empty, just copy the second list into it\n        list1.extend(list2)\n    return list1\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    # Check if the first list is not empty\n    if list1:\n        # Remove the last element from the first list\n        list1.pop()\n        # Extend the first list with the elements of the second list\n        list1.extend(list2)\n    else:\n        # If the first list is empty, just copy the second list into it\n        list1.extend(list2)\n    return list1\n```"], "prompt_tokens": [103], "completion_tokens": [115], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_240_replace_list"}
{"name": "mbpp_242_count_charac", "language": "Python3", "prompt": "def count_charac(str1: str) -> int:\n    \"\"\"\n\tWrite a function to count the total number of characters in a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_242_count_charac.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_charac", "test": "def check(candidate):\n    \n    assert candidate('language')==8\n    assert candidate('words')==5\n\ndef test_check():\n    check(count_charac)\n\ntest_check()\n", "source_codes": ["\ndef count_charac(str1: str) -> int:\n    return len(str1)\n\n\n"], "responses": ["```\ndef count_charac(str1: str) -> int:\n    return len(str1)\n```"], "prompt_tokens": [78], "completion_tokens": [21], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_242_count_charac"}
{"name": "mbpp_244_next_Perfect_Square", "language": "Python3", "prompt": "def next_Perfect_Square(N: int) -> int:\n    \"\"\"\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "next_Perfect_Square", "test": "def check(candidate):\n    \n    assert candidate(6)==9\n    assert candidate(9)==16\n\ndef test_check():\n    check(next_Perfect_Square)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.ceil(math.sqrt(N))\n    return root * root\n\n\n"], "responses": ["```python\nimport math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.ceil(math.sqrt(N))\n    return root * root\n```"], "prompt_tokens": [81], "completion_tokens": [35], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_244_next_Perfect_Square"}
{"name": "mbpp_245_max_sum", "language": "Python3", "prompt": "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sum", "test": "def check(candidate):\n    \n    assert candidate([80, 60, 30, 40, 20, 10])==210\n    assert candidate([2, 3, 14, 16, 21, 23, 29, 30])==138\n\ndef test_check():\n    check(max_sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize the dp arrays for increasing and decreasing sequences\n    inc = [0] * n\n    dec = [0] * n\n\n    # Fill increasing sequence array\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n\n    # Fill decreasing sequence array\n    for i in reversed(range(n)):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n\n    # Find the maximum sum of bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize the dp arrays for increasing and decreasing sequences\n    inc = [0] * n\n    dec = [0] * n\n\n    # Fill increasing sequence array\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n\n    # Fill decreasing sequence array\n    for i in reversed(range(n)):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n\n    # Find the maximum sum of bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum\n```"], "prompt_tokens": [106], "completion_tokens": [233], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_245_max_sum"}
{"name": "mbpp_247_lps", "language": "Python3", "prompt": "def lps(str: str) -> int:\n    \"\"\"\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lps", "test": "def check(candidate):\n    \n    assert candidate('CARDIO FOR CARDS')==7\n    assert candidate('PART OF THE JOURNEY IS PART')==9\n\ndef test_check():\n    check(lps)\n\ntest_check()\n", "source_codes": ["\ndef lps(str: str) -> int:\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # Strings of length 1 are palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process. The table is filled in a\n    # manner similar to Matrix Chain Multiplication DP solution (See\n    # https://www.geeksforgeeks.org/matrix-chain-multiplication-dp-8/).\n    # cl is the length of substring\n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    # length of longest palindromic subseq\n    return dp[0][n - 1]\n\n\n"], "responses": ["```python\ndef lps(str: str) -> int:\n    n = len(str)\n    dp = [[0 for x in range(n)] for y in range(n)]\n\n    # Strings of length 1 are palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Build the table. Note that the lower diagonal values of table are\n    # useless and not filled in the process. The table is filled in a\n    # manner similar to Matrix Chain Multiplication DP solution (See\n    # https://www.geeksforgeeks.org/matrix-chain-multiplication-dp-8/).\n    # cl is the length of substring\n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n\n    # length of longest palindromic subseq\n    return dp[0][n - 1]\n```"], "prompt_tokens": [83], "completion_tokens": [286], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_247_lps"}
{"name": "mbpp_249_intersection_array", "language": "Python3", "prompt": "from typing import List\n\ndef intersection_array(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find the intersection of two arrays.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "intersection_array", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9])==[3, 5, 7, 9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40])==[10]\n\ndef test_check():\n    check(intersection_array)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef intersection_array(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    # Convert the first list to a set to remove duplicates and for O(1) lookups\n    set_nums1 = set(array_nums1)\n    # Use set intersection to find common elements\n    intersection = set_nums1.intersection(array_nums2)\n    # Convert the set back to a list\n    return list(intersection)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef intersection_array(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    # Convert the first list to a set to remove duplicates and for O(1) lookups\n    set_nums1 = set(array_nums1)\n    # Use set intersection to find common elements\n    intersection = set_nums1.intersection(array_nums2)\n    # Convert the set back to a list\n    return list(intersection)\n```"], "prompt_tokens": [89], "completion_tokens": [98], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_249_intersection_array"}
{"name": "mbpp_250_count_X", "language": "Python3", "prompt": "from typing import List\n\ndef count_X(tup: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_X", "test": "def check(candidate):\n    \n    assert candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10)==3\n    assert candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8)==4\n\ndef test_check():\n    check(count_X)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef count_X(tup: List[int], x: int) -> int:\n    return tup.count(x)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_X(tup: List[int], x: int) -> int:\n    return tup.count(x)\n```"], "prompt_tokens": [99], "completion_tokens": [31], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_250_count_X"}
{"name": "mbpp_251_insert_element", "language": "Python3", "prompt": "from typing import List\n\ndef insert_element(list: List[str], element: str) -> List[str]:\n    \"\"\"\n\tWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "insert_element", "test": "def check(candidate):\n    \n    assert candidate(['python', 'java'], 'program')==['program', 'python', 'program', 'java']\n    assert candidate(['happy', 'sad'], 'laugh')==['laugh', 'happy', 'laugh', 'sad']\n\ndef test_check():\n    check(insert_element)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef insert_element(lst: List[str], element: str) -> List[str]:\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef insert_element(lst: List[str], element: str) -> List[str]:\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n```"], "prompt_tokens": [101], "completion_tokens": [49], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_251_insert_element"}
{"name": "mbpp_252_convert", "language": "Python3", "prompt": "from typing import Tuple\n\ndef convert(numbers: int) -> Tuple[float, float]:\n    \"\"\"\n\tWrite a python function to convert complex numbers to polar coordinates.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "convert", "test": "def check(candidate):\n    \n    assert candidate(4)==(4.0, 0.0)\n    assert candidate(5)==(5.0, 0.0)\n\ndef test_check():\n    check(convert)\n\ntest_check()\n", "source_codes": ["\nimport cmath\n\ndef convert(number: complex) -> Tuple[float, float]:\n    return cmath.polar(number)\n\n\n"], "responses": ["```python\nimport cmath\n\ndef convert(number: complex) -> Tuple[float, float]:\n    return cmath.polar(number)\n```"], "prompt_tokens": [81], "completion_tokens": [28], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_252_convert"}
{"name": "mbpp_253_count_integer", "language": "Python3", "prompt": "from typing import List, Union\n\ndef count_integer(list1: List[Union[int, str, float]]) -> int:\n    \"\"\"\n\tWrite a python function that returns the number of integer elements in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_253_count_integer.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_integer", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3])==3\n    assert candidate([1, 1.2, 4, 5.1])==2\n\ndef test_check():\n    check(count_integer)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Union\n\ndef count_integer(list1: List[Union[int, str, float]]) -> int:\n    return sum(isinstance(item, int) and not isinstance(item, bool) for item in list1)\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef count_integer(list1: List[Union[int, str, float]]) -> int:\n    return sum(isinstance(item, int) and not isinstance(item, bool) for item in list1)\n```"], "prompt_tokens": [93], "completion_tokens": [50], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_253_count_integer"}
{"name": "mbpp_255_combinations_colors", "language": "Python3", "prompt": "from typing import List\n\ndef combinations_colors(l: List[str], n: int) -> List[List[str]]:\n    \"\"\"\n\tWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "combinations_colors", "test": "def check(candidate):\n    \n    assert candidate(['Red', 'Green', 'Blue'], 2)==[['Red', 'Red'], ['Red', 'Green'], ['Red', 'Blue'], ['Green', 'Green'], ['Green', 'Blue'], ['Blue', 'Blue']]\n    assert candidate(['Red', 'Green', 'Blue'], 3)==[['Red', 'Red', 'Red'], ['Red', 'Red', 'Green'], ['Red', 'Red', 'Blue'], ['Red', 'Green', 'Green'], ['Red', 'Green', 'Blue'], ['Red', 'Blue', 'Blue'], ['Green', 'Green', 'Green'], ['Green', 'Green', 'Blue'], ['Green', 'Blue', 'Blue'], ['Blue', 'Blue', 'Blue']]\n\ndef test_check():\n    check(combinations_colors)\n\ntest_check()\n", "source_codes": ["\nfrom itertools import product\n\ndef combinations_colors(l: List[str], n: int) -> List[List[str]]:\n    return list(product(l, repeat=n))\n\n\n"], "responses": ["```python\nfrom itertools import product\n\ndef combinations_colors(l: List[str], n: int) -> List[List[str]]:\n    return list(product(l, repeat=n))\n```"], "prompt_tokens": [111], "completion_tokens": [35], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_255_combinations_colors"}
{"name": "mbpp_256_count_Primes_nums", "language": "Python3", "prompt": "def count_Primes_nums(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Primes_nums", "test": "def check(candidate):\n    \n    assert candidate(10)==4\n    assert candidate(100)==25\n\ndef test_check():\n    check(count_Primes_nums)\n\ntest_check()\n", "source_codes": ["\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n, i):\n                primes[j] = False\n    return sum(primes)\n\n\n"], "responses": ["```python\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i*i, n, i):\n                primes[j] = False\n    return sum(primes)\n```"], "prompt_tokens": [90], "completion_tokens": [100], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_256_count_Primes_nums"}
{"name": "mbpp_257_swap_numbers", "language": "Python3", "prompt": "from typing import List\n\ndef swap_numbers(a: int, b: int) -> List[int]:\n    \"\"\"\n\tWrite a function that takes in two numbers and returns a list with the second number and then the first number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "swap_numbers", "test": "def check(candidate):\n    \n    assert candidate(15, 17)==[17, 15]\n    assert candidate(100, 200)==[200, 100]\n\ndef test_check():\n    check(swap_numbers)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef swap_numbers(a: int, b: int) -> List[int]:\n    return [b, a]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef swap_numbers(a: int, b: int) -> List[int]:\n    return [b, a]\n```"], "prompt_tokens": [94], "completion_tokens": [31], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_257_swap_numbers"}
{"name": "mbpp_259_maximize_elements", "language": "Python3", "prompt": "from typing import List\n\ndef maximize_elements(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to maximize the given two lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_259_maximize_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "maximize_elements", "test": "def check(candidate):\n    \n    assert candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])==[[7, 8], [5, 10], [3, 10], [8, 11]]\n    assert candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])==[[8, 9], [6, 11], [4, 11], [9, 12]]\n\ndef test_check():\n    check(maximize_elements)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef maximize_elements(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    # Using zip and max to combine lists by taking the maximum element at each position\n    result = [list(map(max, zip(*t))) for t in zip(test_tup1, test_tup2)]\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef maximize_elements(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    # Using zip and max to combine lists by taking the maximum element at each position\n    result = [list(map(max, zip(*t))) for t in zip(test_tup1, test_tup2)]\n    return result\n```"], "prompt_tokens": [93], "completion_tokens": [83], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_259_maximize_elements"}
{"name": "mbpp_260_newman_prime", "language": "Python3", "prompt": "def newman_prime(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "newman_prime", "test": "def check(candidate):\n    \n    assert candidate(4)==17\n    assert candidate(5)==41\n\ndef test_check():\n    check(newman_prime)\n\ntest_check()\n", "source_codes": ["\ndef is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_prime(n):\n    if n == 1:\n        return 2\n    a, b = 1, 1\n    count = 1  # We already know that 2 is the first NS prime\n    while count < n:\n        a, b = b, 2 * b + a\n        if is_prime(b):\n            count += 1\n    return b\n\n# Example usage:\n# nth_newman_prime = newman_prime(5)\n# print(nth_newman_prime)\n\n\n"], "responses": ["```python\ndef is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef newman_prime(n):\n    if n == 1:\n        return 2\n    a, b = 1, 1\n    count = 1  # We already know that 2 is the first NS prime\n    while count < n:\n        a, b = b, 2 * b + a\n        if is_prime(b):\n            count += 1\n    return b\n\n# Example usage:\n# nth_newman_prime = newman_prime(5)\n# print(nth_newman_prime)\n```"], "prompt_tokens": [81], "completion_tokens": [210], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_260_newman_prime"}
{"name": "mbpp_261_division_elements", "language": "Python3", "prompt": "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "division_elements", "test": "def check(candidate):\n    \n    assert candidate((12, 6, 8, 16), (6, 3, 4, 4))==(2, 2, 2, 4)\n    assert candidate((20, 14, 36, 18), (5, 7, 6, 9))==(4, 2, 6, 2)\n\ndef test_check():\n    check(division_elements)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef division_elements(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(a // b for a, b in zip(test_tup1, test_tup2))\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef division_elements(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(a // b for a, b in zip(test_tup1, test_tup2))\n```"], "prompt_tokens": [118], "completion_tokens": [72], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_261_division_elements"}
{"name": "mbpp_262_split_two_parts", "language": "Python3", "prompt": "from typing import List, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Any:\n    \"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "split_two_parts", "test": "def check(candidate):\n    \n    assert candidate(['a', 'b', 'c', 'd'], 2)==(['a', 'b'], ['c', 'd'])\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'], 4)==(['p', 'y', 't', 'h'], ['o', 'n'])\n\ndef test_check():\n    check(split_two_parts)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Any:\n    return (list1[:L], list1[L:])\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Any:\n    return (list1[:L], list1[L:])\n```"], "prompt_tokens": [118], "completion_tokens": [40], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_262_split_two_parts"}
{"name": "mbpp_264_dog_age", "language": "Python3", "prompt": "def dog_age(h_age: int) -> int:\n    \"\"\"\n\tWrite a function to calculate a dog's age in dog's years.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_264_dog_age.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "dog_age", "test": "def check(candidate):\n    \n    assert candidate(15)==73\n    assert candidate(24)==109\n\ndef test_check():\n    check(dog_age)\n\ntest_check()\n", "source_codes": ["\ndef dog_age(h_age: int) -> int:\n    # Assuming the first two human years equal 10.5 dog years each\n    dog_years_per_human_year = 10.5\n    if h_age <= 2:\n        return h_age * dog_years_per_human_year\n    else:\n        # After the first two years, each human year equals 4 dog years\n        return 21 + (h_age - 2) * 4\n\n\n"], "responses": ["```python\ndef dog_age(h_age: int) -> int:\n    # Assuming the first two human years equal 10.5 dog years each\n    dog_years_per_human_year = 10.5\n    if h_age <= 2:\n        return h_age * dog_years_per_human_year\n    else:\n        # After the first two years, each human year equals 4 dog years\n        return 21 + (h_age - 2) * 4\n```"], "prompt_tokens": [77], "completion_tokens": [99], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_264_dog_age"}
{"name": "mbpp_265_list_split", "language": "Python3", "prompt": "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    \"\"\"\n\tWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "list_split", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3)==[[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]\n    assert candidate(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n\ndef test_check():\n    check(list_split)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [S[i:i + step] for i in range(0, len(S), step)]\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [S[i:i + step] for i in range(0, len(S), step)]\n```"], "prompt_tokens": [105], "completion_tokens": [49], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_265_list_split"}
{"name": "mbpp_266_lateralsurface_cube", "language": "Python3", "prompt": "def lateralsurface_cube(l: int) -> int:\n    \"\"\"\n\tWrite a function to find the lateral surface area of a cube given its side length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lateralsurface_cube", "test": "def check(candidate):\n    \n    assert candidate(9)==324\n    assert candidate(10)==400\n\ndef test_check():\n    check(lateralsurface_cube)\n\ntest_check()\n", "source_codes": ["\ndef lateralsurface_cube(l: int) -> int:\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 4 * l * l\n\n\n"], "responses": ["```python\ndef lateralsurface_cube(l: int) -> int:\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n    \"\"\"\n    return 4 * l * l\n```"], "prompt_tokens": [81], "completion_tokens": [43], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_266_lateralsurface_cube"}
{"name": "mbpp_267_square_Sum", "language": "Python3", "prompt": "def square_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "square_Sum", "test": "def check(candidate):\n    \n    assert candidate(3)==35\n    assert candidate(4)==84\n\ndef test_check():\n    check(square_Sum)\n\ntest_check()\n", "source_codes": ["\ndef square_Sum(n: int) -> int:\n    sum = 0\n    odd_number = 1\n    for _ in range(n):\n        sum += odd_number ** 2\n        odd_number += 2\n    return sum\n\n\n"], "responses": ["```python\ndef square_Sum(n: int) -> int:\n    sum = 0\n    odd_number = 1\n    for _ in range(n):\n        sum += odd_number ** 2\n        odd_number += 2\n    return sum\n```"], "prompt_tokens": [88], "completion_tokens": [55], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_267_square_Sum"}
{"name": "mbpp_268_find_star_num", "language": "Python3", "prompt": "def find_star_num(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the n'th star number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_star_num", "test": "def check(candidate):\n    \n    assert candidate(4)==73\n    assert candidate(5)==121\n\ndef test_check():\n    check(find_star_num)\n\ntest_check()\n", "source_codes": ["\ndef find_star_num(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 6 * (n - 1) + find_star_num(n - 1)\n\n# Example usage:\n# nth_star_number = find_star_num(5)\n# print(nth_star_number)  # Output will be the 5th star number\n\n\n"], "responses": ["```\ndef find_star_num(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        return 6 * (n - 1) + find_star_num(n - 1)\n\n# Example usage:\n# nth_star_number = find_star_num(5)\n# print(nth_star_number)  # Output will be the 5th star number\n```"], "prompt_tokens": [75], "completion_tokens": [83], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_268_find_star_num"}
{"name": "mbpp_269_ascii_value", "language": "Python3", "prompt": "def ascii_value(k: str) -> int:\n    \"\"\"\n\tWrite a function to find the ascii value of a character.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_269_ascii_value.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "ascii_value", "test": "def check(candidate):\n    \n    assert candidate('R')==82\n    assert candidate('S')==83\n\ndef test_check():\n    check(ascii_value)\n\ntest_check()\n", "source_codes": ["\ndef ascii_value(k: str) -> int:\n    return ord(k)\n\n\n"], "responses": ["```\ndef ascii_value(k: str) -> int:\n    return ord(k)\n```"], "prompt_tokens": [74], "completion_tokens": [18], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_269_ascii_value"}
{"name": "mbpp_270_sum_even_and_even_index", "language": "Python3", "prompt": "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of even numbers at even positions of a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_even_and_even_index", "test": "def check(candidate):\n    \n    assert candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18])==26\n    assert candidate([5, 6, 12, 1])==12\n\ndef test_check():\n    check(sum_even_and_even_index)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum(val for idx, val in enumerate(arr) if idx % 2 == 0 and val % 2 == 0)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum(val for idx, val in enumerate(arr) if idx % 2 == 0 and val % 2 == 0)\n```"], "prompt_tokens": [89], "completion_tokens": [52], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_270_sum_even_and_even_index"}
{"name": "mbpp_271_even_Power_Sum", "language": "Python3", "prompt": "def even_Power_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "even_Power_Sum", "test": "def check(candidate):\n    \n    assert candidate(3)==8832\n    assert candidate(1)==32\n\ndef test_check():\n    check(even_Power_Sum)\n\ntest_check()\n", "source_codes": ["\ndef even_Power_Sum(n: int) -> int:\n    sum_even_powers = sum((2*i)**5 for i in range(1, n+1))\n    return sum_even_powers\n\n\n"], "responses": ["```python\ndef even_Power_Sum(n: int) -> int:\n    sum_even_powers = sum((2*i)**5 for i in range(1, n+1))\n    return sum_even_powers\n```"], "prompt_tokens": [94], "completion_tokens": [47], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_271_even_Power_Sum"}
{"name": "mbpp_272_rear_extract", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple[int, str, int]]) -> List[int]:\n    \"\"\"\n\tWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rear_extract", "test": "def check(candidate):\n    \n    assert candidate([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)])==[36, 25, 45]\n    assert candidate([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)])==[14, 36, 56]\n\ndef test_check():\n    check(rear_extract)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple[int, str, int]]) -> List[int]:\n    return [tup[-1] for tup in test_list]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple[int, str, int]]) -> List[int]:\n    return [tup[-1] for tup in test_list]\n```"], "prompt_tokens": [100], "completion_tokens": [44], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_272_rear_extract"}
{"name": "mbpp_273_substract_elements", "language": "Python3", "prompt": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> Tuple[int, int, int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "substract_elements", "test": "def check(candidate):\n    \n    assert candidate((11, 2, 3), (24, 45, 16))==(-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12))==(-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> Tuple[int, int, int]:\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> Tuple[int, int, int]:\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n```"], "prompt_tokens": [122], "completion_tokens": [67], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_273_substract_elements"}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "Python3", "prompt": "def even_binomial_Coeff_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_274_even_binomial_Coeff_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "even_binomial_Coeff_Sum", "test": "def check(candidate):\n    \n    assert candidate(6)==32\n    assert candidate(2)==2\n\ndef test_check():\n    check(even_binomial_Coeff_Sum)\n\ntest_check()\n", "source_codes": ["\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    sum_even = 1  # Initialize sum with C(n, 0) which is always 1\n    c = 1  # Used to calculate binomial coefficient iteratively\n    for i in range(1, n//2 + 1):\n        c = c * (n - i + 1) // i\n        sum_even += c\n    return sum_even\n\n# Example usage:\n# print(even_binomial_Coeff_Sum(4))  # Output should be 6 (C(4,0) + C(4,2))\n\n\n"], "responses": ["```python\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    sum_even = 1  # Initialize sum with C(n, 0) which is always 1\n    c = 1  # Used to calculate binomial coefficient iteratively\n    for i in range(1, n//2 + 1):\n        c = c * (n - i + 1) // i\n        sum_even += c\n    return sum_even\n\n# Example usage:\n# print(even_binomial_Coeff_Sum(4))  # Output should be 6 (C(4,0) + C(4,2))\n```"], "prompt_tokens": [89], "completion_tokens": [138], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_274_even_binomial_Coeff_Sum"}
{"name": "mbpp_277_dict_filter", "language": "Python3", "prompt": "from typing import Dict\n\ndef dict_filter(dict: Dict[str, int], n: int) -> Dict[str, int]:\n    \"\"\"\n\tWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "dict_filter", "test": "def check(candidate):\n    assert candidate({ 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190 }, 170)=={ 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190 }\n    assert candidate({ 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190 }, 180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190 }\n    assert candidate({ 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190 }, 190)=={ 'Pierre Cox': 190 }\n\ndef test_check():\n    check(dict_filter)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Dict\n\ndef dict_filter(input_dict: Dict[str, int], n: int) -> Dict[str, int]:\n    return {key: value for key, value in input_dict.items() if value >= n}\n\n\n"], "responses": ["```python\nfrom typing import Dict\n\ndef dict_filter(input_dict: Dict[str, int], n: int) -> Dict[str, int]:\n    return {key: value for key, value in input_dict.items() if value >= n}\n```"], "prompt_tokens": [105], "completion_tokens": [50], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_277_dict_filter"}
{"name": "mbpp_278_count_first_elements", "language": "Python3", "prompt": "from typing import List, Union, Tuple\n\ndef count_first_elements(test_tup: List[Union[int, Tuple[int, int]]]) -> int:\n    \"\"\"\n\tWrite a function to find the number of elements that occurs before the list element in the given tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_278_count_first_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_first_elements", "test": "def check(candidate):\n    \n    assert candidate([2, 9, (5, 7), 11])==2\n    assert candidate([11, 15, 5, 8, (2, 3), 8])==4\n\ndef test_check():\n    check(count_first_elements)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Union, Tuple\n\ndef count_first_elements(test_tup: List[Union[int, Tuple[int, int]]]) -> int:\n    count = 0\n    for i in range(len(test_tup)):\n        if isinstance(test_tup[i], tuple):\n            break\n        count += 1\n    return count\n\n\n"], "responses": ["```python\nfrom typing import List, Union, Tuple\n\ndef count_first_elements(test_tup: List[Union[int, Tuple[int, int]]]) -> int:\n    count = 0\n    for i in range(len(test_tup)):\n        if isinstance(test_tup[i], tuple):\n            break\n        count += 1\n    return count\n```"], "prompt_tokens": [103], "completion_tokens": [74], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_278_count_first_elements"}
{"name": "mbpp_279_is_num_decagonal", "language": "Python3", "prompt": "def is_num_decagonal(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth decagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_num_decagonal", "test": "def check(candidate):\n    \n    assert candidate(7)==175\n    assert candidate(10)==370\n\ndef test_check():\n    check(is_num_decagonal)\n\ntest_check()\n", "source_codes": ["\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    The nth decagonal number is given by the formula: Dn = 4n^2 - 3n\n    \"\"\"\n    return 4 * n * n - 3 * n\n\n\n"], "responses": ["```python\ndef is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    The nth decagonal number is given by the formula: Dn = 4n^2 - 3n\n    \"\"\"\n    return 4 * n * n - 3 * n\n```"], "prompt_tokens": [75], "completion_tokens": [71], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_279_is_num_decagonal"}
{"name": "mbpp_280_sequential_search", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    \"\"\"\n\tWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sequential_search", "test": "def check(candidate):\n    \n    assert candidate([12, 32, 45, 62, 35, 47, 44, 61], 61)==(True, 7)\n    assert candidate([9, 10, 17, 19, 22, 39, 48, 56], 48)==(True, 6)\n\ndef test_check():\n    check(sequential_search)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return True, index\n    return False, -1\n```"], "prompt_tokens": [123], "completion_tokens": [60], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_280_sequential_search"}
{"name": "mbpp_281_all_unique", "language": "Python3", "prompt": "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check if the elements of a given list are unique or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "all_unique", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 1, 2])==False\n    assert candidate([1, 2, 3, 4, 5])==True\n\ndef test_check():\n    check(all_unique)\n\ntest_check()\n", "source_codes": ["\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))\n\n\n"], "responses": ["```python\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))\n```"], "prompt_tokens": [87], "completion_tokens": [28], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_281_all_unique"}
{"name": "mbpp_282_sub_list", "language": "Python3", "prompt": "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to subtract two lists element-wise.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sub_list", "test": "def check(candidate):\n    \n    assert candidate([1, 2], [3, 4])==[-2, -2]\n    assert candidate([90, 120], [50, 70])==[40, 50]\n\ndef test_check():\n    check(sub_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    # Assuming both lists are of the same length\n    # Subtract corresponding elements of the second list from the first list\n    return [a - b for a, b in zip(nums1, nums2)]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    # Assuming both lists are of the same length\n    # Subtract corresponding elements of the second list from the first list\n    return [a - b for a, b in zip(nums1, nums2)]\n```"], "prompt_tokens": [86], "completion_tokens": [71], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_282_sub_list"}
{"name": "mbpp_283_validate", "language": "Python3", "prompt": "def validate(n: int) -> bool:\n    \"\"\"\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "validate", "test": "def check(candidate):\n    \n    assert candidate(51241)==False\n    assert candidate(321)==True\n\ndef test_check():\n    check(validate)\n\ntest_check()\n", "source_codes": ["\ndef validate(n: int) -> bool:\n    # Convert the integer to a string to iterate over its digits\n    n_str = str(n)\n    # Create a dictionary to store the frequency of each digit\n    digit_freq = {}\n\n    # Iterate over each digit in the string\n    for digit in n_str:\n        # If the digit is already in the dictionary, increment its count\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        # Otherwise, add the digit to the dictionary with a count of 1\n        else:\n            digit_freq[digit] = 1\n\n    # Iterate over the dictionary to check the condition\n    for digit, freq in digit_freq.items():\n        # If the frequency of any digit is greater than the digit itself (as an integer), return False\n        if freq > int(digit):\n            return False\n\n    # If the loop completes without returning False, the condition is satisfied for all digits\n    return True\n\n\n"], "responses": ["```python\ndef validate(n: int) -> bool:\n    # Convert the integer to a string to iterate over its digits\n    n_str = str(n)\n    # Create a dictionary to store the frequency of each digit\n    digit_freq = {}\n\n    # Iterate over each digit in the string\n    for digit in n_str:\n        # If the digit is already in the dictionary, increment its count\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        # Otherwise, add the digit to the dictionary with a count of 1\n        else:\n            digit_freq[digit] = 1\n\n    # Iterate over the dictionary to check the condition\n    for digit, freq in digit_freq.items():\n        # If the frequency of any digit is greater than the digit itself (as an integer), return False\n        if freq > int(digit):\n            return False\n\n    # If the loop completes without returning False, the condition is satisfied for all digits\n    return True\n```"], "prompt_tokens": [90], "completion_tokens": [208], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_283_validate"}
{"name": "mbpp_284_check_element", "language": "Python3", "prompt": "from typing import List, Any\n\ndef check_element(list: List[Any], element: Any) -> bool:\n    \"\"\"\n\tWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_284_check_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_element", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4], 7)==False\n    assert candidate(['green', 'green', 'green', 'green'], 'green')==True\n\ndef test_check():\n    check(check_element)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef check_element(lst: List[Any], element: Any) -> bool:\n    return all(item == element for item in lst)\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef check_element(lst: List[Any], element: Any) -> bool:\n    return all(item == element for item in lst)\n```"], "prompt_tokens": [99], "completion_tokens": [37], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_284_check_element"}
{"name": "mbpp_285_text_match_two_three", "language": "Python3", "prompt": "def text_match_two_three(text: str) -> bool:\n    \"\"\"\n\tWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_two_three", "test": "def check(candidate):\n    \n    assert candidate('dc')==False\n    assert candidate('abbbba')==True\n\ndef test_check():\n    check(text_match_two_three)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef text_match_two_three(text: str) -> bool:\n    pattern = 'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    return False\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_two_three(text: str) -> bool:\n    pattern = 'ab{2,3}'\n    if re.search(pattern, text):\n        return True\n    return False\n```"], "prompt_tokens": [88], "completion_tokens": [45], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_285_text_match_two_three"}
{"name": "mbpp_286_max_sub_array_sum_repeated", "language": "Python3", "prompt": "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sub_array_sum_repeated", "test": "def check(candidate):\n    \n    assert candidate([-1, 10, 20], 3, 2)==59\n    assert candidate([-1, -2, -3], 3, 3)==-1\n\ndef test_check():\n    check(max_sub_array_sum_repeated)\n\ntest_check()\n", "source_codes": ["\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    def max_sub_array_sum(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    single_max_sum = max_sub_array_sum(a)\n    if k == 1:\n        return single_max_sum\n\n    prefix_sum = suffix_sum = 0\n    max_prefix_sum = max_suffix_sum = float('-inf')\n\n    # Calculate max prefix sum\n    for i in range(n):\n        prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, prefix_sum)\n\n    # Calculate max suffix sum\n    for i in range(n-1, -1, -1):\n        suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, suffix_sum)\n\n    total_sum = sum(a)\n    if total_sum > 0:\n        return max(single_max_sum, max_prefix_sum + max_suffix_sum + (k-2) * total_sum)\n    else:\n        return max(single_max_sum, max_prefix_sum + max_suffix_sum)\n\n# Example usage:\n# a = [1, 2, 3]\n# n = len(a)\n# k = 3\n# print(max_sub_array_sum_repeated(a, n, k))  # Output should be 18\n\n\n"], "responses": ["```python\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    def max_sub_array_sum(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    single_max_sum = max_sub_array_sum(a)\n    if k == 1:\n        return single_max_sum\n\n    prefix_sum = suffix_sum = 0\n    max_prefix_sum = max_suffix_sum = float('-inf')\n\n    # Calculate max prefix sum\n    for i in range(n):\n        prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, prefix_sum)\n\n    # Calculate max suffix sum\n    for i in range(n-1, -1, -1):\n        suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, suffix_sum)\n\n    total_sum = sum(a)\n    if total_sum > 0:\n        return max(single_max_sum, max_prefix_sum + max_suffix_sum + (k-2) * total_sum)\n    else:\n        return max(single_max_sum, max_prefix_sum + max_suffix_sum)\n\n# Example usage:\n# a = [1, 2, 3]\n# n = len(a)\n# k = 3\n# print(max_sub_array_sum_repeated(a, n, k))  # Output should be 18\n```"], "prompt_tokens": [107], "completion_tokens": [330], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_286_max_sub_array_sum_repeated"}
{"name": "mbpp_287_square_Sum", "language": "Python3", "prompt": "def square_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_287_square_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "square_Sum", "test": "def check(candidate):\n    \n    assert candidate(3)==56\n    assert candidate(4)==120\n\ndef test_check():\n    check(square_Sum)\n\ntest_check()\n", "source_codes": ["\ndef square_Sum(n: int) -> int:\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**2\n    return sum\n\n\n"], "responses": ["```python\ndef square_Sum(n: int) -> int:\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**2\n    return sum\n```"], "prompt_tokens": [85], "completion_tokens": [46], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_287_square_Sum"}
{"name": "mbpp_290_max_length", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_length(list1: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\"\n\tWrite a function to find the list of maximum length in a list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_length", "test": "def check(candidate):\n    \n    assert candidate([[1], [5, 7], [10, 12, 14, 15]])==(4, [10, 12, 14, 15])\n    assert candidate([[5], [15, 20, 25]])==(3, [15, 20, 25])\n\ndef test_check():\n    check(max_length)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_length(list1: List[List[int]]) -> Tuple[int, List[int]]:\n    max_list = max(list1, key=len)\n    return len(max_list), max_list\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_length(list1: List[List[int]]) -> Tuple[int, List[int]]:\n    max_list = max(list1, key=len)\n    return len(max_list), max_list\n```"], "prompt_tokens": [92], "completion_tokens": [48], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_290_max_length"}
{"name": "mbpp_291_count_no_of_ways", "language": "Python3", "prompt": "def count_no_of_ways(n: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_no_of_ways", "test": "def check(candidate):\n    \n    assert candidate(3, 2)==6\n    assert candidate(4, 4)==228\n\ndef test_check():\n    check(count_no_of_ways)\n\ntest_check()\n", "source_codes": ["\ndef count_no_of_ways(n: int, k: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    elif n == 2:\n        return k * k\n\n    same = k\n    diff = k * (k - 1)\n    total = same + diff\n\n    for i in range(3, n + 1):\n        same = diff\n        diff = total * (k - 1)\n        total = same + diff\n\n    return total\n\n\n"], "responses": ["```python\ndef count_no_of_ways(n: int, k: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    elif n == 2:\n        return k * k\n\n    same = k\n    diff = k * (k - 1)\n    total = same + diff\n\n    for i in range(3, n + 1):\n        same = diff\n        diff = total * (k - 1)\n        total = same + diff\n\n    return total\n```"], "prompt_tokens": [106], "completion_tokens": [120], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_291_count_no_of_ways"}
{"name": "mbpp_292_find", "language": "Python3", "prompt": "def find(n: int, m: int) -> int:\n    \"\"\"\n\tWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find", "test": "def check(candidate):\n    \n    assert candidate(4, 2)==2\n    assert candidate(20, 5)==4\n\ndef test_check():\n    check(find)\n\ntest_check()\n", "source_codes": ["\ndef find(n: int, m: int) -> int:\n    return n // m\n\n\n"], "responses": ["```python\ndef find(n: int, m: int) -> int:\n    return n // m\n```"], "prompt_tokens": [83], "completion_tokens": [23], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_292_find"}
{"name": "mbpp_293_otherside_rightangle", "language": "Python3", "prompt": "def otherside_rightangle(w: int, h: int) -> float:\n    \"\"\"\n\tWrite a function to find the third side of a right angled triangle.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "otherside_rightangle", "test": "def check(candidate):\n    \n    assert candidate(3, 4)==5\n    assert candidate(7, 15)==16.55294535724685\n\ndef test_check():\n    check(otherside_rightangle)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef otherside_rightangle(w: int, h: int) -> float:\n    return math.sqrt(w**2 + h**2)\n\n\n"], "responses": ["```\nimport math\n\ndef otherside_rightangle(w: int, h: int) -> float:\n    return math.sqrt(w**2 + h**2)\n```"], "prompt_tokens": [82], "completion_tokens": [34], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_293_otherside_rightangle"}
{"name": "mbpp_294_max_val", "language": "Python3", "prompt": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_val", "test": "def check(candidate):\n    \n    assert candidate(['Python', 15, 20, 25])==25\n    assert candidate(['Python', 30, 20, 40, 50, 'version'])==50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    max_value = None\n    for val in listval:\n        if isinstance(val, int):\n            if max_value is None or val > max_value:\n                max_value = val\n    if max_value is None:\n        raise ValueError(\"List does not contain any integer values.\")\n    return max_value\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    max_value = None\n    for val in listval:\n        if isinstance(val, int):\n            if max_value is None or val > max_value:\n                max_value = val\n    if max_value is None:\n        raise ValueError(\"List does not contain any integer values.\")\n    return max_value\n```"], "prompt_tokens": [89], "completion_tokens": [89], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_294_max_val"}
{"name": "mbpp_295_sum_div", "language": "Python3", "prompt": "def sum_div(number: int) -> int:\n    \"\"\"\n\tWrite a function to return the sum of all divisors of a number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_div", "test": "def check(candidate):\n    \n    assert candidate(12)==16\n    assert candidate(7)==1\n\ndef test_check():\n    check(sum_div)\n\ntest_check()\n", "source_codes": ["\ndef sum_div(number: int) -> int:\n    if number < 1:\n        return 0\n    div_sum = 1 + number\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            div_sum += i\n            if i != number // i:\n                div_sum += number // i\n    return div_sum\n\n\n"], "responses": ["```\ndef sum_div(number: int) -> int:\n    if number < 1:\n        return 0\n    div_sum = 1 + number\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            div_sum += i\n            if i != number // i:\n                div_sum += number // i\n    return div_sum\n```"], "prompt_tokens": [77], "completion_tokens": [89], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_295_sum_div"}
{"name": "mbpp_296_get_Inv_Count", "language": "Python3", "prompt": "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_Inv_Count", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 1])==1\n    assert candidate([1, 2, 5, 6, 1])==3\n\ndef test_check():\n    check(get_Inv_Count)\n\ntest_check()\n", "source_codes": ["\ndef merge(arr, temp_arr, left, mid, right):\n    i = left     # Starting index of left subarray\n    j = mid + 1  # Starting index of right subarray\n    k = left     # Starting index of to be sorted subarray\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            k += 1\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += (mid - i + 1)\n            k += 1\n            j += 1\n\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        k += 1\n        i += 1\n\n    while j <= right:\n        temp_arr[k] = arr[j]\n        k += 1\n        j += 1\n\n    for loop_var in range(left, right + 1):\n        arr[loop_var] = temp_arr[loop_var]\n\n    return inv_count\n\ndef merge_sort(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += merge_sort(arr, temp_arr, left, mid)\n        inv_count += merge_sort(arr, temp_arr, mid + 1, right)\n        inv_count += merge(arr, temp_arr, left, mid, right)\n    return inv_count\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    n = len(arr)\n    temp_arr = [0]*n\n    return merge_sort(arr, temp_arr, 0, n-1)\n\n\n"], "responses": ["```python\ndef merge(arr, temp_arr, left, mid, right):\n    i = left     # Starting index of left subarray\n    j = mid + 1  # Starting index of right subarray\n    k = left     # Starting index of to be sorted subarray\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            k += 1\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += (mid - i + 1)\n            k += 1\n            j += 1\n\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        k += 1\n        i += 1\n\n    while j <= right:\n        temp_arr[k] = arr[j]\n        k += 1\n        j += 1\n\n    for loop_var in range(left, right + 1):\n        arr[loop_var] = temp_arr[loop_var]\n\n    return inv_count\n\ndef merge_sort(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += merge_sort(arr, temp_arr, left, mid)\n        inv_count += merge_sort(arr, temp_arr, mid + 1, right)\n        inv_count += merge(arr, temp_arr, left, mid, right)\n    return inv_count\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    n = len(arr)\n    temp_arr = [0]*n\n    return merge_sort(arr, temp_arr, 0, n-1)\n```"], "prompt_tokens": [82], "completion_tokens": [364], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_296_get_Inv_Count"}
{"name": "mbpp_297_flatten_list", "language": "Python3", "prompt": "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List[int]]]) -> List[int]:\n    \"\"\"\n\tWrite a function to flatten a given nested list structure.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "flatten_list", "test": "def check(candidate):\n    assert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    assert candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n\ndef test_check():\n    check(flatten_list)\n\ntest_check()\n", "source_codes": ["\ndef flatten_list(list1: List[Union[int, List[int]]]) -> List[int]:\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n\n\n"], "responses": ["```python\ndef flatten_list(list1: List[Union[int, List[int]]]) -> List[int]:\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n```"], "prompt_tokens": [89], "completion_tokens": [65], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_297_flatten_list"}
{"name": "mbpp_299_max_aggregate", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    \"\"\"\n\tWrite a function to calculate the maximum aggregate from the list of tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_aggregate", "test": "def check(candidate):\n    \n    assert candidate([('Juan Whelan', 50), ('Sabah Colley', 48), ('Peter Nichols', 37), ('Juan Whelan', 22), ('Sabah Colley', 14)])==('Juan Whelan', 72)\n    assert candidate([('Juan Whelan', 10), ('Sabah Colley', 20), ('Peter Nichols', 30), ('Juan Whelan', 40), ('Sabah Colley', 50)])==('Sabah Colley', 70)\n\ndef test_check():\n    check(max_aggregate)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    if not stdata:\n        return (\"\", 0)\n    return max(stdata, key=lambda x: x[1])\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    if not stdata:\n        return (\"\", 0)\n    return max(stdata, key=lambda x: x[1])\n```"], "prompt_tokens": [93], "completion_tokens": [58], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_299_max_aggregate"}
{"name": "mbpp_304_find_Element", "language": "Python3", "prompt": "from typing import List\n\ndef find_Element(arr: List[int], ranges: List[List[int]], rotations: int, index: int) -> int:\n    \"\"\"\n\tWrite a python function to find element at a given index after number of rotations.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Element", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2)==3\n    assert candidate([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1)==1\n\ndef test_check():\n    check(find_Element)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_Element(arr: List[int], ranges: List[List[int]], rotations: int, index: int) -> int:\n    n = len(arr)\n    for i in range(rotations):\n        left, right = ranges[i % len(ranges)]\n        temp = arr[right]\n        for j in range(right, left, -1):\n            arr[j] = arr[j - 1]\n        arr[left] = temp\n    return arr[index]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_Element(arr: List[int], ranges: List[List[int]], rotations: int, index: int) -> int:\n    n = len(arr)\n    for i in range(rotations):\n        left, right = ranges[i % len(ranges)]\n        temp = arr[right]\n        for j in range(right, left, -1):\n            arr[j] = arr[j - 1]\n        arr[left] = temp\n    return arr[index]\n```"], "prompt_tokens": [98], "completion_tokens": [101], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_304_find_Element"}
{"name": "mbpp_305_start_withp", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "start_withp", "test": "def check(candidate):\n    \n    assert candidate(['Python Programming', 'Java Programming'])==('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv'])==('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = [word for word in words if word.startswith('p')]\n    if len(p_words) >= 2:\n        return (p_words[0], p_words[1])\n    else:\n        return (\"\", \"\")\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = [word for word in words if word.startswith('p')]\n    if len(p_words) >= 2:\n        return (p_words[0], p_words[1])\n    else:\n        return (\"\", \"\")\n```"], "prompt_tokens": [92], "completion_tokens": [73], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_305_start_withp"}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "Python3", "prompt": "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sum_increasing_subseq", "test": "def check(candidate):\n    \n    assert candidate([1, 101, 2, 3, 100, 4, 5], 7, 2, 5)==7\n    assert candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)==71\n\ndef test_check():\n    check(max_sum_increasing_subseq)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    # Initialize the dp array with the same values as the original array\n    dp = a.copy()\n    \n    # Calculate the maximum sum of increasing subsequence for each element\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    \n    # Find the maximum sum of increasing subsequence from prefix until index\n    max_sum = 0\n    for i in range(index + 1):\n        max_sum = max(max_sum, dp[i])\n    \n    # Include the kth element in the maximum sum\n    # We need to find the largest sum of increasing subsequence ending at an index less than k\n    # and then add the value of the kth element to it.\n    max_sum_with_k = a[k]\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            max_sum_with_k = max(max_sum_with_k, dp[i] + a[k])\n    \n    return max_sum_with_k\n\n# Example usage:\n# a = [1, 101, 2, 3, 100, 4, 5]\n# n = len(a)\n# index = 3\n# k = 4\n# print(max_sum_increasing_subseq(a, n, index, k))  # Output should be 106\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    # Initialize the dp array with the same values as the original array\n    dp = a.copy()\n    \n    # Calculate the maximum sum of increasing subsequence for each element\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    \n    # Find the maximum sum of increasing subsequence from prefix until index\n    max_sum = 0\n    for i in range(index + 1):\n        max_sum = max(max_sum, dp[i])\n    \n    # Include the kth element in the maximum sum\n    # We need to find the largest sum of increasing subsequence ending at an index less than k\n    # and then add the value of the kth element to it.\n    max_sum_with_k = a[k]\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            max_sum_with_k = max(max_sum_with_k, dp[i] + a[k])\n    \n    return max_sum_with_k\n\n# Example usage:\n# a = [1, 101, 2, 3, 100, 4, 5]\n# n = len(a)\n# index = 3\n# k = 4\n# print(max_sum_increasing_subseq(a, n, index, k))  # Output should be 106\n```"], "prompt_tokens": [121], "completion_tokens": [332], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_306_max_sum_increasing_subseq"}
{"name": "mbpp_308_large_product", "language": "Python3", "prompt": "from typing import List\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "large_product", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4)==[60, 54, 50, 48]\n    assert candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5)==[60, 54, 50, 48, 45]\n\ndef test_check():\n    check(large_product)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    # First, we sort both lists in descending order to make sure we can easily find the largest products\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # We use a max heap to keep track of the largest products we've found so far\n    max_heap = []\n    for i in range(min(N, len(nums1))):\n        for j in range(min(N, len(nums2))):\n            # Calculate the product\n            product = nums1[i] * nums2[j]\n            # If we haven't found N products yet, we add the current product to the heap\n            if len(max_heap) < N:\n                heapq.heappush(max_heap, product)\n            else:\n                # If the current product is larger than the smallest product in the heap, we replace it\n                if product > max_heap[0]:\n                    heapq.heappop(max_heap)\n                    heapq.heappush(max_heap, product)\n                else:\n                    # Since the lists are sorted, we won't find a larger product with the current i and any j < current j\n                    break\n    \n    # The heap contains the N largest products, but not necessarily in sorted order\n    return sorted(max_heap, reverse=True)\n\n# Example usage:\n# nums1 = [1, 2, 3]\n# nums2 = [4, 5, 6]\n# N = 3\n# print(large_product(nums1, nums2, N))  # Output: [18, 15, 12]\n\n\n"], "responses": ["```python\nfrom typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    # First, we sort both lists in descending order to make sure we can easily find the largest products\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    \n    # We use a max heap to keep track of the largest products we've found so far\n    max_heap = []\n    for i in range(min(N, len(nums1))):\n        for j in range(min(N, len(nums2))):\n            # Calculate the product\n            product = nums1[i] * nums2[j]\n            # If we haven't found N products yet, we add the current product to the heap\n            if len(max_heap) < N:\n                heapq.heappush(max_heap, product)\n            else:\n                # If the current product is larger than the smallest product in the heap, we replace it\n                if product > max_heap[0]:\n                    heapq.heappop(max_heap)\n                    heapq.heappush(max_heap, product)\n                else:\n                    # Since the lists are sorted, we won't find a larger product with the current i and any j < current j\n                    break\n    \n    # The heap contains the N largest products, but not necessarily in sorted order\n    return sorted(max_heap, reverse=True)\n\n# Example usage:\n# nums1 = [1, 2, 3]\n# nums2 = [4, 5, 6]\n# N = 3\n# print(large_product(nums1, nums2, N))  # Output: [18, 15, 12]\n```"], "prompt_tokens": [103], "completion_tokens": [348], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_308_large_product"}
{"name": "mbpp_309_maximum", "language": "Python3", "prompt": "def maximum(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a python function to find the maximum of two numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "maximum", "test": "def check(candidate):\n    \n    assert candidate(-1, -2)==-1\n    assert candidate(9, 7)==9\n\ndef test_check():\n    check(maximum)\n\ntest_check()\n", "source_codes": ["\ndef maximum(a: int, b: int) -> int:\n    if a > b:\n        return a\n    else:\n        return b\n\n\n"], "responses": ["```\ndef maximum(a: int, b: int) -> int:\n    if a > b:\n        return a\n    else:\n        return b\n```"], "prompt_tokens": [77], "completion_tokens": [33], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_309_maximum"}
{"name": "mbpp_310_string_to_tuple", "language": "Python3", "prompt": "from typing import List\n\ndef string_to_tuple(str1: str) -> List[str]:\n    \"\"\"\n\tWrite a function to convert a given string to a list of characters.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_310_string_to_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "string_to_tuple", "test": "def check(candidate):\n    \n    assert candidate('item1')==['i', 't', 'e', 'm', '1']\n    assert candidate('15.10')==['1', '5', '.', '1', '0']\n\ndef test_check():\n    check(string_to_tuple)\n\ntest_check()\n", "source_codes": ["\ndef string_to_tuple(str1: str) -> List[str]:\n    return list(str1)\n\n\n"], "responses": ["```python\ndef string_to_tuple(str1: str) -> List[str]:\n    return list(str1)\n```"], "prompt_tokens": [84], "completion_tokens": [23], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_310_string_to_tuple"}
{"name": "mbpp_388_highest_Power_of_2", "language": "Python3", "prompt": "def highest_Power_of_2(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the highest power of 2 that is less than or equal to n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "highest_Power_of_2", "test": "def check(candidate):\n    \n    assert candidate(19)==16\n    assert candidate(32)==32\n\ndef test_check():\n    check(highest_Power_of_2)\n\ntest_check()\n", "source_codes": ["\ndef highest_Power_of_2(n: int) -> int:\n    p = 1\n    while p * 2 <= n:\n        p *= 2\n    return p\n\n\n"], "responses": ["```python\ndef highest_Power_of_2(n: int) -> int:\n    p = 1\n    while p * 2 <= n:\n        p *= 2\n    return p\n```"], "prompt_tokens": [87], "completion_tokens": [43], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_388_highest_Power_of_2"}
{"name": "mbpp_389_find_lucas", "language": "Python3", "prompt": "def find_lucas(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the n'th lucas number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_lucas", "test": "def check(candidate):\n    \n    assert candidate(4)==7\n    assert candidate(3)==4\n\ndef test_check():\n    check(find_lucas)\n\ntest_check()\n", "source_codes": ["\ndef find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(n-1):\n            a, b = b, a + b\n        return b\n\n\n"], "responses": ["```\ndef find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(n-1):\n            a, b = b, a + b\n        return b\n```"], "prompt_tokens": [76], "completion_tokens": [76], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_389_find_lucas"}
{"name": "mbpp_390_add_string", "language": "Python3", "prompt": "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    \"\"\"\n\tWrite a function to apply a given format string to all of the elements in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_string", "test": "def check(candidate):\n    \n    assert candidate(['a', 'b', 'c', 'd'], 'python{0}')==['pythona', 'pythonb', 'pythonc', 'pythond']\n    assert candidate([5, 6, 7, 8], 'string{0}')==['string5', 'string6', 'string7', 'string8']\n\ndef test_check():\n    check(add_string)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]\n```"], "prompt_tokens": [93], "completion_tokens": [40], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_390_add_string"}
{"name": "mbpp_391_convert_list_dictionary", "language": "Python3", "prompt": "from typing import List, Dict\n\ndef convert_list_dictionary(l1: List[str], l2: List[str], l3: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    \"\"\"\n\tWrite a function to convert more than one list to nested dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "convert_list_dictionary", "test": "def check(candidate):\n    assert candidate(['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92])==[{ 'S001': { 'Adina Park': 85 } }, { 'S002': { 'Leyton Marsh': 98 } }, { 'S003': { 'Duncan Boyle': 89 } }, { 'S004': { 'Saim Richards': 92 } }]\n    assert candidate(['abc', 'def', 'ghi', 'jkl'], ['python', 'program', 'language', 'programs'], [100, 200, 300, 400])==[{ 'abc': { 'python': 100 } }, { 'def': { 'program': 200 } }, { 'ghi': { 'language': 300 } }, { 'jkl': { 'programs': 400 } }]\n    assert candidate(['A1', 'A2', 'A3', 'A4'], ['java', 'C', 'C++', 'DBMS'], [10, 20, 30, 40])==[{ 'A1': { 'java': 10 } }, { 'A2': { 'C': 20 } }, { 'A3': { 'C++': 30 } }, { 'A4': { 'DBMS': 40 } }]\n\ndef test_check():\n    check(convert_list_dictionary)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Dict\n\ndef convert_list_dictionary(l1: List[str], l2: List[str], l3: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    result = []\n    for key1, key2, value in zip(l1, l2, l3):\n        result.append({key1: {key2: value}})\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Dict\n\ndef convert_list_dictionary(l1: List[str], l2: List[str], l3: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    result = []\n    for key1, key2, value in zip(l1, l2, l3):\n        result.append({key1: {key2: value}})\n    return result\n```"], "prompt_tokens": [106], "completion_tokens": [86], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_391_convert_list_dictionary"}
{"name": "mbpp_392_get_max_sum", "language": "Python3", "prompt": "def get_max_sum(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_max_sum", "test": "def check(candidate):\n    \n    assert candidate(10)==12\n    assert candidate(2)==2\n\ndef test_check():\n    check(get_max_sum)\n\ntest_check()\n", "source_codes": ["\ndef get_max_sum(n: int, memo={}) -> int:\n    if n == 0:\n        return 0\n    if n in memo:\n        return memo[n]\n    else:\n        memo[n] = max(get_max_sum(n//2, memo) + get_max_sum(n//3, memo) + get_max_sum(n//4, memo) + get_max_sum(n//5, memo), n)\n        return memo[n]\n\n\n"], "responses": ["```python\ndef get_max_sum(n: int, memo={}) -> int:\n    if n == 0:\n        return 0\n    if n in memo:\n        return memo[n]\n    else:\n        memo[n] = max(get_max_sum(n//2, memo) + get_max_sum(n//3, memo) + get_max_sum(n//4, memo) + get_max_sum(n//5, memo), n)\n        return memo[n]\n```"], "prompt_tokens": [109], "completion_tokens": [96], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_392_get_max_sum"}
{"name": "mbpp_393_max_length_list", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_length_list(input_list: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\"\n\tWrite a function to find the list with maximum length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_length_list", "test": "def check(candidate):\n    \n    assert candidate([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])==(5, [1, 2, 3, 4, 5])\n    assert candidate([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]])==(4, [6, 7, 8, 9])\n\ndef test_check():\n    check(max_length_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_length_list(input_list: List[List[int]]) -> Tuple[int, List[int]]:\n    max_length = 0\n    longest_list = []\n    \n    for sublist in input_list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            longest_list = sublist\n    \n    return max_length, longest_list\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_length_list(input_list: List[List[int]]) -> Tuple[int, List[int]]:\n    max_length = 0\n    longest_list = []\n    \n    for sublist in input_list:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n            longest_list = sublist\n    \n    return max_length, longest_list\n```"], "prompt_tokens": [88], "completion_tokens": [81], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_393_max_length_list"}
{"name": "mbpp_394_check_distinct", "language": "Python3", "prompt": "from typing import List\n\ndef check_distinct(test_tup: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check if given list contains no duplicates.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_distinct", "test": "def check(candidate):\n    \n    assert candidate([1, 4, 5, 6])==True\n    assert candidate([2, 3, 4, 5, 6])==True\n\ndef test_check():\n    check(check_distinct)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef check_distinct(test_tup: List[int]) -> bool:\n    return len(test_tup) == len(set(test_tup))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_distinct(test_tup: List[int]) -> bool:\n    return len(test_tup) == len(set(test_tup))\n```"], "prompt_tokens": [83], "completion_tokens": [37], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_394_check_distinct"}
{"name": "mbpp_395_first_non_repeating_character", "language": "Python3", "prompt": "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    \"\"\"\n\tWrite a python function to find the first non-repeated character in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "first_non_repeating_character", "test": "def check(candidate):\n    \n    assert candidate('abc')=='a'\n    assert candidate('ababc')=='c'\n\ndef test_check():\n    check(first_non_repeating_character)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Optional\nfrom collections import OrderedDict\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_order = OrderedDict()\n    for char in str1:\n        if char in char_order:\n            char_order[char] += 1\n        else:\n            char_order[char] = 1\n    \n    for char, count in char_order.items():\n        if count == 1:\n            return char\n    return None\n\n\n"], "responses": ["```python\nfrom typing import Optional\nfrom collections import OrderedDict\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_order = OrderedDict()\n    for char in str1:\n        if char in char_order:\n            char_order[char] += 1\n        else:\n            char_order[char] = 1\n    \n    for char, count in char_order.items():\n        if count == 1:\n            return char\n    return None\n```"], "prompt_tokens": [89], "completion_tokens": [95], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_395_first_non_repeating_character"}
{"name": "mbpp_396_check_char", "language": "Python3", "prompt": "def check_char(string: str) -> str:\n    \"\"\"\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_char", "test": "def check(candidate):\n    \n    assert candidate('a')=='Valid'\n    assert candidate('abcd')=='Invalid'\n\ndef test_check():\n    check(check_char)\n\ntest_check()\n", "source_codes": ["\ndef check_char(string: str) -> str:\n    if string and string[0] == string[-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\n"], "responses": ["```python\ndef check_char(string: str) -> str:\n    if string and string[0] == string[-1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n```"], "prompt_tokens": [81], "completion_tokens": [40], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_396_check_char"}
{"name": "mbpp_397_median_numbers", "language": "Python3", "prompt": "def median_numbers(a: int, b: int, c: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of three numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "median_numbers", "test": "def check(candidate):\n    \n    assert candidate(20, 10, 30)==20.0\n    assert candidate(15, 45, 75)==45.0\n\ndef test_check():\n    check(median_numbers)\n\ntest_check()\n", "source_codes": ["\ndef median_numbers(a: int, b: int, c: int) -> float:\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n\n\n"], "responses": ["```\ndef median_numbers(a: int, b: int, c: int) -> float:\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]\n```"], "prompt_tokens": [81], "completion_tokens": [41], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_397_median_numbers"}
{"name": "mbpp_398_sum_of_digits", "language": "Python3", "prompt": "from typing import List, Any\n\ndef sum_of_digits(nums: List[Any]) -> int:\n    \"\"\"\n\tWrite a function to compute the sum of digits of each number of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_of_digits", "test": "def check(candidate):\n    \n    assert candidate([[10, 20, 4, 5, 'b', 70, 'a']])==19\n    assert candidate([10, 20, -4, 5, -70])==19\n\ndef test_check():\n    check(sum_of_digits)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef sum_of_digits(nums: List[Any]) -> int:\n    total_sum = 0\n    for num in nums:\n        if isinstance(num, int):\n            total_sum += sum(int(digit) for digit in str(abs(num)))\n    return total_sum\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef sum_of_digits(nums: List[Any]) -> int:\n    total_sum = 0\n    for num in nums:\n        if isinstance(num, int):\n            total_sum += sum(int(digit) for digit in str(abs(num)))\n    return total_sum\n```"], "prompt_tokens": [88], "completion_tokens": [64], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_398_sum_of_digits"}
{"name": "mbpp_399_bitwise_xor", "language": "Python3", "prompt": "from typing import Tuple\n\ndef bitwise_xor(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "bitwise_xor", "test": "def check(candidate):\n    \n    assert candidate((11, 5, 7, 10), (6, 3, 4, 4))==(13, 6, 3, 14)\n    assert candidate((12, 6, 8, 11), (7, 4, 5, 6))==(11, 2, 13, 13)\n\ndef test_check():\n    check(bitwise_xor)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef bitwise_xor(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef bitwise_xor(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n```"], "prompt_tokens": [113], "completion_tokens": [72], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_399_bitwise_xor"}
{"name": "mbpp_400_extract_freq", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef extract_freq(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to extract the number of unique tuples in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_freq", "test": "def check(candidate):\n    \n    assert candidate([(4, 15), (2, 3), (5, 4), (6, 7)])==4\n    assert candidate([(5, 16), (2, 3), (6, 5), (6, 9)])==4\n\ndef test_check():\n    check(extract_freq)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef extract_freq(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set(test_list)\n    return len(unique_tuples)\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef extract_freq(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Write a function to extract the number of unique tuples in the given list.\n    \"\"\"\n    unique_tuples = set(test_list)\n    return len(unique_tuples)\n```"], "prompt_tokens": [90], "completion_tokens": [61], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_400_extract_freq"}
{"name": "mbpp_401_add_nested_tuples", "language": "Python3", "prompt": "from typing import List\n\ndef add_nested_tuples(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of list elements in the given two nested lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_nested_tuples", "test": "def check(candidate):\n    \n    assert candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])==[[9, 12], [9, 16], [5, 12], [10, 15]]\n    assert candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])==[[11, 14], [11, 18], [7, 14], [12, 17]]\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef add_nested_tuples(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    return [[sum(x) for x in zip(*tups)] for tups in zip(test_tup1, test_tup2)]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef add_nested_tuples(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    return [[sum(x) for x in zip(*tups)] for tups in zip(test_tup1, test_tup2)]\n```"], "prompt_tokens": [102], "completion_tokens": [65], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_401_add_nested_tuples"}
{"name": "mbpp_404_minimum", "language": "Python3", "prompt": "def minimum(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a python function to find the minimum of two numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_404_minimum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "minimum", "test": "def check(candidate):\n    \n    assert candidate(-5, -4)==-5\n    assert candidate(0, 0)==0\n\ndef test_check():\n    check(minimum)\n\ntest_check()\n", "source_codes": ["\ndef minimum(a: int, b: int) -> int:\n    return a if a < b else b\n\n\n"], "responses": ["```\ndef minimum(a: int, b: int) -> int:\n    return a if a < b else b\n```"], "prompt_tokens": [77], "completion_tokens": [26], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_404_minimum"}
{"name": "mbpp_405_check_tuplex", "language": "Python3", "prompt": "from typing import List, Union, Any\n\ndef check_tuplex(tuplex: List[Union[str, int]], tuple1: Any) -> bool:\n    \"\"\"\n\tWrite a function to check whether an element exists within a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_405_check_tuplex.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_tuplex", "test": "def check(candidate):\n    \n    assert candidate(['w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'], '5')==False\n    assert candidate(['w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'], 3)==True\n\ndef test_check():\n    check(check_tuplex)\n\ntest_check()\n", "source_codes": ["\ndef check_tuplex(tuplex: List[Union[str, int]], tuple1: Any) -> bool:\n    return tuple1 in tuplex\n\n\n"], "responses": ["```python\ndef check_tuplex(tuplex: List[Union[str, int]], tuple1: Any) -> bool:\n    return tuple1 in tuplex\n```"], "prompt_tokens": [98], "completion_tokens": [36], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_405_check_tuplex"}
{"name": "mbpp_406_find_Parity", "language": "Python3", "prompt": "def find_Parity(x: int) -> bool:\n    \"\"\"\n\tWrite a python function to find whether the parity of a given number is odd.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Parity", "test": "def check(candidate):\n    \n    assert candidate(7)==True\n    assert candidate(10)==False\n\ndef test_check():\n    check(find_Parity)\n\ntest_check()\n", "source_codes": ["\ndef find_Parity(x: int) -> bool:\n    \"\"\"\n    Return True if the parity of x is odd, otherwise False.\n    \"\"\"\n    return bool(x & 1)\n\n\n"], "responses": ["```python\ndef find_Parity(x: int) -> bool:\n    \"\"\"\n    Return True if the parity of x is odd, otherwise False.\n    \"\"\"\n    return bool(x & 1)\n```"], "prompt_tokens": [79], "completion_tokens": [41], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_406_find_Parity"}
{"name": "mbpp_407_rearrange_bigger", "language": "Python3", "prompt": "from typing import Any\n\ndef rearrange_bigger(n: int) -> Any:\n    \"\"\"\n\tWrite a function to create the next bigger number by rearranging the digits of a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rearrange_bigger", "test": "def check(candidate):\n    \n    assert candidate(10)==False\n    assert candidate(102)==120\n\ndef test_check():\n    check(rearrange_bigger)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Any\n\ndef rearrange_bigger(n: int) -> Any:\n    # Convert the number to a list of its digits\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Find the first digit that is smaller than the digit to its right\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, the number cannot be made bigger\n        return -1\n    \n    # Find the smallest digit on the right side of the found digit that is larger than the found digit\n    for j in range(length - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    \n    # Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the digits to the right of the original position\n    digits[i + 1:] = reversed(digits[i + 1:])\n    \n    # Convert the list of digits back to an integer\n    return int(''.join(digits))\n\n\n"], "responses": ["```python\nfrom typing import Any\n\ndef rearrange_bigger(n: int) -> Any:\n    # Convert the number to a list of its digits\n    digits = list(str(n))\n    length = len(digits)\n    \n    # Find the first digit that is smaller than the digit to its right\n    for i in range(length - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        # If no such digit is found, the number cannot be made bigger\n        return -1\n    \n    # Find the smallest digit on the right side of the found digit that is larger than the found digit\n    for j in range(length - 1, i, -1):\n        if digits[j] > digits[i]:\n            break\n    \n    # Swap the found digits\n    digits[i], digits[j] = digits[j], digits[i]\n    \n    # Reverse the digits to the right of the original position\n    digits[i + 1:] = reversed(digits[i + 1:])\n    \n    # Convert the list of digits back to an integer\n    return int(''.join(digits))\n```"], "prompt_tokens": [88], "completion_tokens": [238], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_407_rearrange_bigger"}
{"name": "mbpp_408_k_smallest_pairs", "language": "Python3", "prompt": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "k_smallest_pairs", "test": "def check(candidate):\n    \n    assert candidate([1, 3, 7], [2, 4, 6], 1)==[[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n", "source_codes": ["\nimport heapq\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    if not nums1 or not nums2:\n        return []\n    \n    min_heap = []\n    # Initialize the heap with the smallest pair sum combinations (0, 0), (0, 1), ..., (0, len(nums2) - 1)\n    # along with the indices of elements from both arrays that make up the pair.\n    for i in range(min(k, len(nums2))):  # Only need first k nums2 elements, since nums1[0] is smallest\n        heapq.heappush(min_heap, (nums1[0] + nums2[i], 0, i))\n    \n    result = []\n    # Until we find k pairs and the heap is not empty\n    while k > 0 and min_heap:\n        _, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])  # Add the current smallest pair to the result\n        k -= 1\n        if i + 1 < len(nums1):  # If there are more elements in nums1\n            # Add the next pair in the row/column, i.e., (i + 1, j)\n            heapq.heappush(min_heap, (nums1[i + 1] + nums2[j], i + 1, j))\n    \n    return result\n\n\n"], "responses": ["```python\nimport heapq\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    if not nums1 or not nums2:\n        return []\n    \n    min_heap = []\n    # Initialize the heap with the smallest pair sum combinations (0, 0), (0, 1), ..., (0, len(nums2) - 1)\n    # along with the indices of elements from both arrays that make up the pair.\n    for i in range(min(k, len(nums2))):  # Only need first k nums2 elements, since nums1[0] is smallest\n        heapq.heappush(min_heap, (nums1[0] + nums2[i], 0, i))\n    \n    result = []\n    # Until we find k pairs and the heap is not empty\n    while k > 0 and min_heap:\n        _, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])  # Add the current smallest pair to the result\n        k -= 1\n        if i + 1 < len(nums1):  # If there are more elements in nums1\n            # Add the next pair in the row/column, i.e., (i + 1, j)\n            heapq.heappush(min_heap, (nums1[i + 1] + nums2[j], i + 1, j))\n    \n    return result\n```"], "prompt_tokens": [110], "completion_tokens": [308], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_408_k_smallest_pairs"}
{"name": "mbpp_409_min_product_tuple", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the minimum product from the pairs of tuples within a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_product_tuple", "test": "def check(candidate):\n    \n    assert candidate([(10, 20), (15, 2), (5, 10)])==30\n    assert candidate([(11, 44), (10, 15), (20, 5), (12, 9)])==100\n\ndef test_check():\n    check(min_product_tuple)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min(a * b for a, b in list1)\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min(a * b for a, b in list1)\n```"], "prompt_tokens": [94], "completion_tokens": [42], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_409_min_product_tuple"}
{"name": "mbpp_410_min_val", "language": "Python3", "prompt": "from typing import List, Union\n\ndef min_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the minimum value in a given heterogeneous list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_410_min_val.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_val", "test": "def check(candidate):\n    \n    assert candidate(['Python', 15, 20, 25])==15\n    assert candidate(['Python', 30, 20, 40, 50, 'version'])==20\n\ndef test_check():\n    check(min_val)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Union\n\ndef min_val(listval: List[Union[str, int]]) -> int:\n    # Convert all elements to integers, ignoring non-numeric strings\n    numeric_values = [int(x) for x in listval if isinstance(x, int) or (isinstance(x, str) and x.isdigit())]\n    # Return the minimum value\n    return min(numeric_values)\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef min_val(listval: List[Union[str, int]]) -> int:\n    # Convert all elements to integers, ignoring non-numeric strings\n    numeric_values = [int(x) for x in listval if isinstance(x, int) or (isinstance(x, str) and x.isdigit())]\n    # Return the minimum value\n    return min(numeric_values)\n```"], "prompt_tokens": [89], "completion_tokens": [87], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_410_min_val"}
{"name": "mbpp_411_snake_to_camel", "language": "Python3", "prompt": "def snake_to_camel(word: str) -> str:\n    \"\"\"\n\tWrite a function to convert the given snake case string to camel case string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "snake_to_camel", "test": "def check(candidate):\n    \n    assert candidate('google_pixel')=='GooglePixel'\n    assert candidate('apple_watch')=='AppleWatch'\n\ndef test_check():\n    check(snake_to_camel)\n\ntest_check()\n", "source_codes": ["\ndef snake_to_camel(word: str) -> str:\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n\n\n"], "responses": ["```\ndef snake_to_camel(word: str) -> str:\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n```"], "prompt_tokens": [79], "completion_tokens": [31], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_411_snake_to_camel"}
{"name": "mbpp_412_remove_odd", "language": "Python3", "prompt": "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to remove odd numbers from a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_odd", "test": "def check(candidate):\n    \n    assert candidate([2, 4, 6])==[2, 4, 6]\n    assert candidate([10, 20, 3])==[10, 20]\n\ndef test_check():\n    check(remove_odd)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]\n```"], "prompt_tokens": [82], "completion_tokens": [38], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_412_remove_odd"}
{"name": "mbpp_413_extract_nth_element", "language": "Python3", "prompt": "from typing import List, Tuple, Any\n\ndef extract_nth_element(list1: List[Tuple[str, int, int]], n: int) -> List[Any]:\n    \"\"\"\n\tWrite a function to extract the nth element from a given list of tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_413_extract_nth_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_nth_element", "test": "def check(candidate):\n    \n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)==[99, 96, 94, 98]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)==[98, 97, 91, 94]\n\ndef test_check():\n    check(extract_nth_element)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple, Any\n\ndef extract_nth_element(list1: List[Tuple[str, int, int]], n: int) -> List[Any]:\n    return [tup[n] for tup in list1]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple, Any\n\ndef extract_nth_element(list1: List[Tuple[str, int, int]], n: int) -> List[Any]:\n    return [tup[n] for tup in list1]\n```"], "prompt_tokens": [100], "completion_tokens": [50], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_413_extract_nth_element"}
{"name": "mbpp_414_overlapping", "language": "Python3", "prompt": "from typing import List\n\ndef overlapping(list1: List[int], list2: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "overlapping", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3], [4, 5, 6])==False\n    assert candidate([1, 4, 5], [1, 4, 5])==True\n\ndef test_check():\n    check(overlapping)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef overlapping(list1: List[int], list2: List[int]) -> bool:\n    return any(item in list2 for item in list1)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef overlapping(list1: List[int], list2: List[int]) -> bool:\n    return any(item in list2 for item in list1)\n```"], "prompt_tokens": [93], "completion_tokens": [39], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_414_overlapping"}
{"name": "mbpp_415_max_Product", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"\n\tWrite a python function to find a pair with highest product from a given array of integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_Product", "test": "def check(candidate):\n    \n    assert candidate([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\n    assert candidate([1, 2, 3])==(2, 3)\n\ndef test_check():\n    check(max_Product)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    arr.sort()\n    # Check the product of the largest and second largest number\n    # and the product of the two smallest numbers (which could be negative)\n    if arr[0] * arr[1] > arr[-1] * arr[-2]:\n        return (arr[0], arr[1])\n    else:\n        return (arr[-2], arr[-1])\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    arr.sort()\n    # Check the product of the largest and second largest number\n    # and the product of the two smallest numbers (which could be negative)\n    if arr[0] * arr[1] > arr[-1] * arr[-2]:\n        return (arr[0], arr[1])\n    else:\n        return (arr[-2], arr[-1])\n```"], "prompt_tokens": [91], "completion_tokens": [104], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_415_max_Product"}
{"name": "mbpp_417_group_tuples", "language": "Python3", "prompt": "from typing import List\n\ndef group_tuples(Input: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to find common first element in given list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "group_tuples", "test": "def check(candidate):\n    \n    assert candidate([['a', 'b'], ['a', 'c'], ['d', 'e']])==[['a', 'b', 'c'], ['d', 'e']]\n    assert candidate([['f', 'g'], ['f', 'g'], ['h', 'i']])==[['f', 'g', 'g'], ['h', 'i']]\n\ndef test_check():\n    check(group_tuples)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\nfrom collections import defaultdict\n\ndef group_tuples(Input: List[List[str]]) -> List[List[str]]:\n    # Create a dictionary to hold the groups\n    groups = defaultdict(list)\n    \n    # Iterate over each tuple in the input list\n    for item in Input:\n        # Use the first element of each tuple as the key and append the tuple to the corresponding list\n        groups[item[0]].append(item)\n    \n    # Extract the grouped tuples into a list\n    result = list(groups.values())\n    \n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\nfrom collections import defaultdict\n\ndef group_tuples(Input: List[List[str]]) -> List[List[str]]:\n    # Create a dictionary to hold the groups\n    groups = defaultdict(list)\n    \n    # Iterate over each tuple in the input list\n    for item in Input:\n        # Use the first element of each tuple as the key and append the tuple to the corresponding list\n        groups[item[0]].append(item)\n    \n    # Extract the grouped tuples into a list\n    result = list(groups.values())\n    \n    return result\n```"], "prompt_tokens": [85], "completion_tokens": [115], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_417_group_tuples"}
{"name": "mbpp_418_Find_Max", "language": "Python3", "prompt": "from typing import List, Any\n\ndef Find_Max(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n\tWrite a python function to find the element of a list having maximum length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Max", "test": "def check(candidate):\n    \n    assert candidate([[1], [1, 2], [1, 2, 3]])==[1, 2, 3]\n    assert candidate([[1, 1], [1, 2, 3], [1, 5, 6, 1]])==[1, 5, 6, 1]\n\ndef test_check():\n    check(Find_Max)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef Find_Max(lst: List[List[Any]]) -> List[Any]:\n    max_length = -1\n    max_element = []\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef Find_Max(lst: List[List[Any]]) -> List[Any]:\n    max_length = -1\n    max_element = []\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    return max_element\n```"], "prompt_tokens": [87], "completion_tokens": [69], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_418_Find_Max"}
{"name": "mbpp_419_round_and_sum", "language": "Python3", "prompt": "from typing import List, Union\n\ndef round_and_sum(list1: List[Union[float, int]]) -> int:\n    \"\"\"\n\tWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_419_round_and_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "round_and_sum", "test": "def check(candidate):\n    \n    assert candidate([5, 2, 9, 24.3, 29])==345\n    assert candidate([25.0, 56.7, 89.2])==513\n\ndef test_check():\n    check(round_and_sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Union\n\ndef round_and_sum(list1: List[Union[float, int]]) -> int:\n    rounded_sum = sum(round(num) for num in list1)\n    return rounded_sum * len(list1)\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef round_and_sum(list1: List[Union[float, int]]) -> int:\n    rounded_sum = sum(round(num) for num in list1)\n    return rounded_sum * len(list1)\n```"], "prompt_tokens": [102], "completion_tokens": [51], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_419_round_and_sum"}
{"name": "mbpp_420_cube_Sum", "language": "Python3", "prompt": "def cube_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the cube sum of first n even natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cube_Sum", "test": "def check(candidate):\n    \n    assert candidate(3)==288\n    assert candidate(4)==800\n\ndef test_check():\n    check(cube_Sum)\n\ntest_check()\n", "source_codes": ["\ndef cube_Sum(n: int) -> int:\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**3\n    return sum\n\n\n"], "responses": ["```python\ndef cube_Sum(n: int) -> int:\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**3\n    return sum\n```"], "prompt_tokens": [79], "completion_tokens": [46], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_420_cube_Sum"}
{"name": "mbpp_421_concatenate_tuple", "language": "Python3", "prompt": "from typing import Tuple\n\ndef concatenate_tuple(test_tup: Tuple[str, str, int, str]) -> str:\n    \"\"\"\n\tWrite a function to concatenate each element of tuple by the delimiter.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "concatenate_tuple", "test": "def check(candidate):\n    \n    assert candidate(('QWE', 'is', 4, 'RTY'))=='QWE-is-4-RTY'\n    assert candidate(('ZEN', 'is', 4, 'OP'))=='ZEN-is-4-OP'\n\ndef test_check():\n    check(concatenate_tuple)\n\ntest_check()\n", "source_codes": ["\ndef concatenate_tuple(test_tup: Tuple[str, str, int, str], delimiter: str = '') -> str:\n    return delimiter.join(map(str, test_tup))\n\n\n"], "responses": ["```python\ndef concatenate_tuple(test_tup: Tuple[str, str, int, str], delimiter: str = '') -> str:\n    return delimiter.join(map(str, test_tup))\n```"], "prompt_tokens": [89], "completion_tokens": [39], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_421_concatenate_tuple"}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "Python3", "prompt": "def find_Average_Of_Cube(n: int) -> float:\n    \"\"\"\n\tWrite a python function to find the average of cubes of first n natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Average_Of_Cube", "test": "def check(candidate):\n    \n    assert candidate(3)==12\n    assert candidate(1)==1\n\ndef test_check():\n    check(find_Average_Of_Cube)\n\ntest_check()\n", "source_codes": ["\ndef find_Average_Of_Cube(n: int) -> float:\n    # Calculate the sum of cubes of first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the average of the cubes\n    average = sum_of_cubes / n\n    return average\n\n\n"], "responses": ["```python\ndef find_Average_Of_Cube(n: int) -> float:\n    # Calculate the sum of cubes of first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    # Calculate the average of the cubes\n    average = sum_of_cubes / n\n    return average\n```"], "prompt_tokens": [82], "completion_tokens": [75], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_422_find_Average_Of_Cube"}
{"name": "mbpp_424_extract_rear", "language": "Python3", "prompt": "from typing import Tuple, List\n\ndef extract_rear(test_tuple: Tuple[str, str, str]) -> List[str]:\n    \"\"\"\n\tWrite a function to extract only the rear index element of each string in the given tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_rear", "test": "def check(candidate):\n    \n    assert candidate(('Avenge', 'for', 'People'))==['e', 'r', 'e']\n    assert candidate(('Gotta', 'get', 'go'))==['a', 't', 'o']\n\ndef test_check():\n    check(extract_rear)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple, List\n\ndef extract_rear(test_tuple: Tuple[str, str, str]) -> List[str]:\n    return [item[-1] for item in test_tuple if item]  # Extract the last character of each non-empty string\n\n\n"], "responses": ["```python\nfrom typing import Tuple, List\n\ndef extract_rear(test_tuple: Tuple[str, str, str]) -> List[str]:\n    return [item[-1] for item in test_tuple if item]  # Extract the last character of each non-empty string\n```"], "prompt_tokens": [95], "completion_tokens": [56], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_424_extract_rear"}
{"name": "mbpp_425_count_element_in_list", "language": "Python3", "prompt": "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    \"\"\"\n\tWrite a function to count the number of sublists containing a particular element.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_425_count_element_in_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_element_in_list", "test": "def check(candidate):\n    \n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'A')==3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'E')==1\n\ndef test_check():\n    check(count_element_in_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum(x in sublist for sublist in list1)\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum(x in sublist for sublist in list1)\n```"], "prompt_tokens": [93], "completion_tokens": [42], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_425_count_element_in_list"}
{"name": "mbpp_426_filter_oddnumbers", "language": "Python3", "prompt": "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to filter odd numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "filter_oddnumbers", "test": "def check(candidate):\n    \n    assert candidate([10, 20, 45, 67, 84, 93])==[45, 67, 93]\n    assert candidate([5, 7, 9, 8, 6, 4, 3])==[5, 7, 9, 3]\n\ndef test_check():\n    check(filter_oddnumbers)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]\n```"], "prompt_tokens": [78], "completion_tokens": [39], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_426_filter_oddnumbers"}
{"name": "mbpp_427_change_date_format", "language": "Python3", "prompt": "def change_date_format(dt: str) -> str:\n    \"\"\"\n\tWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "change_date_format", "test": "def check(candidate):\n    \n    assert candidate('2020-11-13')=='13-11-2020'\n    assert candidate('2021-04-26')=='26-04-2021'\n\ndef test_check():\n    check(change_date_format)\n\ntest_check()\n", "source_codes": ["\ndef change_date_format(dt: str) -> str:\n    # Split the input string by the '-' delimiter\n    parts = dt.split('-')\n    # Rearrange the parts in the desired order and join them back with '-' as the delimiter\n    return f\"{parts[2]}-{parts[1]}-{parts[0]}\"\n\n\n"], "responses": ["```\ndef change_date_format(dt: str) -> str:\n    # Split the input string by the '-' delimiter\n    parts = dt.split('-')\n    # Rearrange the parts in the desired order and join them back with '-' as the delimiter\n    return f\"{parts[2]}-{parts[1]}-{parts[0]}\"\n```"], "prompt_tokens": [81], "completion_tokens": [70], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_427_change_date_format"}
{"name": "mbpp_428_shell_sort", "language": "Python3", "prompt": "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort the given array by using shell sort.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "shell_sort", "test": "def check(candidate):\n    \n    assert candidate([24, 22, 39, 34, 87, 73, 68])==[22, 24, 34, 39, 68, 73, 87]\n    assert candidate([32, 30, 16, 96, 82, 83, 74])==[16, 30, 32, 74, 82, 83, 96]\n\ndef test_check():\n    check(shell_sort)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n```"], "prompt_tokens": [83], "completion_tokens": [117], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_428_shell_sort"}
{"name": "mbpp_429_and_tuples", "language": "Python3", "prompt": "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to extract the elementwise and tuples from the given two tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "and_tuples", "test": "def check(candidate):\n    \n    assert candidate((1, 2, 3, 4), (5, 6, 7, 8))==(1, 2, 3, 0)\n    assert candidate((8, 9, 11, 12), (7, 13, 14, 17))==(0, 9, 10, 0)\n\ndef test_check():\n    check(and_tuples)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(a & b for a, b in zip(test_tup1, test_tup2))\n```"], "prompt_tokens": [114], "completion_tokens": [72], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_429_and_tuples"}
{"name": "mbpp_430_parabola_directrix", "language": "Python3", "prompt": "def parabola_directrix(a: int, b: int, c: int) -> int:\n    \"\"\"\n\tWrite a function to find the directrix of a parabola.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "parabola_directrix", "test": "def check(candidate):\n    \n    assert candidate(9, 8, 4)==-2336\n    assert candidate(2, 4, 6)==-130\n\ndef test_check():\n    check(parabola_directrix)\n\ntest_check()\n", "source_codes": ["\ndef parabola_directrix(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Write a function to find the directrix of a parabola given its quadratic equation ax^2 + bx + c.\n    The vertex form of a parabola is y = a(x-h)^2 + k, where (h, k) is the vertex of the parabola.\n    The directrix is y = k - 1/(4a) when the parabola opens upwards or downwards.\n    \"\"\"\n    # The vertex (h, k) can be found by completing the square or using the formula h = -b/(2a)\n    h = -b / (2 * a)\n    # k can be found by plugging the value of h back into the original equation\n    k = a * h**2 + b * h + c\n    # The directrix is then k - 1/(4a)\n    directrix = k - 1 / (4 * a)\n    return directrix\n\n\n"], "responses": ["```python\ndef parabola_directrix(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Write a function to find the directrix of a parabola given its quadratic equation ax^2 + bx + c.\n    The vertex form of a parabola is y = a(x-h)^2 + k, where (h, k) is the vertex of the parabola.\n    The directrix is y = k - 1/(4a) when the parabola opens upwards or downwards.\n    \"\"\"\n    # The vertex (h, k) can be found by completing the square or using the formula h = -b/(2a)\n    h = -b / (2 * a)\n    # k can be found by plugging the value of h back into the original equation\n    k = a * h**2 + b * h + c\n    # The directrix is then k - 1/(4a)\n    directrix = k - 1 / (4 * a)\n    return directrix\n```"], "prompt_tokens": [87], "completion_tokens": [222], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_430_parabola_directrix"}
{"name": "mbpp_431_common_element", "language": "Python3", "prompt": "from typing import List, Any, Optional\n\ndef common_element(list1: List[Any], list2: List[Any]) -> Optional[bool]:\n    \"\"\"\n\tWrite a function that takes two lists and returns true if they have at least one common element.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "common_element", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5], [6, 7, 8, 9])==None\n    assert candidate(['a', 'b', 'c'], ['d', 'b', 'e'])==True\n\ndef test_check():\n    check(common_element)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any, Optional\n\ndef common_element(list1: List[Any], list2: List[Any]) -> bool:\n    return any(element in list2 for element in list1)\n\n\n"], "responses": ["```python\nfrom typing import List, Any, Optional\n\ndef common_element(list1: List[Any], list2: List[Any]) -> bool:\n    return any(element in list2 for element in list1)\n```"], "prompt_tokens": [100], "completion_tokens": [44], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_431_common_element"}
{"name": "mbpp_432_median_trapezium", "language": "Python3", "prompt": "def median_trapezium(base1: int, base2: int, height: int) -> float:\n    \"\"\"\n\tWrite a function to find the median length of a trapezium.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "median_trapezium", "test": "def check(candidate):\n    \n    assert candidate(10, 20, 30)==15\n    assert candidate(6, 9, 4)==7.5\n\ndef test_check():\n    check(median_trapezium)\n\ntest_check()\n", "source_codes": ["\ndef median_trapezium(base1: int, base2: int, height: int) -> float:\n    \"\"\"\n    Calculate the median length of a trapezium, which is the average length of the two bases.\n    \"\"\"\n    return (base1 + base2) / 2\n\n\n"], "responses": ["```python\ndef median_trapezium(base1: int, base2: int, height: int) -> float:\n    \"\"\"\n    Calculate the median length of a trapezium, which is the average length of the two bases.\n    \"\"\"\n    return (base1 + base2) / 2\n```"], "prompt_tokens": [90], "completion_tokens": [66], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_432_median_trapezium"}
{"name": "mbpp_433_check_greater", "language": "Python3", "prompt": "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the entered number is greater than the elements of the given array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_433_check_greater.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_greater", "test": "def check(candidate):\n    \n    assert candidate([2, 3, 4, 5, 6], 8)==True\n    assert candidate([9, 7, 4, 8, 6, 1], 11)==True\n\ndef test_check():\n    check(check_greater)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all(number > element for element in arr)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all(number > element for element in arr)\n```"], "prompt_tokens": [91], "completion_tokens": [35], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_433_check_greater"}
{"name": "mbpp_434_text_match_one", "language": "Python3", "prompt": "def text_match_one(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an a followed by one or more b's.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_one", "test": "def check(candidate):\n    \n    assert candidate('dc')==False\n    assert candidate('abba')==True\n\ndef test_check():\n    check(text_match_one)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef text_match_one(text: str) -> bool:\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_one(text: str) -> bool:\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n```"], "prompt_tokens": [82], "completion_tokens": [44], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_434_text_match_one"}
{"name": "mbpp_435_last_Digit", "language": "Python3", "prompt": "def last_Digit(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the last digit of a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_435_last_Digit.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "last_Digit", "test": "def check(candidate):\n    \n    assert candidate(25)==5\n    assert candidate(30)==0\n\ndef test_check():\n    check(last_Digit)\n\ntest_check()\n", "source_codes": ["\ndef last_Digit(n: int) -> int:\n    return abs(n) % 10\n\n\n"], "responses": ["```python\ndef last_Digit(n: int) -> int:\n    return abs(n) % 10\n```"], "prompt_tokens": [77], "completion_tokens": [24], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_435_last_Digit"}
{"name": "mbpp_436_neg_nos", "language": "Python3", "prompt": "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to return the negative numbers in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "neg_nos", "test": "def check(candidate):\n    \n    assert candidate([-1, -2, 3, 4])==[-1, -2]\n    assert candidate([-7, -6, 8, 9])==[-7, -6]\n\ndef test_check():\n    check(neg_nos)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]\n```"], "prompt_tokens": [84], "completion_tokens": [38], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_436_neg_nos"}
{"name": "mbpp_437_remove_odd", "language": "Python3", "prompt": "def remove_odd(str1: str) -> str:\n    \"\"\"\n\tWrite a function to remove odd characters in a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_odd", "test": "def check(candidate):\n    \n    assert candidate('program')=='rga'\n    assert candidate('language')=='agae'\n\ndef test_check():\n    check(remove_odd)\n\ntest_check()\n", "source_codes": ["\ndef remove_odd(str1: str) -> str:\n    return str1[::2]\n\n\n"], "responses": ["```python\ndef remove_odd(str1: str) -> str:\n    return str1[::2]\n```"], "prompt_tokens": [74], "completion_tokens": [23], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_437_remove_odd"}
{"name": "mbpp_438_count_bidirectional", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to count bidirectional tuple pairs.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_bidirectional", "test": "def check(candidate):\n    \n    assert candidate([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)])==2\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)])==4\n\ndef test_check():\n    check(count_bidirectional)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> int:\n    # Initialize count to 0\n    count = 0\n    # Create a set to store unique tuples\n    seen = set()\n    # Iterate over each tuple in the list\n    for a, b in test_list:\n        # Check if the reverse tuple is in the set\n        if (b, a) in seen:\n            # If yes, increment the count\n            count += 1\n        # Add the current tuple to the set\n        seen.add((a, b))\n    # Return the count of bidirectional pairs\n    return count\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> int:\n    # Initialize count to 0\n    count = 0\n    # Create a set to store unique tuples\n    seen = set()\n    # Iterate over each tuple in the list\n    for a, b in test_list:\n        # Check if the reverse tuple is in the set\n        if (b, a) in seen:\n            # If yes, increment the count\n            count += 1\n        # Add the current tuple to the set\n        seen.add((a, b))\n    # Return the count of bidirectional pairs\n    return count\n```"], "prompt_tokens": [86], "completion_tokens": [145], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_438_count_bidirectional"}
{"name": "mbpp_439_multiple_to_single", "language": "Python3", "prompt": "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    \"\"\"\n\tWrite a function to join a list of multiple integers into a single integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "multiple_to_single", "test": "def check(candidate):\n    \n    assert candidate([-1, 2, 3, 4, 5, 6])==-123456\n    assert candidate([10, 15, 20, 25])==10152025\n\ndef test_check():\n    check(multiple_to_single)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))\n```"], "prompt_tokens": [84], "completion_tokens": [32], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_439_multiple_to_single"}
{"name": "mbpp_440_find_adverb_position", "language": "Python3", "prompt": "from typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    \"\"\"\n\tWrite a function to find the first adverb and their positions in a given sentence.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_adverb_position", "test": "def check(candidate):\n    \n    assert candidate('seriously!! there are many roses')==(0, 9, 'seriously')\n    assert candidate('unfortunately!! sita is going to home')==(0, 13, 'unfortunately')\n\ndef test_check():\n    check(find_adverb_position)\n\ntest_check()\n", "source_codes": ["\nimport nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk import pos_tag\n\nnltk.download('averaged_perceptron_tagger')\nnltk.download('punkt')\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    words = word_tokenize(text)\n    tagged_words = pos_tag(words)\n    for i, (word, tag) in enumerate(tagged_words):\n        if tag in ('RB', 'RBR', 'RBS'):\n            start_position = text.find(word)\n            end_position = start_position + len(word) - 1\n            return (start_position, end_position, word)\n    return (-1, -1, \"\")\n\n# Example usage:\n# position = find_adverb_position(\"He quickly solved the puzzle.\")\n# print(position)  # Output should be the position of 'quickly' and the word itself\n\n\n"], "responses": ["```python\nimport nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk import pos_tag\n\nnltk.download('averaged_perceptron_tagger')\nnltk.download('punkt')\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    words = word_tokenize(text)\n    tagged_words = pos_tag(words)\n    for i, (word, tag) in enumerate(tagged_words):\n        if tag in ('RB', 'RBR', 'RBS'):\n            start_position = text.find(word)\n            end_position = start_position + len(word) - 1\n            return (start_position, end_position, word)\n    return (-1, -1, \"\")\n\n# Example usage:\n# position = find_adverb_position(\"He quickly solved the puzzle.\")\n# print(position)  # Output should be the position of 'quickly' and the word itself\n```"], "prompt_tokens": [91], "completion_tokens": [181], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_440_find_adverb_position"}
{"name": "mbpp_441_surfacearea_cube", "language": "Python3", "prompt": "def surfacearea_cube(l: int) -> int:\n    \"\"\"\n\tWrite a function to find the surface area of a cube of a given size.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "surfacearea_cube", "test": "def check(candidate):\n    \n    assert candidate(3)==54\n    assert candidate(10)==600\n\ndef test_check():\n    check(surfacearea_cube)\n\ntest_check()\n", "source_codes": ["\ndef surfacearea_cube(l: int) -> int:\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l * l\n\n\n"], "responses": ["```python\ndef surfacearea_cube(l: int) -> int:\n    \"\"\"\n    Write a function to find the surface area of a cube of a given size.\n    \"\"\"\n    return 6 * l * l\n```"], "prompt_tokens": [79], "completion_tokens": [45], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_441_surfacearea_cube"}
{"name": "mbpp_442_positive_count", "language": "Python3", "prompt": "from typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    \"\"\"\n\tWrite a function to find the ration of positive numbers in an array of integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "positive_count", "test": "def check(candidate):\n    \n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56\n\ndef test_check():\n    check(positive_count)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    positive_nums = [num for num in nums if num > 0]\n    if len(nums) == 0:\n        return 0.0\n    ratio = len(positive_nums) / len(nums)\n    return ratio\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    positive_nums = [num for num in nums if num > 0]\n    if len(nums) == 0:\n        return 0.0\n    ratio = len(positive_nums) / len(nums)\n    return ratio\n```"], "prompt_tokens": [84], "completion_tokens": [68], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_442_positive_count"}
{"name": "mbpp_443_largest_neg", "language": "Python3", "prompt": "from typing import List\n\ndef largest_neg(list1: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the largest negative number from the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "largest_neg", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, -8, -9])==-9\n    assert candidate([1, 2, 3, 4, -1])==-1\n\ndef test_check():\n    check(largest_neg)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef largest_neg(list1: List[int]) -> int:\n    largest_negative = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_negative:\n            largest_negative = num\n    return largest_negative if largest_negative != float('-inf') else None\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef largest_neg(list1: List[int]) -> int:\n    largest_negative = float('-inf')\n    for num in list1:\n        if num < 0 and num > largest_negative:\n            largest_negative = num\n    return largest_negative if largest_negative != float('-inf') else None\n```"], "prompt_tokens": [84], "completion_tokens": [69], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_443_largest_neg"}
{"name": "mbpp_444_trim_tuple", "language": "Python3", "prompt": "from typing import List\n\ndef trim_tuple(test_list: List[List[int]], K: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to trim each list by k in the given lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "trim_tuple", "test": "def check(candidate):\n    \n    assert candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1)==[[3, 2, 1], [4, 9, 2], [1, 2, 3], [8, 2, 1]]\n    assert candidate([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1)==[[8, 4], [8, 12], [1, 7], [6, 9]]\n\ndef test_check():\n    check(trim_tuple)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef trim_tuple(test_list: List[List[int]], K: int) -> List[List[int]]:\n    return [sub[K:] for sub in test_list]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef trim_tuple(test_list: List[List[int]], K: int) -> List[List[int]]:\n    return [sub[K:] for sub in test_list]\n```"], "prompt_tokens": [90], "completion_tokens": [40], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_444_trim_tuple"}
{"name": "mbpp_445_index_multiplication", "language": "Python3", "prompt": "from typing import List\n\ndef index_multiplication(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to perform index wise multiplication of list elements in the given two lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "index_multiplication", "test": "def check(candidate):\n    \n    assert candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])==[[14, 32], [20, 60], [6, 20], [16, 44]]\n    assert candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])==[[24, 45], [30, 77], [12, 33], [27, 60]]\n\ndef test_check():\n    check(index_multiplication)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef index_multiplication(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            row.append(test_tup1[i][j] * test_tup2[i][j])\n        result.append(row)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef index_multiplication(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    result = []\n    for i in range(len(test_tup1)):\n        row = []\n        for j in range(len(test_tup1[i])):\n            row.append(test_tup1[i][j] * test_tup2[i][j])\n        result.append(row)\n    return result\n```"], "prompt_tokens": [101], "completion_tokens": [96], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_445_index_multiplication"}
{"name": "mbpp_446_count_Occurrence", "language": "Python3", "prompt": "from typing import Any, List\n\ndef count_Occurrence(tup: Any, lst: List[Any]) -> int:\n    \"\"\"\n\tWrite a python function to count the occurence of all elements of list in a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Occurrence", "test": "def check(candidate):\n    \n    assert candidate((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7])==6\n    assert candidate((1, 2, 3, 4, 5, 6), [1, 2])==2\n\ndef test_check():\n    check(count_Occurrence)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Any, List\n\ndef count_occurrence(tup: Any, lst: List[Any]) -> int:\n    count = 0\n    for element in lst:\n        count += tup.count(element)\n    return count\n\n\n"], "responses": ["```python\nfrom typing import Any, List\n\ndef count_occurrence(tup: Any, lst: List[Any]) -> int:\n    count = 0\n    for element in lst:\n        count += tup.count(element)\n    return count\n```"], "prompt_tokens": [95], "completion_tokens": [51], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_446_count_Occurrence"}
{"name": "mbpp_447_cube_nums", "language": "Python3", "prompt": "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find cubes of individual elements in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cube_nums", "test": "def check(candidate):\n    \n    assert candidate([10, 20, 30])==[1000, 8000, 27000]\n    assert candidate([12, 15])==[1728, 3375]\n\ndef test_check():\n    check(cube_nums)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [num ** 3 for num in nums]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [num ** 3 for num in nums]\n```"], "prompt_tokens": [82], "completion_tokens": [33], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_447_cube_nums"}
{"name": "mbpp_448_cal_sum", "language": "Python3", "prompt": "def cal_sum(n: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the sum of perrin numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cal_sum", "test": "def check(candidate):\n    \n    assert candidate(10)==66\n    assert candidate(11)==88\n\ndef test_check():\n    check(cal_sum)\n\ntest_check()\n", "source_codes": ["\ndef perrin_sum(n: int) -> int:\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n\n    perrin_numbers = [3, 0, 2]\n    for i in range(3, n + 1):\n        next_perrin = perrin_numbers[i - 2] + perrin_numbers[i - 3]\n        perrin_numbers.append(next_perrin)\n\n    return sum(perrin_numbers)\n\n# Example usage:\n# print(cal_sum(10))  # This would print the sum of the first 10 Perrin numbers\n\n\n"], "responses": ["```\ndef perrin_sum(n: int) -> int:\n    if n == 0:\n        return 3\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n\n    perrin_numbers = [3, 0, 2]\n    for i in range(3, n + 1):\n        next_perrin = perrin_numbers[i - 2] + perrin_numbers[i - 3]\n        perrin_numbers.append(next_perrin)\n\n    return sum(perrin_numbers)\n\n# Example usage:\n# print(cal_sum(10))  # This would print the sum of the first 10 Perrin numbers\n```"], "prompt_tokens": [75], "completion_tokens": [150], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_448_cal_sum"}
{"name": "mbpp_450_extract_string", "language": "Python3", "prompt": "from typing import List\n\ndef extract_string(str: List[str], l: int) -> List[str]:\n    \"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_string", "test": "def check(candidate):\n    \n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'], 6)==['Python']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'], 9)==['exercises']\n\ndef test_check():\n    check(extract_string)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef extract_string(str_list: List[str], l: int) -> List[str]:\n    return [s for s in str_list if len(s) == l]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef extract_string(str_list: List[str], l: int) -> List[str]:\n    return [s for s in str_list if len(s) == l]\n```"], "prompt_tokens": [90], "completion_tokens": [42], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_450_extract_string"}
{"name": "mbpp_451_remove_whitespaces", "language": "Python3", "prompt": "def remove_whitespaces(text1: str) -> str:\n    \"\"\"\n\tWrite a function to remove all whitespaces from the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_whitespaces", "test": "def check(candidate):\n    \n    assert candidate(' Google    Dart ')=='GoogleDart'\n    assert candidate(' iOS    Swift ')=='iOSSwift'\n\ndef test_check():\n    check(remove_whitespaces)\n\ntest_check()\n", "source_codes": ["\ndef remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())\n\n# Example usage:\n# result = remove_whitespaces(\"Example text with    spaces\")\n# print(result)  # Output: \"Exampletextwithspaces\"\n\n\n"], "responses": ["```\ndef remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())\n\n# Example usage:\n# result = remove_whitespaces(\"Example text with    spaces\")\n# print(result)  # Output: \"Exampletextwithspaces\"\n```"], "prompt_tokens": [78], "completion_tokens": [56], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_451_remove_whitespaces"}
{"name": "mbpp_452_loss_amount", "language": "Python3", "prompt": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "loss_amount", "test": "def check(candidate):\n    \n    assert candidate(100, 200)==100\n    assert candidate(2000, 5000)==3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n", "source_codes": ["\ndef loss_amount(actual_cost: int, sale_amount: int) -> int:\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n\n"], "responses": ["```python\ndef loss_amount(actual_cost: int, sale_amount: int) -> int:\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n```"], "prompt_tokens": [89], "completion_tokens": [44], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_452_loss_amount"}
{"name": "mbpp_453_sumofFactors", "language": "Python3", "prompt": "def sumofFactors(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of even factors of a number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sumofFactors", "test": "def check(candidate):\n    \n    assert candidate(30)==48\n    assert candidate(6)==8\n\ndef test_check():\n    check(sumofFactors)\n\ntest_check()\n", "source_codes": ["\ndef sumofFactors(n: int) -> int:\n    sum_even_factors = 0\n    for i in range(2, n + 1, 2):  # start from 2 and increment by 2 for even numbers only\n        if n % i == 0:\n            sum_even_factors += i\n    return sum_even_factors\n\n\n"], "responses": ["```python\ndef sumofFactors(n: int) -> int:\n    sum_even_factors = 0\n    for i in range(2, n + 1, 2):  # start from 2 and increment by 2 for even numbers only\n        if n % i == 0:\n            sum_even_factors += i\n    return sum_even_factors\n```"], "prompt_tokens": [78], "completion_tokens": [77], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_453_sumofFactors"}
{"name": "mbpp_454_text_match_wordz", "language": "Python3", "prompt": "def text_match_wordz(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a word containing 'z'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_wordz", "test": "def check(candidate):\n    \n    assert candidate('xyz.')==True\n    assert candidate('  lang  .')==False\n\ndef test_check():\n    check(text_match_wordz)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef text_match_wordz(text: str) -> bool:\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_wordz(text: str) -> bool:\n    pattern = r'\\b\\w*z\\w*\\b'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n```"], "prompt_tokens": [75], "completion_tokens": [52], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_454_text_match_wordz"}
{"name": "mbpp_455_check_monthnumb_number", "language": "Python3", "prompt": "def check_monthnumb_number(monthnum2: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given month number contains 31 days or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_455_check_monthnumb_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_monthnumb_number", "test": "def check(candidate):\n    \n    assert candidate(2)==False\n    assert candidate(6)==False\n\ndef test_check():\n    check(check_monthnumb_number)\n\ntest_check()\n", "source_codes": ["\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    # Months with 31 days are January (1), March (3), May (5), July (7), August (8), October (10), and December (12)\n    return monthnum2 in (1, 3, 5, 7, 8, 10, 12)\n\n\n"], "responses": ["```python\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    \"\"\"\n    # Months with 31 days are January (1), March (3), May (5), July (7), August (8), October (10), and December (12)\n    return monthnum2 in (1, 3, 5, 7, 8, 10, 12)\n```"], "prompt_tokens": [84], "completion_tokens": [105], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_455_check_monthnumb_number"}
{"name": "mbpp_456_reverse_string_list", "language": "Python3", "prompt": "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    \"\"\"\n\tWrite a function to reverse each string in a given list of string values.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "reverse_string_list", "test": "def check(candidate):\n    \n    assert candidate(['john', 'amal', 'joel', 'george'])==['nhoj', 'lama', 'leoj', 'egroeg']\n    assert candidate(['jack', 'john', 'mary'])==['kcaj', 'nhoj', 'yram']\n\ndef test_check():\n    check(reverse_string_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]\n```"], "prompt_tokens": [86], "completion_tokens": [36], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_456_reverse_string_list"}
{"name": "mbpp_457_Find_Min", "language": "Python3", "prompt": "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n\tWrite a python function to find the sublist having minimum length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Min", "test": "def check(candidate):\n    \n    assert candidate([[1, 1], [1, 1, 1], [1, 2, 7, 8]])==[1, 1]\n    assert candidate([['x'], ['x', 'y'], ['x', 'y', 'z']])==['x']\n\ndef test_check():\n    check(Find_Min)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    # Initialize the minimum length to infinity\n    min_length = float('inf')\n    # Initialize the sublist with minimum length to None\n    min_sublist = None\n    \n    # Iterate through each sublist in the list\n    for sublist in lst:\n        # Check if the current sublist's length is less than the minimum length found so far\n        if len(sublist) < min_length:\n            # Update the minimum length and the sublist with minimum length\n            min_length = len(sublist)\n            min_sublist = sublist\n            \n    # Return the sublist with minimum length\n    return min_sublist\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    # Initialize the minimum length to infinity\n    min_length = float('inf')\n    # Initialize the sublist with minimum length to None\n    min_sublist = None\n    \n    # Iterate through each sublist in the list\n    for sublist in lst:\n        # Check if the current sublist's length is less than the minimum length found so far\n        if len(sublist) < min_length:\n            # Update the minimum length and the sublist with minimum length\n            min_length = len(sublist)\n            min_sublist = sublist\n            \n    # Return the sublist with minimum length\n    return min_sublist\n```"], "prompt_tokens": [84], "completion_tokens": [147], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_457_Find_Min"}
{"name": "mbpp_458_rectangle_area", "language": "Python3", "prompt": "def rectangle_area(l: int, b: int) -> int:\n    \"\"\"\n\tWrite a function to find the area of a rectangle.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rectangle_area", "test": "def check(candidate):\n    \n    assert candidate(10, 5)==50\n    assert candidate(4, 2)==8\n\ndef test_check():\n    check(rectangle_area)\n\ntest_check()\n", "source_codes": ["\ndef rectangle_area(l: int, b: int) -> int:\n    return l * b\n\n\n"], "responses": ["```\ndef rectangle_area(l: int, b: int) -> int:\n    return l * b\n```"], "prompt_tokens": [77], "completion_tokens": [23], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_458_rectangle_area"}
{"name": "mbpp_459_remove_uppercase", "language": "Python3", "prompt": "def remove_uppercase(str1: str) -> str:\n    \"\"\"\n\tWrite a function to remove uppercase substrings from a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_uppercase", "test": "def check(candidate):\n    \n    assert candidate('wAtchTheinTernEtrAdIo')=='wtchheinerntrdo'\n    assert candidate('VoicESeaRchAndreComMendaTionS')=='oiceachndreomendaion'\n\ndef test_check():\n    check(remove_uppercase)\n\ntest_check()\n", "source_codes": ["\ndef remove_uppercase(str1: str) -> str:\n    return ''.join([char for char in str1 if not char.isupper()])\n\n\n"], "responses": ["```python\ndef remove_uppercase(str1: str) -> str:\n    return ''.join([char for char in str1 if not char.isupper()])\n```"], "prompt_tokens": [77], "completion_tokens": [33], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_459_remove_uppercase"}
{"name": "mbpp_460_Extract", "language": "Python3", "prompt": "from typing import List\n\ndef Extract(lst: List[List[int]]) -> List[int]:\n    \"\"\"\n\tWrite a python function to get the first element of each sublist.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Extract", "test": "def check(candidate):\n    \n    assert candidate([[1, 2, 3], [4, 5]])==[1, 4]\n    assert candidate([[9, 8, 1], [1, 2]])==[9, 1]\n\ndef test_check():\n    check(Extract)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef Extract(lst: List[List[int]]) -> List[int]:\n    return [sublist[0] for sublist in lst if sublist]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Extract(lst: List[List[int]]) -> List[int]:\n    return [sublist[0] for sublist in lst if sublist]\n```"], "prompt_tokens": [82], "completion_tokens": [36], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_460_Extract"}
{"name": "mbpp_461_upper_ctr", "language": "Python3", "prompt": "def upper_ctr(str: str) -> int:\n    \"\"\"\n\tWrite a python function to count the upper case characters in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "upper_ctr", "test": "def check(candidate):\n    \n    assert candidate('BigData')==1\n    assert candidate('program')==0\n\ndef test_check():\n    check(upper_ctr)\n\ntest_check()\n", "source_codes": ["\ndef upper_ctr(str: str) -> int:\n    return sum(1 for c in str if c.isupper())\n\n\n"], "responses": ["```python\ndef upper_ctr(str: str) -> int:\n    return sum(1 for c in str if c.isupper())\n```"], "prompt_tokens": [77], "completion_tokens": [28], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_461_upper_ctr"}
{"name": "mbpp_462_combinations_list", "language": "Python3", "prompt": "from typing import List, Union\n\ndef combinations_list(list1: List[str]) -> List[Union[List[None], List[str]]]:\n    \"\"\"\n\tWrite a function to find all possible combinations of the elements of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_462_combinations_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "combinations_list", "test": "def check(candidate):\n    \n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    assert candidate(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n\ndef test_check():\n    check(combinations_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Union\nfrom itertools import combinations\n\ndef combinations_list(list1: List[str]) -> List[Union[List[None], List[str]]]:\n    result = []\n    for i in range(len(list1) + 1):\n        for combo in combinations(list1, i):\n            result.append(list(combo))\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Union\nfrom itertools import combinations\n\ndef combinations_list(list1: List[str]) -> List[Union[List[None], List[str]]]:\n    result = []\n    for i in range(len(list1) + 1):\n        for combo in combinations(list1, i):\n            result.append(list(combo))\n    return result\n```"], "prompt_tokens": [96], "completion_tokens": [75], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_462_combinations_list"}
{"name": "mbpp_463_max_subarray_product", "language": "Python3", "prompt": "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum product subarray of the given array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_subarray_product", "test": "def check(candidate):\n    \n    assert candidate([6, -3, -10, 0, 2])==180\n    assert candidate([-2, -40, 0, -2, -3])==80\n\ndef test_check():\n    check(max_subarray_product)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = float('-inf')\n    min_product = float('inf')\n    current_max = current_min = 1\n\n    for num in arr:\n        if num == 0:\n            current_max, current_min = 1, 1\n            max_product = max(max_product, 0)\n            continue\n\n        temp = current_max * num\n        current_max = max(num, temp, current_min * num)\n        current_min = min(num, temp, current_min * num)\n\n        max_product = max(max_product, current_max)\n\n    return max_product\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = float('-inf')\n    min_product = float('inf')\n    current_max = current_min = 1\n\n    for num in arr:\n        if num == 0:\n            current_max, current_min = 1, 1\n            max_product = max(max_product, 0)\n            continue\n\n        temp = current_max * num\n        current_max = max(num, temp, current_min * num)\n        current_min = min(num, temp, current_min * num)\n\n        max_product = max(max_product, current_max)\n\n    return max_product\n```"], "prompt_tokens": [85], "completion_tokens": [140], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_463_max_subarray_product"}
{"name": "mbpp_464_check_value", "language": "Python3", "prompt": "from typing import Dict\n\ndef check_value(dict: Dict[str, int], n: int) -> bool:\n    \"\"\"\n\tWrite a function to check if all values are same in a dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_464_check_value.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_value", "test": "def check(candidate):\n    \n    assert candidate({ 'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12 }, 12)==True\n    assert candidate({ 'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12 }, 5)==False\n\ndef test_check():\n    check(check_value)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Dict\n\ndef check_value(dict: Dict[str, int], n: int) -> bool:\n    return all(value == n for value in dict.values())\n\n\n"], "responses": ["```python\nfrom typing import Dict\n\ndef check_value(dict: Dict[str, int], n: int) -> bool:\n    return all(value == n for value in dict.values())\n```"], "prompt_tokens": [88], "completion_tokens": [38], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_464_check_value"}
{"name": "mbpp_465_drop_empty", "language": "Python3", "prompt": "from typing import Dict, Optional\n\ndef drop_empty(dict1: Dict[str, Optional[str]]) -> Dict[str, str]:\n    \"\"\"\n\tWrite a function to drop empty items from a given dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "drop_empty", "test": "def check(candidate):\n    \n    assert candidate({ 'c1': 'Red', 'c2': None, 'c3': None })=={ 'c1': 'Red' }\n    assert candidate({ 'c1': None, 'c2': 'Green', 'c3': None })=={ 'c2': 'Green' }\n\ndef test_check():\n    check(drop_empty)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Dict, Optional\n\ndef drop_empty(dict1: Dict[str, Optional[str]]) -> Dict[str, str]:\n    return {k: v for k, v in dict1.items() if v is not None}\n\n\n"], "responses": ["```python\nfrom typing import Dict, Optional\n\ndef drop_empty(dict1: Dict[str, Optional[str]]) -> Dict[str, str]:\n    return {k: v for k, v in dict1.items() if v is not None}\n```"], "prompt_tokens": [89], "completion_tokens": [50], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_465_drop_empty"}
{"name": "mbpp_468_max_product", "language": "Python3", "prompt": "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_product", "test": "def check(candidate):\n    \n    assert candidate([4, 42, 55, 68, 80])==50265600\n    assert candidate([10, 22, 9, 33, 21, 50, 41, 60])==2460\n\ndef test_check():\n    check(max_product)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize a dp array where dp[i] will store the maximum product\n    # ending with arr[i]\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]  # The minimum product ending at i is the number itself\n\n    # Compute the maximum product subsequence\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:  # Check for increasing subsequence\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)  # The maximum product subsequence\n\n# Example usage:\n# print(max_product([3, 100, 4, 5, 150, 6]))  # Output should be 45000\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize a dp array where dp[i] will store the maximum product\n    # ending with arr[i]\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]  # The minimum product ending at i is the number itself\n\n    # Compute the maximum product subsequence\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:  # Check for increasing subsequence\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)  # The maximum product subsequence\n\n# Example usage:\n# print(max_product([3, 100, 4, 5, 150, 6]))  # Output should be 45000\n```"], "prompt_tokens": [89], "completion_tokens": [205], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_468_max_product"}
{"name": "mbpp_470_add_pairwise", "language": "Python3", "prompt": "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_pairwise", "test": "def check(candidate):\n    \n    assert candidate((2, 6, 8, 9, 11))==(8, 14, 17, 20)\n    assert candidate((3, 7, 9, 10, 12))==(10, 16, 19, 22)\n\ndef test_check():\n    check(add_pairwise)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))\n```"], "prompt_tokens": [103], "completion_tokens": [68], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_470_add_pairwise"}
{"name": "mbpp_471_find_remainder", "language": "Python3", "prompt": "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the product of the array multiplication modulo n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_remainder", "test": "def check(candidate):\n    \n    assert candidate([1, 1, 1], 1)==0\n    assert candidate([1, 2, 1], 2)==0\n\ndef test_check():\n    check(find_remainder)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n```"], "prompt_tokens": [88], "completion_tokens": [52], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_471_find_remainder"}
{"name": "mbpp_472_check_Consecutive", "language": "Python3", "prompt": "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_Consecutive", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 5, 6])==False\n    assert candidate([1, 2, 1])==False\n\ndef test_check():\n    check(check_Consecutive)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:  # If the list is empty, it cannot have consecutive numbers\n        return False\n    sorted_list = sorted(l)\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i] + 1 != sorted_list[i + 1]:\n            return False\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:  # If the list is empty, it cannot have consecutive numbers\n        return False\n    sorted_list = sorted(l)\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i] + 1 != sorted_list[i + 1]:\n            return False\n    return True\n```"], "prompt_tokens": [85], "completion_tokens": [89], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_472_check_Consecutive"}
{"name": "mbpp_474_replace_char", "language": "Python3", "prompt": "def replace_char(str1: str, ch: str, newch: str) -> str:\n    \"\"\"\n\tWrite a function to replace characters in a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_char", "test": "def check(candidate):\n    \n    assert candidate('character', 'c', 'a')=='aharaater'\n    assert candidate('python', 'l', 'a')=='python'\n\ndef test_check():\n    check(replace_char)\n\ntest_check()\n", "source_codes": ["\ndef replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)\n\n\n"], "responses": ["```\ndef replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)\n```"], "prompt_tokens": [82], "completion_tokens": [33], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_474_replace_char"}
{"name": "mbpp_475_sort_counter", "language": "Python3", "prompt": "from typing import Dict, List, Tuple\n\ndef sort_counter(dict1: Dict[str, int]) -> List[Tuple[str, int]]:\n    \"\"\"\n\tWrite a function to sort a dictionary by value.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_counter", "test": "def check(candidate):\n    \n    assert candidate({ 'Math': 400, 'Physics': 300, 'Chemistry': 250 })==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    assert candidate({ 'Math': 900, 'Physics': 1000, 'Chemistry': 1250 })==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n\ndef test_check():\n    check(sort_counter)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Dict, List, Tuple\n\ndef sort_counter(dict1: Dict[str, int]) -> List[Tuple[str, int]]:\n    sorted_items = sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n    return sorted_items\n\n\n"], "responses": ["```python\nfrom typing import Dict, List, Tuple\n\ndef sort_counter(dict1: Dict[str, int]) -> List[Tuple[str, int]]:\n    sorted_items = sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n    return sorted_items\n```"], "prompt_tokens": [90], "completion_tokens": [57], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_475_sort_counter"}
{"name": "mbpp_476_big_sum", "language": "Python3", "prompt": "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of the largest and smallest value in a given array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "big_sum", "test": "def check(candidate):\n    \n    assert candidate([-1, 2, 3, 4])==3\n    assert candidate([2, 3, 6])==8\n\ndef test_check():\n    check(big_sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    return max(nums) + min(nums)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    return max(nums) + min(nums)\n```"], "prompt_tokens": [87], "completion_tokens": [39], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_476_big_sum"}
{"name": "mbpp_477_is_lower", "language": "Python3", "prompt": "def is_lower(string: str) -> str:\n    \"\"\"\n\tWrite a python function to convert the given string to lower case.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_lower", "test": "def check(candidate):\n    \n    assert candidate('TruE')=='true'\n    assert candidate('SenTenCE')=='sentence'\n\ndef test_check():\n    check(is_lower)\n\ntest_check()\n", "source_codes": ["\ndef is_lower(string: str) -> str:\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()\n\n\n"], "responses": ["```python\ndef is_lower(string: str) -> str:\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    \"\"\"\n    return string.lower()\n```"], "prompt_tokens": [75], "completion_tokens": [37], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_477_is_lower"}
{"name": "mbpp_478_remove_lowercase", "language": "Python3", "prompt": "def remove_lowercase(str1: str) -> str:\n    \"\"\"\n\tWrite a function to remove lowercase substrings from a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_lowercase", "test": "def check(candidate):\n    \n    assert candidate('FInD')=='FID'\n    assert candidate('STRinG')=='STRG'\n\ndef test_check():\n    check(remove_lowercase)\n\ntest_check()\n", "source_codes": ["\ndef remove_lowercase(str1: str) -> str:\n    return ''.join(filter(lambda x: not x.islower(), str1))\n\n\n"], "responses": ["```python\ndef remove_lowercase(str1: str) -> str:\n    return ''.join(filter(lambda x: not x.islower(), str1))\n```"], "prompt_tokens": [76], "completion_tokens": [31], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_478_remove_lowercase"}
{"name": "mbpp_479_first_Digit", "language": "Python3", "prompt": "def first_Digit(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the first digit of a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "first_Digit", "test": "def check(candidate):\n    \n    assert candidate(456)==4\n    assert candidate(12)==1\n\ndef test_check():\n    check(first_Digit)\n\ntest_check()\n", "source_codes": ["\ndef first_Digit(n: int) -> int:\n    # Convert the number to a string to access the first character\n    n_str = str(n)\n    # Return the first character converted back to an integer\n    return int(n_str[0])\n\n\n"], "responses": ["```python\ndef first_Digit(n: int) -> int:\n    # Convert the number to a string to access the first character\n    n_str = str(n)\n    # Return the first character converted back to an integer\n    return int(n_str[0])\n```"], "prompt_tokens": [77], "completion_tokens": [56], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_479_first_Digit"}
{"name": "mbpp_554_Split", "language": "Python3", "prompt": "from typing import List\n\ndef Split(list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Split", "test": "def check(candidate):\n    \n    assert candidate([10, 11, 12, 13])==[11, 13]\n    assert candidate([7, 8, 9, 1])==[7, 9, 1]\n\ndef test_check():\n    check(Split)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef Split(list: List[int]) -> List[int]:\n    return [x for x in list if x % 2 != 0]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Split(list: List[int]) -> List[int]:\n    return [x for x in list if x % 2 != 0]\n```"], "prompt_tokens": [85], "completion_tokens": [37], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_554_Split"}
{"name": "mbpp_555_difference", "language": "Python3", "prompt": "def difference(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "difference", "test": "def check(candidate):\n    \n    assert candidate(5)==210\n    assert candidate(2)==6\n\ndef test_check():\n    check(difference)\n\ntest_check()\n", "source_codes": ["\ndef difference(n: int) -> int:\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n\n\n"], "responses": ["```python\ndef difference(n: int) -> int:\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n```"], "prompt_tokens": [90], "completion_tokens": [63], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_555_difference"}
{"name": "mbpp_556_find_Odd_Pair", "language": "Python3", "prompt": "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of pairs whose xor value is odd.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Odd_Pair", "test": "def check(candidate):\n    \n    assert candidate([7, 2, 8, 1, 0, 5, 11], 7)==12\n    assert candidate([1, 2, 3], 3)==2\n\ndef test_check():\n    check(find_Odd_Pair)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = 0\n    even_count = 0\n    \n    # Count odd and even numbers\n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # XOR of an odd and even number is odd\n    # So, count pairs with one odd and one even number\n    odd_pairs = odd_count * even_count\n    \n    return odd_pairs\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = 0\n    even_count = 0\n    \n    # Count odd and even numbers\n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    # XOR of an odd and even number is odd\n    # So, count pairs with one odd and one even number\n    odd_pairs = odd_count * even_count\n    \n    return odd_pairs\n```"], "prompt_tokens": [91], "completion_tokens": [123], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_556_find_Odd_Pair"}
{"name": "mbpp_557_toggle_string", "language": "Python3", "prompt": "def toggle_string(string: str) -> str:\n    \"\"\"\n\tWrite a function to toggle the case of all characters in a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "toggle_string", "test": "def check(candidate):\n    \n    assert candidate('Pangram')=='pANGRAM'\n    assert candidate('LIttLE')=='liTTle'\n\ndef test_check():\n    check(toggle_string)\n\ntest_check()\n", "source_codes": ["\ndef toggle_string(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)\n\n\n"], "responses": ["```\ndef toggle_string(string: str) -> str:\n    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)\n```"], "prompt_tokens": [76], "completion_tokens": [34], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_557_toggle_string"}
{"name": "mbpp_558_digit_distance_nums", "language": "Python3", "prompt": "def digit_distance_nums(n1: int, n2: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of the per-digit difference between two integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "digit_distance_nums", "test": "def check(candidate):\n    \n    assert candidate(23, 56)==6\n    assert candidate(123, 256)==7\n\ndef test_check():\n    check(digit_distance_nums)\n\ntest_check()\n", "source_codes": ["\ndef digit_distance_nums(n1: int, n2: int) -> int:\n    # Convert the numbers to strings to access individual digits\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # Pad the shorter string with zeros on the left if necessary\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    \n    # Calculate the sum of the per-digit differences\n    sum_diff = 0\n    for digit1, digit2 in zip(str_n1, str_n2):\n        sum_diff += abs(int(digit1) - int(digit2))\n    \n    return sum_diff\n\n\n"], "responses": ["```python\ndef digit_distance_nums(n1: int, n2: int) -> int:\n    # Convert the numbers to strings to access individual digits\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    \n    # Pad the shorter string with zeros on the left if necessary\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    \n    # Calculate the sum of the per-digit differences\n    sum_diff = 0\n    for digit1, digit2 in zip(str_n1, str_n2):\n        sum_diff += abs(int(digit1) - int(digit2))\n    \n    return sum_diff\n```"], "prompt_tokens": [86], "completion_tokens": [165], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_558_digit_distance_nums"}
{"name": "mbpp_559_max_sub_array_sum", "language": "Python3", "prompt": "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    \"\"\"\n\tWrite a function to find the sum of the largest contiguous sublist in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sub_array_sum", "test": "def check(candidate):\n    \n    assert candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8)==8\n    assert candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8)==10\n\ndef test_check():\n    check(max_sub_array_sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n```"], "prompt_tokens": [91], "completion_tokens": [94], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_559_max_sub_array_sum"}
{"name": "mbpp_560_union_elements", "language": "Python3", "prompt": "from typing import List\n\ndef union_elements(test_tup1: List[int], test_tup2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find the union of the elements of two given lists and output them in sorted order.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "union_elements", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4], [3, 4, 5, 6])==[1, 2, 3, 4, 5, 6]\n    assert candidate([11, 12, 13, 14], [13, 15, 16, 17])==[11, 12, 13, 14, 15, 16, 17]\n\ndef test_check():\n    check(union_elements)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef union_elements(test_tup1: List[int], test_tup2: List[int]) -> List[int]:\n    # Using set to find the union and then converting it back to a sorted list\n    return sorted(list(set(test_tup1) | set(test_tup2)))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef union_elements(test_tup1: List[int], test_tup2: List[int]) -> List[int]:\n    # Using set to find the union and then converting it back to a sorted list\n    return sorted(list(set(test_tup1) | set(test_tup2)))\n```"], "prompt_tokens": [101], "completion_tokens": [67], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_560_union_elements"}
{"name": "mbpp_562_Find_Max_Length", "language": "Python3", "prompt": "from typing import List\n\ndef Find_Max_Length(lst: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a python function to find the length of the longest sublists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Max_Length", "test": "def check(candidate):\n    \n    assert candidate([[0, 1], [2, 2], [3, 2, 1]])==3\n    assert candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]])==5\n\ndef test_check():\n    check(Find_Max_Length)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef Find_Max_Length(lst: List[List[int]]) -> int:\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Find_Max_Length(lst: List[List[int]]) -> int:\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length\n```"], "prompt_tokens": [84], "completion_tokens": [77], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_562_Find_Max_Length"}
{"name": "mbpp_563_extract_values", "language": "Python3", "prompt": "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    \"\"\"\n\tWrite a function to extract values between quotation marks from a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_values", "test": "def check(candidate):\n    \n    assert candidate('\"python\",\"program\",\"language\"')==['python', 'program', 'language']\n    assert candidate('\"red\",\"blue\",\"green\",\"yellow\"')==['red', 'blue', 'green', 'yellow']\n\ndef test_check():\n    check(extract_values)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    # Use regular expression to find all occurrences of text within quotes\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)\n\n\n"], "responses": ["```python\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    # Use regular expression to find all occurrences of text within quotes\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)\n```"], "prompt_tokens": [81], "completion_tokens": [50], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_563_extract_values"}
{"name": "mbpp_564_count_Pairs", "language": "Python3", "prompt": "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Pairs", "test": "def check(candidate):\n    \n    assert candidate([1, 1, 1, 1], 4)==0\n    assert candidate([1, 2, 3, 4, 5], 5)==10\n\ndef test_check():\n    check(count_Pairs)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    count = 0\n    freq = Counter(arr)\n    for key in freq:\n        count += freq[key] * (n - freq[key])\n    return count // 2\n\n\n"], "responses": ["```python\nfrom typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    count = 0\n    freq = Counter(arr)\n    for key in freq:\n        count += freq[key] * (n - freq[key])\n    return count // 2\n```"], "prompt_tokens": [97], "completion_tokens": [68], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_564_count_Pairs"}
{"name": "mbpp_565_split", "language": "Python3", "prompt": "from typing import List\n\ndef split(word: str) -> List[str]:\n    \"\"\"\n\tWrite a python function to split a string into characters.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "split", "test": "def check(candidate):\n    \n    assert candidate('Name')==['N', 'a', 'm', 'e']\n    assert candidate('program')==['p', 'r', 'o', 'g', 'r', 'a', 'm']\n\ndef test_check():\n    check(split)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef split(word: str) -> List[str]:\n    return [char for char in word]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef split(word: str) -> List[str]:\n    return [char for char in word]\n```"], "prompt_tokens": [78], "completion_tokens": [28], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_565_split"}
{"name": "mbpp_566_sum_digits", "language": "Python3", "prompt": "def sum_digits(n: int) -> int:\n    \"\"\"\n\tWrite a function to get the sum of the digits of a non-negative integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_digits", "test": "def check(candidate):\n    \n    assert candidate(12)==3\n    assert candidate(97)==16\n\ndef test_check():\n    check(sum_digits)\n\ntest_check()\n", "source_codes": ["\ndef sum_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))\n\n\n"], "responses": ["```\ndef sum_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))\n```"], "prompt_tokens": [78], "completion_tokens": [26], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_566_sum_digits"}
{"name": "mbpp_567_issort_list", "language": "Python3", "prompt": "from typing import List\n\ndef issort_list(list1: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check whether a specified list is sorted or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "issort_list", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\n    assert candidate([1, 2, 4, 6, 8, 10, 15, 14, 20])==False\n\ndef test_check():\n    check(issort_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef issort_list(list1: List[int]) -> bool:\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef issort_list(list1: List[int]) -> bool:\n    return all(list1[i] <= list1[i + 1] for i in range(len(list1) - 1))\n```"], "prompt_tokens": [84], "completion_tokens": [49], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_567_issort_list"}
{"name": "mbpp_568_empty_list", "language": "Python3", "prompt": "from typing import List, Dict\n\ndef empty_list(length: int) -> List[Dict[None, None]]:\n    \"\"\"\n\tWrite a function to create a list of N empty dictionaries.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_568_empty_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "empty_list", "test": "def check(candidate):\n    \n    assert candidate(6)==[{  }, {  }, {  }, {  }, {  }, {  }]\n    assert candidate(7)==[{  }, {  }, {  }, {  }, {  }, {  }, {  }]\n\ndef test_check():\n    check(empty_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Dict\n\ndef empty_list(length: int) -> List[Dict[None, None]]:\n    return [{} for _ in range(length)]\n\n\n"], "responses": ["```python\nfrom typing import List, Dict\n\ndef empty_list(length: int) -> List[Dict[None, None]]:\n    return [{} for _ in range(length)]\n```"], "prompt_tokens": [87], "completion_tokens": [37], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_568_empty_list"}
{"name": "mbpp_569_sort_sublists", "language": "Python3", "prompt": "from typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_sublists", "test": "def check(candidate):\n    \n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n    assert candidate([['a', 'b'], ['d', 'c'], ['g', 'h'], ['f', 'e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    for sublist in list1:\n        sublist.sort()\n    return list1\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    for sublist in list1:\n        sublist.sort()\n    return list1\n```"], "prompt_tokens": [89], "completion_tokens": [41], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_569_sort_sublists"}
{"name": "mbpp_572_two_unique_nums", "language": "Python3", "prompt": "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "two_unique_nums", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 2, 4, 5])==[1, 3, 4, 5]\n    assert candidate([1, 2, 3, 4, 5])==[1, 2, 3, 4, 5]\n\ndef test_check():\n    check(two_unique_nums)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    # Use a dictionary to count occurrences of each number\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n    \n    # Find the numbers that occur exactly once\n    unique_nums = [num for num, cnt in count.items() if cnt == 1]\n    \n    return unique_nums\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    # Use a dictionary to count occurrences of each number\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n    \n    # Find the numbers that occur exactly once\n    unique_nums = [num for num, cnt in count.items() if cnt == 1]\n    \n    return unique_nums\n```"], "prompt_tokens": [85], "completion_tokens": [96], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_572_two_unique_nums"}
{"name": "mbpp_573_unique_product", "language": "Python3", "prompt": "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to calculate the product of the unique numbers in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "unique_product", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 1])==6\n    assert candidate([7, 8, 9, 0, 1, 1])==0\n\ndef test_check():\n    check(unique_product)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product\n```"], "prompt_tokens": [86], "completion_tokens": [51], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_573_unique_product"}
{"name": "mbpp_574_surfacearea_cylinder", "language": "Python3", "prompt": "def surfacearea_cylinder(r: int, h: int) -> float:\n    \"\"\"\n\tWrite a function to find the surface area of a cylinder.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "surfacearea_cylinder", "test": "def check(candidate):\n    \n    assert candidate(4, 5)==226.18800000000002\n    assert candidate(4, 10)==351.848\n\ndef test_check():\n    check(surfacearea_cylinder)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef surfacearea_cylinder(r: int, h: int) -> float:\n    \"\"\"\n    Calculate the surface area of a cylinder.\n    \"\"\"\n    base_area = math.pi * r**2\n    lateral_surface_area = 2 * math.pi * r * h\n    total_surface_area = 2 * base_area + lateral_surface_area\n    return total_surface_area\n\n\n"], "responses": ["```python\nimport math\n\ndef surfacearea_cylinder(r: int, h: int) -> float:\n    \"\"\"\n    Calculate the surface area of a cylinder.\n    \"\"\"\n    base_area = math.pi * r**2\n    lateral_surface_area = 2 * math.pi * r * h\n    total_surface_area = 2 * base_area + lateral_surface_area\n    return total_surface_area\n```"], "prompt_tokens": [80], "completion_tokens": [83], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_574_surfacearea_cylinder"}
{"name": "mbpp_576_is_Sub_Array", "language": "Python3", "prompt": "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Sub_Array", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 1], [1, 2, 1])==True\n    assert candidate([1, 0, 2, 2], [2, 2, 0])==False\n\ndef test_check():\n    check(is_Sub_Array)\n\ntest_check()\n", "source_codes": ["\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    # Get the length of both lists\n    len_A = len(A)\n    len_B = len(B)\n    \n    # Iterate over the main list\n    for i in range(len_A - len_B + 1):\n        # Check if the sublist matches the sequence in the main list\n        if A[i:i+len_B] == B:\n            return True\n    return False\n\n\n"], "responses": ["```python\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    # Get the length of both lists\n    len_A = len(A)\n    len_B = len(B)\n    \n    # Iterate over the main list\n    for i in range(len_A - len_B + 1):\n        # Check if the sublist matches the sequence in the main list\n        if A[i:i+len_B] == B:\n            return True\n    return False\n```"], "prompt_tokens": [90], "completion_tokens": [100], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_576_is_Sub_Array"}
{"name": "mbpp_577_last_Digit_Factorial", "language": "Python3", "prompt": "def last_Digit_Factorial(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the last digit in factorial of a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "last_Digit_Factorial", "test": "def check(candidate):\n    \n    assert candidate(21)==0\n    assert candidate(30)==0\n\ndef test_check():\n    check(last_Digit_Factorial)\n\ntest_check()\n", "source_codes": ["\ndef last_Digit_Factorial(n: int) -> int:\n    if n < 0:\n        return None  # Factorial is not defined for negative numbers\n    elif n <= 1:\n        return 1  # The factorial of 0 and 1 is 1, so the last digit is 1\n    else:\n        # For n >= 5, the factorial will end in 0 because it will contain at least one 2 and one 5\n        # which when multiplied give a 10, thus adding a zero to the end of the number.\n        # Therefore, we only need to consider the cases for n = 2, 3, 4.\n        last_digits = [1, 2, 6, 4]  # Last digits of factorial for 0, 1, 2, 3, 4\n        return last_digits[n] if n < 5 else 0\n\n# Example usage:\n# print(last_Digit_Factorial(5))  # Output: 0\n# print(last_Digit_Factorial(4))  # Output: 4\n\n\n"], "responses": ["```python\ndef last_Digit_Factorial(n: int) -> int:\n    if n < 0:\n        return None  # Factorial is not defined for negative numbers\n    elif n <= 1:\n        return 1  # The factorial of 0 and 1 is 1, so the last digit is 1\n    else:\n        # For n >= 5, the factorial will end in 0 because it will contain at least one 2 and one 5\n        # which when multiplied give a 10, thus adding a zero to the end of the number.\n        # Therefore, we only need to consider the cases for n = 2, 3, 4.\n        last_digits = [1, 2, 6, 4]  # Last digits of factorial for 0, 1, 2, 3, 4\n        return last_digits[n] if n < 5 else 0\n\n# Example usage:\n# print(last_Digit_Factorial(5))  # Output: 0\n# print(last_Digit_Factorial(4))  # Output: 4\n```"], "prompt_tokens": [82], "completion_tokens": [241], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_577_last_Digit_Factorial"}
{"name": "mbpp_578_interleave_lists", "language": "Python3", "prompt": "from typing import List\n\ndef interleave_lists(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "interleave_lists", "test": "def check(candidate):\n    \n    assert candidate([10, 20], [15, 2], [5, 10])==[10, 15, 5, 20, 2, 10]\n    assert candidate([11, 44], [10, 15], [20, 5])==[11, 10, 20, 44, 15, 5]\n\ndef test_check():\n    check(interleave_lists)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef interleave_lists(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    return [val for trio in zip(list1, list2, list3) for val in trio]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef interleave_lists(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    return [val for trio in zip(list1, list2, list3) for val in trio]\n```"], "prompt_tokens": [102], "completion_tokens": [57], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_578_interleave_lists"}
{"name": "mbpp_579_find_dissimilar", "language": "Python3", "prompt": "from typing import Tuple\n\ndef find_dissimilar(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to find the dissimilar elements in the given two tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_dissimilar", "test": "def check(candidate):\n    \n    assert candidate((1, 2, 3, 4), (7, 2, 3, 9))==(1, 4, 7, 9)\n    assert candidate((21, 11, 25, 26), (26, 34, 21, 36))==(34, 36, 11, 25)\n\ndef test_check():\n    check(find_dissimilar)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef find_dissimilar(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(sorted(set(test_tup1).symmetric_difference(set(test_tup2))))\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef find_dissimilar(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(sorted(set(test_tup1).symmetric_difference(set(test_tup2))))\n```"], "prompt_tokens": [115], "completion_tokens": [71], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_579_find_dissimilar"}
{"name": "mbpp_580_extract_even", "language": "Python3", "prompt": "from typing import Tuple, Any\n\ndef extract_even(test_tuple: Tuple[int, int, Tuple[int, int, Tuple[int, int]], int, int]) -> Any:\n    \"\"\"\n\tWrite a function to remove uneven elements in the nested mixed tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_even", "test": "def check(candidate):\n    \n    assert candidate((5, 6, (8, 7, (4, 8)), 7, 9))==(6, (8, (4, 8)))\n    assert candidate((5, 6, (9, 8, (4, 6)), 8, 10))==(6, (8, (4, 6)), 8, 10)\n\ndef test_check():\n    check(extract_even)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple, Any\n\ndef extract_even(test_tuple: Tuple[int, int, Tuple[int, int, Tuple[int, int]], int, int]) -> Any:\n    # Helper function to extract even numbers from a tuple\n    def extract_even_helper(input_tuple):\n        if isinstance(input_tuple, int):\n            return input_tuple if input_tuple % 2 == 0 else None\n        else:\n            return tuple(filter(None, (extract_even_helper(item) for item in input_tuple)))\n\n    return extract_even_helper(test_tuple)\n\n\n"], "responses": ["```python\nfrom typing import Tuple, Any\n\ndef extract_even(test_tuple: Tuple[int, int, Tuple[int, int, Tuple[int, int]], int, int]) -> Any:\n    # Helper function to extract even numbers from a tuple\n    def extract_even_helper(input_tuple):\n        if isinstance(input_tuple, int):\n            return input_tuple if input_tuple % 2 == 0 else None\n        else:\n            return tuple(filter(None, (extract_even_helper(item) for item in input_tuple)))\n\n    return extract_even_helper(test_tuple)\n```"], "prompt_tokens": [100], "completion_tokens": [112], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_580_extract_even"}
{"name": "mbpp_581_surface_Area", "language": "Python3", "prompt": "def surface_Area(b: int, s: int) -> int:\n    \"\"\"\n\tWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "surface_Area", "test": "def check(candidate):\n    \n    assert candidate(4, 5)==56\n    assert candidate(1, 2)==5\n\ndef test_check():\n    check(surface_Area)\n\ntest_check()\n", "source_codes": ["\ndef surface_Area(b: int, s: int) -> int:\n    \"\"\"\n    Calculate the surface area of a square pyramid with a given base edge (b) and slant height (s).\n    \"\"\"\n    base_area = b * b\n    lateral_area = 4 * (b * s) / 2\n    return base_area + lateral_area\n\n\n"], "responses": ["```python\ndef surface_Area(b: int, s: int) -> int:\n    \"\"\"\n    Calculate the surface area of a square pyramid with a given base edge (b) and slant height (s).\n    \"\"\"\n    base_area = b * b\n    lateral_area = 4 * (b * s) / 2\n    return base_area + lateral_area\n```"], "prompt_tokens": [88], "completion_tokens": [79], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_581_surface_Area"}
{"name": "mbpp_583_catalan_number", "language": "Python3", "prompt": "def catalan_number(num: int) -> int:\n    \"\"\"\n\tWrite a function which returns nth catalan number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "catalan_number", "test": "def check(candidate):\n    \n    assert candidate(9)==4862\n    assert candidate(7)==429\n\ndef test_check():\n    check(catalan_number)\n\ntest_check()\n", "source_codes": ["\ndef catalan_number(num: int) -> int:\n    if num <= 1:\n        return 1\n    res = 0\n    for i in range(num):\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    return res\n\n\n"], "responses": ["```python\ndef catalan_number(num: int) -> int:\n    if num <= 1:\n        return 1\n    res = 0\n    for i in range(num):\n        res += catalan_number(i) * catalan_number(num - i - 1)\n    return res\n```"], "prompt_tokens": [73], "completion_tokens": [63], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_583_catalan_number"}
{"name": "mbpp_584_find_adverbs", "language": "Python3", "prompt": "def find_adverbs(text: str) -> str:\n    \"\"\"\n\tWrite a function to find the first adverb ending with ly and its positions in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_adverbs", "test": "def check(candidate):\n    \n    assert candidate('Please handle the situation carefuly')=='28-36: carefuly'\n    assert candidate('Complete the task quickly')=='18-25: quickly'\n\ndef test_check():\n    check(find_adverbs)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef find_adverbs(text: str) -> str:\n    # Regular expression to find words ending with 'ly'\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    match = pattern.search(text)\n    if match:\n        # Return the first adverb and its starting and ending positions\n        return f\"{match.group()} ({match.start()}, {match.end()})\"\n    else:\n        return \"No adverb ending with 'ly' found.\"\n\n# Example usage:\n# result = find_adverbs(\"He quickly realized that the quietly spoken words were important.\")\n# print(result)  # Output: \"quickly (3, 10)\"\n\n\n"], "responses": ["```python\nimport re\n\ndef find_adverbs(text: str) -> str:\n    # Regular expression to find words ending with 'ly'\n    pattern = re.compile(r'\\b\\w+ly\\b')\n    match = pattern.search(text)\n    if match:\n        # Return the first adverb and its starting and ending positions\n        return f\"{match.group()} ({match.start()}, {match.end()})\"\n    else:\n        return \"No adverb ending with 'ly' found.\"\n\n# Example usage:\n# result = find_adverbs(\"He quickly realized that the quietly spoken words were important.\")\n# print(result)  # Output: \"quickly (3, 10)\"\n```"], "prompt_tokens": [83], "completion_tokens": [140], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_584_find_adverbs"}
{"name": "mbpp_585_expensive_items", "language": "Python3", "prompt": "from typing import List, Dict, Union\n\ndef expensive_items(items: List[Dict[str, Union[str, float]]], n: int) -> List[Dict[str, Union[str, float]]]:\n    \"\"\"\n\tWrite a function to find the n most expensive items in a given dataset.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "expensive_items", "test": "def check(candidate):\n    \n    assert candidate([{ 'name': 'Item-1', 'price': 101.1 }, { 'name': 'Item-2', 'price': 555.22 }, { 'name': 'Item-3', 'price': 45.09 }], 2)==[{ 'name': 'Item-2', 'price': 555.22 }, { 'name': 'Item-1', 'price': 101.1 }]\n    assert candidate([{ 'name': 'Item-1', 'price': 101.1 }, { 'name': 'Item-2', 'price': 555.22 }, { 'name': 'Item-3', 'price': 45.09 }, { 'name': 'Item-4', 'price': 22.75 }], 1)==[{ 'name': 'Item-2', 'price': 555.22 }]\n\ndef test_check():\n    check(expensive_items)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Dict, Union\n\ndef expensive_items(items: List[Dict[str, Union[str, float]]], n: int) -> List[Dict[str, Union[str, float]]]:\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the first n items from the sorted list\n    return sorted_items[:n]\n\n\n"], "responses": ["```python\nfrom typing import List, Dict, Union\n\ndef expensive_items(items: List[Dict[str, Union[str, float]]], n: int) -> List[Dict[str, Union[str, float]]]:\n    # Sort the items by price in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    # Return the first n items from the sorted list\n    return sorted_items[:n]\n```"], "prompt_tokens": [108], "completion_tokens": [93], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_585_expensive_items"}
{"name": "mbpp_586_split_Arr", "language": "Python3", "prompt": "from typing import List\n\ndef split_Arr(l: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "split_Arr", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4], 1)==[2, 3, 4, 1]\n    assert candidate([0, 1, 2, 3, 4, 5, 6, 7], 3)==[3, 4, 5, 6, 7, 0, 1, 2]\n\ndef test_check():\n    check(split_Arr)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef split_Arr(l: List[int], n: int) -> List[int]:\n    return l[n:] + l[:n]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef split_Arr(l: List[int], n: int) -> List[int]:\n    return l[n:] + l[:n]\n```"], "prompt_tokens": [97], "completion_tokens": [36], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_586_split_Arr"}
{"name": "mbpp_587_list_tuple", "language": "Python3", "prompt": "from typing import List, Any\n\ndef list_tuple(listx: List[int]) -> Any:\n    \"\"\"\n\tWrite a function to convert a list to a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_587_list_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "list_tuple", "test": "def check(candidate):\n    \n    assert candidate([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\n    assert candidate([58, 44, 56])==(58, 44, 56)\n\ndef test_check():\n    check(list_tuple)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef list_tuple(listx: List[int]) -> Any:\n    return tuple(listx)\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef list_tuple(listx: List[int]) -> Any:\n    return tuple(listx)\n```"], "prompt_tokens": [82], "completion_tokens": [29], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_587_list_tuple"}
{"name": "mbpp_588_big_diff", "language": "Python3", "prompt": "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the difference between largest and smallest value in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "big_diff", "test": "def check(candidate):\n    \n    assert candidate([4, 5, 12])==8\n    assert candidate([9, 2, 3])==7\n\ndef test_check():\n    check(big_diff)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)\n```"], "prompt_tokens": [86], "completion_tokens": [29], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_588_big_diff"}
{"name": "mbpp_589_perfect_squares", "language": "Python3", "prompt": "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find perfect squares between two given numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "perfect_squares", "test": "def check(candidate):\n    \n    assert candidate(50, 100)==[64, 81, 100]\n    assert candidate(100, 200)==[100, 121, 144, 169, 196]\n\ndef test_check():\n    check(perfect_squares)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    squares = []\n    # Start from the square root of the first number\n    start = math.ceil(math.sqrt(a))\n    # Go up to the square root of the second number\n    end = math.floor(math.sqrt(b))\n    \n    for i in range(start, end + 1):\n        squares.append(i * i)\n    \n    return squares\n\n\n"], "responses": ["```python\nfrom typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    squares = []\n    # Start from the square root of the first number\n    start = math.ceil(math.sqrt(a))\n    # Go up to the square root of the second number\n    end = math.floor(math.sqrt(b))\n    \n    for i in range(start, end + 1):\n        squares.append(i * i)\n    \n    return squares\n```"], "prompt_tokens": [85], "completion_tokens": [100], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_589_perfect_squares"}
{"name": "mbpp_591_swap_List", "language": "Python3", "prompt": "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to interchange the first and last elements in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "swap_List", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3])==[3, 2, 1]\n    assert candidate([4, 5, 6])==[6, 5, 4]\n\ndef test_check():\n    check(swap_List)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef swap_list(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef swap_list(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n```"], "prompt_tokens": [85], "completion_tokens": [54], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_591_swap_List"}
{"name": "mbpp_592_sum_Of_product", "language": "Python3", "prompt": "def sum_Of_product(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_Of_product", "test": "def check(candidate):\n    \n    assert candidate(4)==56\n    assert candidate(1)==1\n\ndef test_check():\n    check(sum_Of_product)\n\ntest_check()\n", "source_codes": ["\nfrom math import comb\n\ndef sum_Of_product(n: int) -> int:\n    sum_product = 0\n    for i in range(n):\n        sum_product += comb(n, i) * comb(n, i + 1)\n    return sum_product\n\n\n"], "responses": ["```python\nfrom math import comb\n\ndef sum_Of_product(n: int) -> int:\n    sum_product = 0\n    for i in range(n):\n        sum_product += comb(n, i) * comb(n, i + 1)\n    return sum_product\n```"], "prompt_tokens": [82], "completion_tokens": [57], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_592_sum_Of_product"}
{"name": "mbpp_593_removezero_ip", "language": "Python3", "prompt": "def removezero_ip(ip: str) -> str:\n    \"\"\"\n\tWrite a function to remove leading zeroes from an ip address.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "removezero_ip", "test": "def check(candidate):\n    \n    assert candidate('12.01.024')=='12.1.24'\n    assert candidate('216.08.094.0196')=='216.8.94.196'\n\ndef test_check():\n    check(removezero_ip)\n\ntest_check()\n", "source_codes": ["\ndef removezero_ip(ip: str) -> str:\n    # Split the IP address into its components\n    ip_parts = ip.split('.')\n    # Remove leading zeros from each part and join them back together\n    new_ip_parts = [str(int(part)) for part in ip_parts]\n    new_ip = '.'.join(new_ip_parts)\n    return new_ip\n\n\n"], "responses": ["```python\ndef removezero_ip(ip: str) -> str:\n    # Split the IP address into its components\n    ip_parts = ip.split('.')\n    # Remove leading zeros from each part and join them back together\n    new_ip_parts = [str(int(part)) for part in ip_parts]\n    new_ip = '.'.join(new_ip_parts)\n    return new_ip\n```"], "prompt_tokens": [75], "completion_tokens": [78], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_593_removezero_ip"}
{"name": "mbpp_594_diff_even_odd", "language": "Python3", "prompt": "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the difference of the first even and first odd number of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "diff_even_odd", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==1\n    assert candidate([1, 5, 7, 9, 10])==9\n\ndef test_check():\n    check(diff_even_odd)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return 0  # Assuming 0 as the default return value if there's no even or no odd number\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return 0  # Assuming 0 as the default return value if there's no even or no odd number\n```"], "prompt_tokens": [90], "completion_tokens": [149], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_594_diff_even_odd"}
{"name": "mbpp_595_min_Swaps", "language": "Python3", "prompt": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_Swaps", "test": "def check(candidate):\n    \n    assert candidate('111', '000')=='Not Possible'\n    assert candidate('111', '110')=='Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n", "source_codes": ["\ndef min_Swaps(str1: str, str2: str) -> int:\n    # Count the number of mismatches between str1 and str2\n    mismatches = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            mismatches += 1\n\n    # If the number of mismatches is odd, it's not possible to make the strings equal\n    if mismatches % 2 != 0:\n        return -1\n\n    # Half the number of mismatches gives the minimum swaps required\n    return mismatches // 2\n\n\n"], "responses": ["```python\ndef min_Swaps(str1: str, str2: str) -> int:\n    # Count the number of mismatches between str1 and str2\n    mismatches = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            mismatches += 1\n\n    # If the number of mismatches is odd, it's not possible to make the strings equal\n    if mismatches % 2 != 0:\n        return -1\n\n    # Half the number of mismatches gives the minimum swaps required\n    return mismatches // 2\n```"], "prompt_tokens": [98], "completion_tokens": [130], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_595_min_Swaps"}
{"name": "mbpp_597_find_kth", "language": "Python3", "prompt": "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    \"\"\"\n\tWrite a function to find kth element from the given two sorted arrays.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_kth", "test": "def check(candidate):\n    \n    assert candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7)==256\n    assert candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6)==8\n\ndef test_check():\n    check(find_kth)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    # Check if arr1 is smaller than arr2\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    \n    # If arr1 is empty, return kth element from arr2\n    if not arr1:\n        return arr2[k - 1]\n    \n    # If k is 1, return minimum of first elements\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    # Divide k into two parts\n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    \n    if arr1[i - 1] > arr2[j - 1]:\n        # Exclude the first j elements of arr2 and reduce k\n        return find_kth(arr1, arr2[j:], k - j)\n    else:\n        # Exclude the first i elements of arr1 and reduce k\n        return find_kth(arr1[i:], arr2, k - i)\n\n# Example usage:\n# arr1 = [2, 3, 6, 7, 9]\n# arr2 = [1, 4, 8, 10]\n# k = 5\n# print(find_kth(arr1, arr2, k))  # Output should be 6\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    # Check if arr1 is smaller than arr2\n    if len(arr1) > len(arr2):\n        return find_kth(arr2, arr1, k)\n    \n    # If arr1 is empty, return kth element from arr2\n    if not arr1:\n        return arr2[k - 1]\n    \n    # If k is 1, return minimum of first elements\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    \n    # Divide k into two parts\n    i = min(len(arr1), k // 2)\n    j = min(len(arr2), k // 2)\n    \n    if arr1[i - 1] > arr2[j - 1]:\n        # Exclude the first j elements of arr2 and reduce k\n        return find_kth(arr1, arr2[j:], k - j)\n    else:\n        # Exclude the first i elements of arr1 and reduce k\n        return find_kth(arr1[i:], arr2, k - i)\n\n# Example usage:\n# arr1 = [2, 3, 6, 7, 9]\n# arr2 = [1, 4, 8, 10]\n# k = 5\n# print(find_kth(arr1, arr2, k))  # Output should be 6\n```"], "prompt_tokens": [95], "completion_tokens": [317], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_597_find_kth"}
{"name": "mbpp_598_armstrong_number", "language": "Python3", "prompt": "def armstrong_number(number: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is armstrong or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "armstrong_number", "test": "def check(candidate):\n    \n    assert candidate(259)==False\n    assert candidate(4458)==False\n\ndef test_check():\n    check(armstrong_number)\n\ntest_check()\n", "source_codes": ["\ndef armstrong_number(number: int) -> bool:\n    # Convert the number to a string to easily iterate over its digits\n    num_str = str(number)\n    num_length = len(num_str)\n    \n    # Calculate the sum of the digits raised to the power of the number's length\n    sum_of_powers = sum(int(digit) ** num_length for digit in num_str)\n    \n    # Check if the sum of the powers is equal to the original number\n    return sum_of_powers == number\n\n\n"], "responses": ["```\ndef armstrong_number(number: int) -> bool:\n    # Convert the number to a string to easily iterate over its digits\n    num_str = str(number)\n    num_length = len(num_str)\n    \n    # Calculate the sum of the digits raised to the power of the number's length\n    sum_of_powers = sum(int(digit) ** num_length for digit in num_str)\n    \n    # Check if the sum of the powers is equal to the original number\n    return sum_of_powers == number\n```"], "prompt_tokens": [78], "completion_tokens": [109], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_598_armstrong_number"}
{"name": "mbpp_599_sum_average", "language": "Python3", "prompt": "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    \"\"\"\n\tWrite a function to find sum and average of first n natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_average", "test": "def check(candidate):\n    \n    assert candidate(15)==(120, 8.0)\n    assert candidate(20)==(210, 10.5)\n\ndef test_check():\n    check(sum_average)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    # Sum of first n natural numbers using the formula n*(n+1)/2\n    sum_n = number * (number + 1) // 2\n    # Average of first n natural numbers is sum_n divided by n\n    average_n = sum_n / number\n    return sum_n, average_n\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    # Sum of first n natural numbers using the formula n*(n+1)/2\n    sum_n = number * (number + 1) // 2\n    # Average of first n natural numbers is sum_n divided by n\n    average_n = sum_n / number\n    return sum_n, average_n\n```"], "prompt_tokens": [84], "completion_tokens": [89], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_599_sum_average"}
{"name": "mbpp_600_is_Even", "language": "Python3", "prompt": "def is_Even(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given number is even or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_600_is_Even.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Even", "test": "def check(candidate):\n    \n    assert candidate(2)==True\n    assert candidate(3)==False\n\ndef test_check():\n    check(is_Even)\n\ntest_check()\n", "source_codes": ["\ndef is_Even(n: int) -> bool:\n    return n % 2 == 0\n\n\n"], "responses": ["```\ndef is_Even(n: int) -> bool:\n    return n % 2 == 0\n```"], "prompt_tokens": [78], "completion_tokens": [24], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_600_is_Even"}
{"name": "mbpp_602_first_repeated_char", "language": "Python3", "prompt": "from typing import Optional\n\ndef first_repeated_char(str1: str) -> Optional[str]:\n    \"\"\"\n\tWrite a python function to find the first repeated character in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "first_repeated_char", "test": "def check(candidate):\n    \n    assert candidate('abc')==None\n    assert candidate('123123')=='1'\n\ndef test_check():\n    check(first_repeated_char)\n\ntest_check()\n", "source_codes": ["\ndef first_repeated_char(str1: str) -> Optional[str]:\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None\n\n\n"], "responses": ["```python\ndef first_repeated_char(str1: str) -> Optional[str]:\n    char_set = set()\n    for char in str1:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None\n```"], "prompt_tokens": [86], "completion_tokens": [52], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_602_first_repeated_char"}
{"name": "mbpp_603_get_ludic", "language": "Python3", "prompt": "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    \"\"\"\n\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_603_get_ludic.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_ludic", "test": "def check(candidate):\n    \n    assert candidate(25)==[1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n    assert candidate(45)==[1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n\ndef test_check():\n    check(get_ludic)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludics = list(range(1, n + 1))\n    i = 1\n    while i < len(ludics):\n        del ludics[ludics[i] - 1::ludics[i]]\n        i += 1\n    return ludics\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludics = list(range(1, n + 1))\n    i = 1\n    while i < len(ludics):\n        del ludics[ludics[i] - 1::ludics[i]]\n        i += 1\n    return ludics\n```"], "prompt_tokens": [88], "completion_tokens": [80], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_603_get_ludic"}
{"name": "mbpp_604_reverse_words", "language": "Python3", "prompt": "def reverse_words(s: str) -> str:\n    \"\"\"\n\tWrite a function to reverse words seperated by spaces in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "reverse_words", "test": "def check(candidate):\n    \n    assert candidate('java language')=='language java'\n    assert candidate('indian man')=='man indian'\n\ndef test_check():\n    check(reverse_words)\n\ntest_check()\n", "source_codes": ["\ndef reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split()))\n\n# Example usage:\n# reversed_string = reverse_words(\"hello world\")\n# print(reversed_string)  # Output: \"world hello\"\n\n\n"], "responses": ["```\ndef reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split()))\n\n# Example usage:\n# reversed_string = reverse_words(\"hello world\")\n# print(reversed_string)  # Output: \"world hello\"\n```"], "prompt_tokens": [77], "completion_tokens": [51], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_604_reverse_words"}
{"name": "mbpp_605_prime_num", "language": "Python3", "prompt": "def prime_num(num: int) -> bool:\n    \"\"\"\n\tWrite a function to check if the given integer is a prime number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "prime_num", "test": "def check(candidate):\n    \n    assert candidate(7)==True\n    assert candidate(-1010)==False\n\ndef test_check():\n    check(prime_num)\n\ntest_check()\n", "source_codes": ["\ndef prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\n\n"], "responses": ["```\ndef prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n```"], "prompt_tokens": [76], "completion_tokens": [106], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_605_prime_num"}
{"name": "mbpp_606_radian_degree", "language": "Python3", "prompt": "def radian_degree(degree: int) -> float:\n    \"\"\"\n\tWrite a function to convert degrees to radians.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "radian_degree", "test": "def check(candidate):\n    \n    assert candidate(60)==1.0471975511965976\n    assert candidate(120)==2.0943951023931953\n\ndef test_check():\n    check(radian_degree)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef radian_degree(degree: int) -> float:\n    return degree * (math.pi / 180)\n\n\n"], "responses": ["```python\nimport math\n\ndef radian_degree(degree: int) -> float:\n    return degree * (math.pi / 180)\n```"], "prompt_tokens": [73], "completion_tokens": [30], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_606_radian_degree"}
{"name": "mbpp_607_find_literals", "language": "Python3", "prompt": "from typing import Tuple\n\ndef find_literals(text: str, pattern: str) -> Tuple[str, int, int]:\n    \"\"\"\n\tWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_literals", "test": "def check(candidate):\n    \n    assert candidate('Its been a very crazy procedure right', 'crazy')==('crazy', 16, 21)\n    assert candidate('Hardest choices required strongest will', 'will')==('will', 35, 39)\n\ndef test_check():\n    check(find_literals)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef find_literals(text: str, pattern: str) -> Tuple[str, int, int]:\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return \"\", -1, -1\n\n\n"], "responses": ["```python\nimport re\n\ndef find_literals(text: str, pattern: str) -> Tuple[str, int, int]:\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return \"\", -1, -1\n```"], "prompt_tokens": [105], "completion_tokens": [62], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_607_find_literals"}
{"name": "mbpp_608_bell_Number", "language": "Python3", "prompt": "def bell_Number(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find nth bell number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "bell_Number", "test": "def check(candidate):\n    \n    assert candidate(3)==5\n    assert candidate(4)==15\n\ndef test_check():\n    check(bell_Number)\n\ntest_check()\n", "source_codes": ["\ndef bell_Number(n: int) -> int:\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n-1][n-1]\n\n# Example usage:\n# print(bell_Number(5))  # Output: 52\n\n\n"], "responses": ["```python\ndef bell_Number(n: int) -> int:\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n-1][n-1]\n\n# Example usage:\n# print(bell_Number(5))  # Output: 52\n```"], "prompt_tokens": [72], "completion_tokens": [140], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_608_bell_Number"}
{"name": "mbpp_610_remove_kth_element", "language": "Python3", "prompt": "from typing import List\n\ndef remove_kth_element(list1: List[int], L: int) -> List[int]:\n    \"\"\"\n\tWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_kth_element", "test": "def check(candidate):\n    \n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5)==[10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]\n\ndef test_check():\n    check(remove_kth_element)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    # Check if k is within the range of the list indices\n    if 0 <= k < len(list1):\n        # Remove the k'th element\n        del list1[k]\n    # Return the modified list\n    return list1\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    # Check if k is within the range of the list indices\n    if 0 <= k < len(list1):\n        # Remove the k'th element\n        del list1[k]\n    # Return the modified list\n    return list1\n```"], "prompt_tokens": [101], "completion_tokens": [80], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_610_remove_kth_element"}
{"name": "mbpp_611_max_of_nth", "language": "Python3", "prompt": "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    \"\"\"\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_of_nth", "test": "def check(candidate):\n    \n    assert candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1)==10\n    assert candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1)==11\n\ndef test_check():\n    check(max_of_nth)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max(row[N] for row in test_list if len(row) > N)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max(row[N] for row in test_list if len(row) > N)\n```"], "prompt_tokens": [98], "completion_tokens": [45], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_611_max_of_nth"}
{"name": "mbpp_612_merge", "language": "Python3", "prompt": "from typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    \"\"\"\n\tWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_612_merge.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "merge", "test": "def check(candidate):\n    \n    assert candidate([[1, 2], [3, 4], [5, 6], [7, 8]])==[[1, 3, 5, 7], [2, 4, 6, 8]]\n    assert candidate([['x', 'y', 'z'], ['a', 'b', 'c'], ['m', 'n', 'o']])==[['x', 'a', 'm'], ['y', 'b', 'n'], ['z', 'c', 'o']]\n\ndef test_check():\n    check(merge)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]\n```"], "prompt_tokens": [116], "completion_tokens": [63], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_612_merge"}
{"name": "mbpp_614_cummulative_sum", "language": "Python3", "prompt": "from typing import List\n\ndef cummulative_sum(test_list: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a function to find the cumulative sum of all the values that are present in the given list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_614_cummulative_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cummulative_sum", "test": "def check(candidate):\n    \n    assert candidate([[2, 4], [6, 7, 8], [3, 7]])==37\n    assert candidate([[3, 5], [7, 8, 9], [4, 8]])==44\n\ndef test_check():\n    check(cummulative_sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef cummulative_sum(test_list: List[List[int]]) -> int:\n    return sum(sum(inner_list) for inner_list in test_list)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef cummulative_sum(test_list: List[List[int]]) -> int:\n    return sum(sum(inner_list) for inner_list in test_list)\n```"], "prompt_tokens": [94], "completion_tokens": [38], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_614_cummulative_sum"}
{"name": "mbpp_615_average_tuple", "language": "Python3", "prompt": "from typing import List\n\ndef average_tuple(nums: List[List[int]]) -> List[float]:\n    \"\"\"\n\tWrite a function which takes a lists of lists and returns the average value for each sublist as a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "average_tuple", "test": "def check(candidate):\n    \n    assert candidate([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]])==[25.5, -18.0, 3.75]\n    assert candidate([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]])==[305.0, 342.5, 270.0, 232.5]\n\ndef test_check():\n    check(average_tuple)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef average_tuple(nums: List[List[int]]) -> List[float]:\n    return [sum(sublist) / len(sublist) for sublist in nums if sublist]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef average_tuple(nums: List[List[int]]) -> List[float]:\n    return [sum(sublist) / len(sublist) for sublist in nums if sublist]\n```"], "prompt_tokens": [91], "completion_tokens": [41], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_615_average_tuple"}
{"name": "mbpp_616_tuple_modulo", "language": "Python3", "prompt": "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tuple_modulo", "test": "def check(candidate):\n    \n    assert candidate((11, 5, 6, 7), (6, 7, 8, 6))==(5, 5, 6, 1)\n    assert candidate((12, 6, 7, 8), (7, 8, 9, 7))==(5, 6, 7, 1)\n\ndef test_check():\n    check(tuple_modulo)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(a % b for a, b in zip(test_tup1, test_tup2))\n```"], "prompt_tokens": [117], "completion_tokens": [73], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_616_tuple_modulo"}
{"name": "mbpp_617_min_Jumps", "language": "Python3", "prompt": "from typing import Tuple\n\ndef min_Jumps(steps: Tuple[int, int], d: int) -> float:\n    \"\"\"\n\tWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_Jumps", "test": "def check(candidate):\n    \n    assert candidate((3, 4), 0)==0\n    assert candidate((11, 14), 11)==1\n\ndef test_check():\n    check(min_Jumps)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\nfrom math import gcd\n\ndef min_Jumps(steps: Tuple[int, int], d: int) -> float:\n    step_x, step_y = steps\n    # Find the greatest common divisor of step_x and step_y\n    g = gcd(step_x, step_y)\n    \n    # If d is not a multiple of the gcd, it's not possible to reach (d, 0)\n    if d % g != 0:\n        return float('inf')\n    \n    # If we can reach (d, 0), the minimum number of jumps is d divided by the gcd\n    return d / g\n\n# Example usage:\n# print(min_Jumps((2, 3), 7))  # Should return float('inf') because it's not possible to reach (7, 0)\n# print(min_Jumps((6, 8), 12)) # Should return 2.0 because we can reach (12, 0) in 2 jumps of (6, 8)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\nfrom math import gcd\n\ndef min_Jumps(steps: Tuple[int, int], d: int) -> float:\n    step_x, step_y = steps\n    # Find the greatest common divisor of step_x and step_y\n    g = gcd(step_x, step_y)\n    \n    # If d is not a multiple of the gcd, it's not possible to reach (d, 0)\n    if d % g != 0:\n        return float('inf')\n    \n    # If we can reach (d, 0), the minimum number of jumps is d divided by the gcd\n    return d / g\n\n# Example usage:\n# print(min_Jumps((2, 3), 7))  # Should return float('inf') because it's not possible to reach (7, 0)\n# print(min_Jumps((6, 8), 12)) # Should return 2.0 because we can reach (12, 0) in 2 jumps of (6, 8)\n```"], "prompt_tokens": [110], "completion_tokens": [217], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_617_min_Jumps"}
{"name": "mbpp_618_div_list", "language": "Python3", "prompt": "from typing import List\n\ndef div_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    \"\"\"\n\tWrite a function to divide two lists element wise.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "div_list", "test": "def check(candidate):\n    \n    assert candidate([3, 2], [1, 4])==[3.0, 0.5]\n    assert candidate([90, 120], [50, 70])==[1.8, 1.7142857142857142]\n\ndef test_check():\n    check(div_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef div_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        if num2 == 0:\n            result.append(float('inf'))  # or use None, or raise an exception\n        else:\n            result.append(num1 / num2)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef div_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    result = []\n    for num1, num2 in zip(nums1, nums2):\n        if num2 == 0:\n            result.append(float('inf'))  # or use None, or raise an exception\n        else:\n            result.append(num1 / num2)\n    return result\n```"], "prompt_tokens": [86], "completion_tokens": [89], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_618_div_list"}
{"name": "mbpp_619_move_num", "language": "Python3", "prompt": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "move_num", "test": "def check(candidate):\n    \n    assert candidate('Avengers124Assemble')=='AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things')=='Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n", "source_codes": ["\ndef move_num(test_str: str) -> str:\n    num_str = ''.join([char for char in test_str if char.isdigit()])\n    non_num_str = ''.join([char for char in test_str if not char.isdigit()])\n    return non_num_str + num_str\n\n\n"], "responses": ["```python\ndef move_num(test_str: str) -> str:\n    num_str = ''.join([char for char in test_str if char.isdigit()])\n    non_num_str = ''.join([char for char in test_str if not char.isdigit()])\n    return non_num_str + num_str\n```"], "prompt_tokens": [79], "completion_tokens": [60], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_619_move_num"}
{"name": "mbpp_622_get_median", "language": "Python3", "prompt": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_median", "test": "def check(candidate):\n    \n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4)==8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6)==25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    i = j = 0\n    m1 = m2 = -1\n\n    # Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging arr1 and arr2\n    for count in range(n + 1):\n        # Below is to handle case where all elements of arr1[] are smaller than smallest(or first) element of arr2[]\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        # Below is to handle case where all elements of arr2[] are smaller than smallest(or first) element of arr1[]\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] <= arr2[j]:\n            m1 = m2  # Store the prev median\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2  # Store the prev median\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\n# Example usage:\n# arr1 = [1, 12, 15, 26, 38]\n# arr2 = [2, 13, 17, 30, 45]\n# n = len(arr1)\n# print(get_median(arr1, arr2, n))  # Output: 16.0\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    i = j = 0\n    m1 = m2 = -1\n\n    # Since there are 2n elements, median will be average of elements at index n-1 and n in the array obtained after merging arr1 and arr2\n    for count in range(n + 1):\n        # Below is to handle case where all elements of arr1[] are smaller than smallest(or first) element of arr2[]\n        if i == n:\n            m1 = m2\n            m2 = arr2[0]\n            break\n        # Below is to handle case where all elements of arr2[] are smaller than smallest(or first) element of arr1[]\n        elif j == n:\n            m1 = m2\n            m2 = arr1[0]\n            break\n        if arr1[i] <= arr2[j]:\n            m1 = m2  # Store the prev median\n            m2 = arr1[i]\n            i += 1\n        else:\n            m1 = m2  # Store the prev median\n            m2 = arr2[j]\n            j += 1\n    return (m1 + m2) / 2\n\n# Example usage:\n# arr1 = [1, 12, 15, 26, 38]\n# arr2 = [2, 13, 17, 30, 45]\n# n = len(arr1)\n# print(get_median(arr1, arr2, n))  # Output: 16.0\n```"], "prompt_tokens": [94], "completion_tokens": [347], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_622_get_median"}
{"name": "mbpp_623_nth_nums", "language": "Python3", "prompt": "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a function to compute the n-th power of each number in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "nth_nums", "test": "def check(candidate):\n    \n    assert candidate([10, 20, 30], 3)==[1000, 8000, 27000]\n    assert candidate([12, 15], 5)==[248832, 759375]\n\ndef test_check():\n    check(nth_nums)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [num ** n for num in nums]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [num ** n for num in nums]\n```"], "prompt_tokens": [89], "completion_tokens": [36], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_623_nth_nums"}
{"name": "mbpp_624_is_upper", "language": "Python3", "prompt": "def is_upper(string: str) -> str:\n    \"\"\"\n\tWrite a python function to convert a given string to uppercase.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_upper", "test": "def check(candidate):\n    \n    assert candidate('final')=='FINAL'\n    assert candidate('Valid')=='VALID'\n\ndef test_check():\n    check(is_upper)\n\ntest_check()\n", "source_codes": ["\ndef is_upper(string: str) -> str:\n    return string.upper()\n\n\n"], "responses": ["```python\ndef is_upper(string: str) -> str:\n    return string.upper()\n```"], "prompt_tokens": [74], "completion_tokens": [19], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_624_is_upper"}
{"name": "mbpp_625_swap_List", "language": "Python3", "prompt": "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to interchange the first and last element in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "swap_List", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 4])==[4, 2, 3, 4, 1]\n    assert candidate([4, 5, 6])==[6, 5, 4]\n\ndef test_check():\n    check(swap_List)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef swap_list(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef swap_list(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n```"], "prompt_tokens": [86], "completion_tokens": [54], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_625_swap_List"}
{"name": "mbpp_626_triangle_area", "language": "Python3", "prompt": "from typing import Optional\n\ndef triangle_area(r: int) -> Optional[int]:\n    \"\"\"\n\tWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "triangle_area", "test": "def check(candidate):\n    \n    assert candidate(0)==0\n    assert candidate(2)==4\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Optional\nimport math\n\ndef triangle_area(r: int) -> Optional[float]:\n    \"\"\"\n    Calculate the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    The largest triangle inscribed in a semicircle is a right-angled triangle with its hypotenuse equal to the diameter of the semicircle.\n    \"\"\"\n    if r <= 0:\n        return None  # The radius must be a positive number\n\n    # The base of the triangle is the diameter of the semicircle\n    base = 2 * r\n\n    # The height of the triangle is equal to the radius of the semicircle\n    height = r\n\n    # The area of a triangle is 1/2 * base * height\n    area = 0.5 * base * height\n\n    return area\n\n# Example usage:\n# print(triangle_area(5))  # Should return 25.0 if the radius is 5\n\n\n"], "responses": ["```python\nfrom typing import Optional\nimport math\n\ndef triangle_area(r: int) -> Optional[float]:\n    \"\"\"\n    Calculate the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    The largest triangle inscribed in a semicircle is a right-angled triangle with its hypotenuse equal to the diameter of the semicircle.\n    \"\"\"\n    if r <= 0:\n        return None  # The radius must be a positive number\n\n    # The base of the triangle is the diameter of the semicircle\n    base = 2 * r\n\n    # The height of the triangle is equal to the radius of the semicircle\n    height = r\n\n    # The area of a triangle is 1/2 * base * height\n    area = 0.5 * base * height\n\n    return area\n\n# Example usage:\n# print(triangle_area(5))  # Should return 25.0 if the radius is 5\n```"], "prompt_tokens": [95], "completion_tokens": [209], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_626_triangle_area"}
{"name": "mbpp_627_find_First_Missing", "language": "Python3", "prompt": "from typing import List\n\ndef find_First_Missing(array: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_First_Missing", "test": "def check(candidate):\n    \n    assert candidate([0, 1, 2, 6, 9])==3\n    assert candidate([2, 3, 5, 8, 9])==0\n\ndef test_check():\n    check(find_First_Missing)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_First_Missing(array: List[int]) -> int:\n    left, right = 0, len(array) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if array[mid] == mid + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + 1\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_First_Missing(array: List[int]) -> int:\n    left, right = 0, len(array) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if array[mid] == mid + 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left + 1\n```"], "prompt_tokens": [88], "completion_tokens": [94], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_627_find_First_Missing"}
{"name": "mbpp_628_replace_spaces", "language": "Python3", "prompt": "def replace_spaces(string: str) -> str:\n    \"\"\"\n\tWrite a function to replace all spaces in the given string with '%20'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_628_replace_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_spaces", "test": "def check(candidate):\n    \n    assert candidate('I am a Programmer')=='I%20am%20a%20Programmer'\n    assert candidate('I love Coding')=='I%20love%20Coding'\n\ndef test_check():\n    check(replace_spaces)\n\ntest_check()\n", "source_codes": ["\ndef replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')\n\n\n"], "responses": ["```\ndef replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')\n```"], "prompt_tokens": [77], "completion_tokens": [22], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_628_replace_spaces"}
{"name": "mbpp_629_Split", "language": "Python3", "prompt": "from typing import List\n\ndef Split(list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to find even numbers from a list of numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Split", "test": "def check(candidate):\n    \n    assert candidate([4, 5, 6, 7, 8, 0, 1])==[4, 6, 8, 0]\n    assert candidate([8, 12, 15, 19])==[8, 12]\n\ndef test_check():\n    check(Split)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef Split(list: List[int]) -> List[int]:\n    even_numbers = [num for num in list if num % 2 == 0]\n    return even_numbers\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Split(list: List[int]) -> List[int]:\n    even_numbers = [num for num in list if num % 2 == 0]\n    return even_numbers\n```"], "prompt_tokens": [82], "completion_tokens": [44], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_629_Split"}
{"name": "mbpp_630_get_coordinates", "language": "Python3", "prompt": "from typing import Tuple, List\n\ndef get_coordinates(test_tup: Tuple[int, int]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_coordinates", "test": "def check(candidate):\n    \n    assert candidate((4, 5))==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n    assert candidate((5, 6))==[[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n\ndef test_check():\n    check(get_coordinates)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple, List\n\ndef get_coordinates(test_tup: Tuple[int, int]) -> List[List[int]]:\n    x, y = test_tup\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n    adjacent_coords = [[x + dx, y + dy] for dx, dy in directions]\n    return adjacent_coords\n\n\n"], "responses": ["```python\nfrom typing import Tuple, List\n\ndef get_coordinates(test_tup: Tuple[int, int]) -> List[List[int]]:\n    x, y = test_tup\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n    adjacent_coords = [[x + dx, y + dy] for dx, dy in directions]\n    return adjacent_coords\n```"], "prompt_tokens": [91], "completion_tokens": [113], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_630_get_coordinates"}
{"name": "mbpp_631_replace_spaces", "language": "Python3", "prompt": "def replace_spaces(text: str) -> str:\n    \"\"\"\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_spaces", "test": "def check(candidate):\n    \n    assert candidate('The_Avengers')=='The Avengers'\n    assert candidate('Fast and Furious')=='Fast_and_Furious'\n\ndef test_check():\n    check(replace_spaces)\n\ntest_check()\n", "source_codes": ["\ndef replace_spaces(text: str) -> str:\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n\n\n"], "responses": ["```\ndef replace_spaces(text: str) -> str:\n    return text.replace(\" \", \"_\").replace(\"_\", \" \")\n```"], "prompt_tokens": [80], "completion_tokens": [26], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_631_replace_spaces"}
{"name": "mbpp_632_move_zero", "language": "Python3", "prompt": "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "move_zero", "test": "def check(candidate):\n    \n    assert candidate([2, 3, 2, 0, 0, 4, 0, 5, 0])==[2, 3, 2, 4, 5, 0, 0, 0, 0]\n    assert candidate([0, 1, 0, 1, 1])==[1, 1, 1, 0, 0]\n\ndef test_check():\n    check(move_zero)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    zero_count = num_list.count(0)  # Count the number of zeros in the list\n    num_list = [num for num in num_list if num != 0]  # Remove all zeros from the list\n    num_list.extend([0] * zero_count)  # Append the zeros at the end of the list\n    return num_list\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    zero_count = num_list.count(0)  # Count the number of zeros in the list\n    num_list = [num for num in num_list if num != 0]  # Remove all zeros from the list\n    num_list.extend([0] * zero_count)  # Append the zeros at the end of the list\n    return num_list\n```"], "prompt_tokens": [86], "completion_tokens": [97], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_632_move_zero"}
{"name": "mbpp_633_pair_xor_Sum", "language": "Python3", "prompt": "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pair_xor_Sum", "test": "def check(candidate):\n    \n    assert candidate([7, 3, 5], 3)==12\n    assert candidate([7, 3], 2)==4\n\ndef test_check():\n    check(pair_xor_Sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\n```"], "prompt_tokens": [94], "completion_tokens": [67], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_633_pair_xor_Sum"}
{"name": "mbpp_635_heap_sort", "language": "Python3", "prompt": "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "heap_sort", "test": "def check(candidate):\n    \n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert candidate([7, 1, 9, 5])==[1, 5, 7, 9]\n\ndef test_check():\n    check(heap_sort)\n\ntest_check()\n", "source_codes": ["\ndef heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[i] < arr[left]:\n        largest = left\n\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr\n\n\n"], "responses": ["```\ndef heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[i] < arr[left]:\n        largest = left\n\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr\n```"], "prompt_tokens": [79], "completion_tokens": [191], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_635_heap_sort"}
{"name": "mbpp_637_noprofit_noloss", "language": "Python3", "prompt": "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given amount has no profit and no loss\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "noprofit_noloss", "test": "def check(candidate):\n    \n    assert candidate(100, 100)==True\n    assert candidate(2000, 5000)==False\n\ndef test_check():\n    check(noprofit_noloss)\n\ntest_check()\n", "source_codes": ["\ndef noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount\n\n\n"], "responses": ["```python\ndef noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount\n```"], "prompt_tokens": [88], "completion_tokens": [32], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_637_noprofit_noloss"}
{"name": "mbpp_638_wind_chill", "language": "Python3", "prompt": "def wind_chill(v: int, t: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "wind_chill", "test": "def check(candidate):\n    \n    assert candidate(40, 20)==19\n    assert candidate(10, 8)==6\n\ndef test_check():\n    check(wind_chill)\n\ntest_check()\n", "source_codes": ["\ndef wind_chill(v: int, t: int) -> int:\n    # Wind chill calculation only makes sense for temperatures below 10\u00b0C and wind speeds above 4.8 km/h\n    if t > 10 or v < 4.8:\n        return t\n\n    # Calculate wind chill using the JAG/TI method\n    wci = 13.12 + 0.6215 * t - 11.37 * v**0.16 + 0.3965 * t * v**0.16\n    # Round up to the next integer\n    return int(wci + 0.5)\n\n\n"], "responses": ["```python\ndef wind_chill(v: int, t: int) -> int:\n    # Wind chill calculation only makes sense for temperatures below 10\u00b0C and wind speeds above 4.8 km/h\n    if t > 10 or v < 4.8:\n        return t\n\n    # Calculate wind chill using the JAG/TI method\n    wci = 13.12 + 0.6215 * t - 11.37 * v**0.16 + 0.3965 * t * v**0.16\n    # Round up to the next integer\n    return int(wci + 0.5)\n```"], "prompt_tokens": [95], "completion_tokens": [137], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_638_wind_chill"}
{"name": "mbpp_639_sample_nam", "language": "Python3", "prompt": "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    \"\"\"\n\tWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sample_nam", "test": "def check(candidate):\n    \n    assert candidate(['php', 'res', 'Python', 'abcd', 'Java', 'aaa'])==10\n    assert candidate(['abcd', 'Python', 'abba', 'aba'])==6\n\ndef test_check():\n    check(sample_nam)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum(len(name) for name in sample_names if name[0].isupper())\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum(len(name) for name in sample_names if name[0].isupper())\n```"], "prompt_tokens": [97], "completion_tokens": [41], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_639_sample_nam"}
{"name": "mbpp_640_remove_parenthesis", "language": "Python3", "prompt": "from typing import List\n\ndef remove_parenthesis(items: List[str]) -> str:\n    \"\"\"\n\tWrite a function to remove the parenthesis and what is inbetween them from a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_parenthesis", "test": "def check(candidate):\n    \n    assert candidate(['string(.abc)'])=='string'\n    assert candidate(['alpha(num)'])=='alpha'\n\ndef test_check():\n    check(remove_parenthesis)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\nimport re\n\ndef remove_parenthesis(items: List[str]) -> List[str]:\n    \"\"\"\n    Write a function to remove the parenthesis and what is in between them from a string.\n    \"\"\"\n    # Regular expression to match content within parentheses, including nested ones\n    regex = r'\\(([^()]|(?R))*\\)'\n    \n    # Remove content within parentheses using regex sub\n    return [re.sub(regex, '', item) for item in items]\n\n\n"], "responses": ["```python\nfrom typing import List\nimport re\n\ndef remove_parenthesis(items: List[str]) -> List[str]:\n    \"\"\"\n    Write a function to remove the parenthesis and what is in between them from a string.\n    \"\"\"\n    # Regular expression to match content within parentheses, including nested ones\n    regex = r'\\(([^()]|(?R))*\\)'\n    \n    # Remove content within parentheses using regex sub\n    return [re.sub(regex, '', item) for item in items]\n```"], "prompt_tokens": [87], "completion_tokens": [102], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_640_remove_parenthesis"}
{"name": "mbpp_641_is_nonagonal", "language": "Python3", "prompt": "def is_nonagonal(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth nonagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_nonagonal", "test": "def check(candidate):\n    \n    assert candidate(15)==750\n    assert candidate(18)==1089\n\ndef test_check():\n    check(is_nonagonal)\n\ntest_check()\n", "source_codes": ["\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return n * (7 * n - 5) // 2\n\n\n"], "responses": ["```python\ndef is_nonagonal(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return n * (7 * n - 5) // 2\n```"], "prompt_tokens": [74], "completion_tokens": [47], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_641_is_nonagonal"}
{"name": "mbpp_643_text_match_wordz_middle", "language": "Python3", "prompt": "def text_match_wordz_middle(text: str) -> bool:\n    \"\"\"\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_wordz_middle", "test": "def check(candidate):\n    \n    assert candidate('zxyabc.')==False\n    assert candidate('  lang  .')==False\n\ndef test_check():\n    check(text_match_wordz_middle)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search(r'\\Bz\\B', text))\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search(r'\\Bz\\B', text))\n```"], "prompt_tokens": [87], "completion_tokens": [34], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_643_text_match_wordz_middle"}
{"name": "mbpp_644_reverse_Array_Upto_K", "language": "Python3", "prompt": "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    \"\"\"\n\tWrite a python function to reverse an array upto a given position.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "reverse_Array_Upto_K", "test": "def check(candidate):\n    \n    assert candidate([4, 5, 6, 7], 2)==[5, 4, 6, 7]\n    assert candidate([9, 8, 7, 6, 5], 3)==[7, 8, 9, 6, 5]\n\ndef test_check():\n    check(reverse_Array_Upto_K)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k > len(input):\n        k = len(input)\n    return input[:k][::-1] + input[k:]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k > len(input):\n        k = len(input)\n    return input[:k][::-1] + input[k:]\n```"], "prompt_tokens": [89], "completion_tokens": [54], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_644_reverse_Array_Upto_K"}
{"name": "mbpp_720_add_dict_to_tuple", "language": "Python3", "prompt": "from typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple[int, int, int], test_dict: Dict[str, int]) -> Tuple[int, int, int, Dict[str, int]]:\n    \"\"\"\n\tWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_dict_to_tuple", "test": "def check(candidate):\n    \n    assert candidate((1, 2, 3), { 'UTS': 2, 'is': 3, 'Worst': 4 })==(1, 2, 3, { 'UTS': 2, 'is': 3, 'Worst': 4 })\n    assert candidate((8, 9, 10), { 'POS': 3, 'is': 4, 'Okay': 5 })==(8, 9, 10, { 'POS': 3, 'is': 4, 'Okay': 5 })\n\ndef test_check():\n    check(add_dict_to_tuple)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple[int, int, int], test_dict: Dict[str, int]) -> Tuple[int, int, int, Dict[str, int]]:\n    return test_tup + (test_dict,)\n\n\n"], "responses": ["```python\nfrom typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple[int, int, int], test_dict: Dict[str, int]) -> Tuple[int, int, int, Dict[str, int]]:\n    return test_tup + (test_dict,)\n```"], "prompt_tokens": [114], "completion_tokens": [58], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_720_add_dict_to_tuple"}
{"name": "mbpp_721_maxAverageOfPath", "language": "Python3", "prompt": "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    \"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "maxAverageOfPath", "test": "def check(candidate):\n    \n    assert candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]])==6.2\n    assert candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]])==7.2\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]])==5.8\n\ndef test_check():\n    check(maxAverageOfPath)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = (cost[0][0], 1)  # (total cost, number of cells)\n\n    # Initialize first row and first column\n    for i in range(1, n):\n        dp[i][0] = (dp[i-1][0][0] + cost[i][0], dp[i-1][0][1] + 1)\n        dp[0][i] = (dp[0][i-1][0] + cost[0][i], dp[0][i-1][1] + 1)\n\n    # Fill the rest of the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            # Choose the path with the higher average\n            if (dp[i-1][j][0] + cost[i][j]) / (dp[i-1][j][1] + 1) > (dp[i][j-1][0] + cost[i][j]) / (dp[i][j-1][1] + 1):\n                dp[i][j] = (dp[i-1][j][0] + cost[i][j], dp[i-1][j][1] + 1)\n            else:\n                dp[i][j] = (dp[i][j-1][0] + cost[i][j], dp[i][j-1][1] + 1)\n\n    # Calculate the maximum average\n    return dp[n-1][n-1][0] / dp[n-1][n-1][1]\n\n# Example usage:\n# cost = [[1, 2], [3, 4]]\n# print(maxAverageOfPath(cost))  # Output should be 2.5\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = (cost[0][0], 1)  # (total cost, number of cells)\n\n    # Initialize first row and first column\n    for i in range(1, n):\n        dp[i][0] = (dp[i-1][0][0] + cost[i][0], dp[i-1][0][1] + 1)\n        dp[0][i] = (dp[0][i-1][0] + cost[0][i], dp[0][i-1][1] + 1)\n\n    # Fill the rest of the dp table\n    for i in range(1, n):\n        for j in range(1, n):\n            # Choose the path with the higher average\n            if (dp[i-1][j][0] + cost[i][j]) / (dp[i-1][j][1] + 1) > (dp[i][j-1][0] + cost[i][j]) / (dp[i][j-1][1] + 1):\n                dp[i][j] = (dp[i-1][j][0] + cost[i][j], dp[i-1][j][1] + 1)\n            else:\n                dp[i][j] = (dp[i][j-1][0] + cost[i][j], dp[i][j-1][1] + 1)\n\n    # Calculate the maximum average\n    return dp[n-1][n-1][0] / dp[n-1][n-1][1]\n\n# Example usage:\n# cost = [[1, 2], [3, 4]]\n# print(maxAverageOfPath(cost))  # Output should be 2.5\n```"], "prompt_tokens": [158], "completion_tokens": [415], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_721_maxAverageOfPath"}
{"name": "mbpp_722_filter_data", "language": "Python3", "prompt": "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, int]], h: float, w: int) -> Dict[str, Tuple[float, int]]:\n    \"\"\"\n\tThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "filter_data", "test": "def check(candidate):\n    \n    assert candidate({ 'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66) }, 5.9, 67)=={ 'Cierra Vega': (6.2, 70), 'Kierra Gentry': (6.0, 68) }\n    assert candidate({ 'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66) }, 5.7, 64)=={ 'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66) }\n\ndef test_check():\n    check(filter_data)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, int]], h: float, w: int) -> Dict[str, Tuple[float, int]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}\n\n\n"], "responses": ["```python\nfrom typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, int]], h: float, w: int) -> Dict[str, Tuple[float, int]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}\n```"], "prompt_tokens": [144], "completion_tokens": [73], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_722_filter_data"}
{"name": "mbpp_723_count_same_pair", "language": "Python3", "prompt": "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"\n\tThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_same_pair", "test": "def check(candidate):\n    \n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1\n    assert candidate([0, 1, 1, 2], [0, 1, 2, 2])==3\n\ndef test_check():\n    check(count_same_pair)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum(1 for x, y in zip(nums1, nums2) if x == y)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum(1 for x, y in zip(nums1, nums2) if x == y)\n```"], "prompt_tokens": [102], "completion_tokens": [50], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_723_count_same_pair"}
{"name": "mbpp_724_power_base_sum", "language": "Python3", "prompt": "def power_base_sum(base: int, power: int) -> int:\n    \"\"\"\n\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "power_base_sum", "test": "def check(candidate):\n    \n    assert candidate(8, 10)==37\n    assert candidate(8, 15)==62\n    assert candidate(3, 3)==9\n\ndef test_check():\n    check(power_base_sum)\n\ntest_check()\n", "source_codes": ["\ndef power_base_sum(base: int, power: int) -> int:\n    # Calculate base to the power\n    result = base ** power\n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    # Calculate the sum of the digits\n    digit_sum = sum(int(digit) for digit in result_str)\n    return digit_sum\n\n\n"], "responses": ["```python\ndef power_base_sum(base: int, power: int) -> int:\n    # Calculate base to the power\n    result = base ** power\n    # Convert the result to a string to iterate over each digit\n    result_str = str(result)\n    # Calculate the sum of the digits\n    digit_sum = sum(int(digit) for digit in result_str)\n    return digit_sum\n```"], "prompt_tokens": [92], "completion_tokens": [84], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_724_power_base_sum"}
{"name": "mbpp_725_extract_quotation", "language": "Python3", "prompt": "from typing import List, Any\n\ndef extract_quotation(text1: str) -> List[Any]:\n    \"\"\"\n\tWrite a function to extract values between quotation marks \" \" of the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_725_extract_quotation.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_quotation", "test": "def check(candidate):\n    \n    assert candidate('Cast your \"favorite\" entertainment \"apps\"')==['favorite', 'apps']\n    assert candidate('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support')==['4k Ultra HD', 'HDR 10']\n    assert candidate(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\")==[]\n\ndef test_check():\n    check(extract_quotation)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    # Use regular expression to find all occurrences of text within quotes\n    matches = re.findall(r'\"(.*?)\"', text1)\n    return matches\n\n\n"], "responses": ["```python\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    # Use regular expression to find all occurrences of text within quotes\n    matches = re.findall(r'\"(.*?)\"', text1)\n    return matches\n```"], "prompt_tokens": [88], "completion_tokens": [53], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_725_extract_quotation"}
{"name": "mbpp_726_multiply_elements", "language": "Python3", "prompt": "from typing import List, Any\n\ndef multiply_elements(test_tup: List[int]) -> List[Any]:\n    \"\"\"\n\tWrite a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_726_multiply_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "multiply_elements", "test": "def check(candidate):\n    \n    assert candidate([2, 4, 5, 6, 7])==[8, 20, 30, 42]\n    assert candidate([12, 13, 14, 9, 15])==[156, 182, 126, 135]\n    assert candidate([12])==[]\n\ndef test_check():\n    check(multiply_elements)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef multiply_elements(test_tup: List[int]) -> List[Any]:\n    return [test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)]\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef multiply_elements(test_tup: List[int]) -> List[Any]:\n    return [test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)]\n```"], "prompt_tokens": [123], "completion_tokens": [55], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_726_multiply_elements"}
{"name": "mbpp_728_sum_list", "language": "Python3", "prompt": "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_list", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3], [5, 6, 7])==[6, 8, 10]\n    assert candidate([15, 20, 30], [15, 45, 75])==[30, 65, 105]\n\ndef test_check():\n    check(sum_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]\n```"], "prompt_tokens": [118], "completion_tokens": [46], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_728_sum_list"}
{"name": "mbpp_730_consecutive_duplicates", "language": "Python3", "prompt": "from typing import List, Any\n\ndef consecutive_duplicates(nums: List[Any]) -> List[Any]:\n    \"\"\"\n\tWrite a function to remove consecutive duplicates of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "consecutive_duplicates", "test": "def check(candidate):\n    \n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']\n\ndef test_check():\n    check(consecutive_duplicates)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef consecutive_duplicates(nums: List[Any]) -> List[Any]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef consecutive_duplicates(nums: List[Any]) -> List[Any]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result\n```"], "prompt_tokens": [83], "completion_tokens": [64], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_730_consecutive_duplicates"}
{"name": "mbpp_731_lateralsurface_cone", "language": "Python3", "prompt": "def lateralsurface_cone(r: int, h: int) -> float:\n    \"\"\"\n\tWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lateralsurface_cone", "test": "def check(candidate):\n    \n    assert candidate(10, 15)==566.3586699569488\n    assert candidate(19, 17)==1521.8090132193388\n\ndef test_check():\n    check(lateralsurface_cone)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef lateralsurface_cone(r: int, h: int) -> float:\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area\n\n\n"], "responses": ["```python\nimport math\n\ndef lateralsurface_cone(r: int, h: int) -> float:\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area\n```"], "prompt_tokens": [89], "completion_tokens": [59], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_731_lateralsurface_cone"}
{"name": "mbpp_732_replace_specialchar", "language": "Python3", "prompt": "def replace_specialchar(text: str) -> str:\n    \"\"\"\n\tWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_specialchar", "test": "def check(candidate):\n    \n    assert candidate('a b c,d e f')=='a:b:c:d:e:f'\n    assert candidate('ram reshma,ram rahim')=='ram:reshma:ram:rahim'\n\ndef test_check():\n    check(replace_specialchar)\n\ntest_check()\n", "source_codes": ["\ndef replace_specialchar(text: str) -> str:\n    for char in [' ', ',', '.']:\n        text = text.replace(char, ':')\n    return text\n\n\n"], "responses": ["```python\ndef replace_specialchar(text: str) -> str:\n    for char in [' ', ',', '.']:\n        text = text.replace(char, ':')\n    return text\n```"], "prompt_tokens": [81], "completion_tokens": [37], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_732_replace_specialchar"}
{"name": "mbpp_733_find_first_occurrence", "language": "Python3", "prompt": "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_first_occurrence", "test": "def check(candidate):\n    \n    assert candidate([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5)==2\n    assert candidate([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6)==4\n\ndef test_check():\n    check(find_first_occurrence)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1  # Look on the left side for the first occurrence\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1  # Look on the left side for the first occurrence\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n```"], "prompt_tokens": [94], "completion_tokens": [130], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_733_find_first_occurrence"}
{"name": "mbpp_734_sum_Of_Subarray_Prod", "language": "Python3", "prompt": "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_Of_Subarray_Prod", "test": "def check(candidate):\n    \n    assert candidate([1, 2])==5\n    assert candidate([1, 2, 3, 4])==84\n\ndef test_check():\n    check(sum_Of_Subarray_Prod)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    result = 0\n    n = len(arr)\n    \n    for i in range(n):\n        # Contribution of the element arr[i] to the sum is equal to\n        # arr[i] * (number of subarrays it is part of)\n        # Each element arr[i] is a part of (i + 1) * (n - i) subarrays\n        result += arr[i] * (i + 1) * (n - i)\n    \n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    result = 0\n    n = len(arr)\n    \n    for i in range(n):\n        # Contribution of the element arr[i] to the sum is equal to\n        # arr[i] * (number of subarrays it is part of)\n        # Each element arr[i] is a part of (i + 1) * (n - i) subarrays\n        result += arr[i] * (i + 1) * (n - i)\n    \n    return result\n```"], "prompt_tokens": [110], "completion_tokens": [126], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_734_sum_Of_Subarray_Prod"}
{"name": "mbpp_735_toggle_middle_bits", "language": "Python3", "prompt": "def toggle_middle_bits(n: int) -> int:\n    \"\"\"\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "toggle_middle_bits", "test": "def check(candidate):\n    \n    assert candidate(10)==12\n    assert candidate(11)==13\n    assert candidate(65)==127\n    assert candidate(77)==115\n\ndef test_check():\n    check(toggle_middle_bits)\n\ntest_check()\n", "source_codes": ["\ndef toggle_middle_bits(n: int) -> int:\n    # First, we need to find the number of bits in the binary representation of n\n    # We can do this by finding the position of the highest bit set (most significant bit)\n    num_bits = n.bit_length()\n\n    # If the number has less than or equal to 2 bits, there are no middle bits to toggle\n    if num_bits <= 2:\n        return n\n\n    # Create a mask that has all bits set except the first and last\n    # For example, if num_bits is 5, mask will be 0b01110\n    mask = (1 << (num_bits - 1)) - 1  # Sets all bits below the most significant bit\n    mask = mask ^ (mask >> (num_bits - 1))  # Clears the least significant bit\n\n    # Toggle the middle bits by using XOR with the mask\n    return n ^ mask\n\n\n"], "responses": ["```python\ndef toggle_middle_bits(n: int) -> int:\n    # First, we need to find the number of bits in the binary representation of n\n    # We can do this by finding the position of the highest bit set (most significant bit)\n    num_bits = n.bit_length()\n\n    # If the number has less than or equal to 2 bits, there are no middle bits to toggle\n    if num_bits <= 2:\n        return n\n\n    # Create a mask that has all bits set except the first and last\n    # For example, if num_bits is 5, mask will be 0b01110\n    mask = (1 << (num_bits - 1)) - 1  # Sets all bits below the most significant bit\n    mask = mask ^ (mask >> (num_bits - 1))  # Clears the least significant bit\n\n    # Toggle the middle bits by using XOR with the mask\n    return n ^ mask\n```"], "prompt_tokens": [101], "completion_tokens": [203], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_735_toggle_middle_bits"}
{"name": "mbpp_736_left_insertion", "language": "Python3", "prompt": "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "left_insertion", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 4, 5], 3)==2\n    assert candidate([1, 2, 4, 5], 7)==4\n\ndef test_check():\n    check(left_insertion)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n```"], "prompt_tokens": [116], "completion_tokens": [82], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_736_left_insertion"}
{"name": "mbpp_737_check_str", "language": "Python3", "prompt": "def check_str(string: str) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given string is starting with a vowel or not using regex.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_str", "test": "def check(candidate):\n    \n    assert candidate('dawood')==False\n    assert candidate('Else')==True\n\ndef test_check():\n    check(check_str)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef check_str(string: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', string))\n\n\n"], "responses": ["```python\nimport re\n\ndef check_str(string: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', string))\n```"], "prompt_tokens": [81], "completion_tokens": [32], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_737_check_str"}
{"name": "mbpp_738_geometric_sum", "language": "Python3", "prompt": "def geometric_sum(n: int) -> float:\n    \"\"\"\n\tWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "geometric_sum", "test": "def check(candidate):\n    \n    assert candidate(4)==1.9375\n    assert candidate(8)==1.99609375\n\ndef test_check():\n    check(geometric_sum)\n\ntest_check()\n", "source_codes": ["\ndef geometric_sum(n: int) -> float:\n    if n < 0:\n        return 0\n    else:\n        return 1 / (pow(2, n)) + geometric_sum(n - 1)\n\n\n"], "responses": ["```python\ndef geometric_sum(n: int) -> float:\n    if n < 0:\n        return 0\n    else:\n        return 1 / (pow(2, n)) + geometric_sum(n - 1)\n```"], "prompt_tokens": [100], "completion_tokens": [49], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_738_geometric_sum"}
{"name": "mbpp_739_find_Index", "language": "Python3", "prompt": "def find_Index(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Index", "test": "def check(candidate):\n    \n    assert candidate(3)==14\n    assert candidate(4)==45\n\ndef test_check():\n    check(find_Index)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef find_Index(n: int) -> int:\n    # The formula for the nth triangular number is n*(n+1)/2\n    # To find the smallest triangular number with n digits, we need to find the smallest x such that\n    # 10^(n-1) <= x*(x+1)/2 < 10^n\n    # We can use binary search to find the smallest x that satisfies the condition\n    \n    # Lower bound for binary search\n    low = 1\n    # Upper bound for binary search, since we are looking for n digits number, we can safely assume that\n    # the upper bound will not exceed 10^n\n    high = 10**n\n    \n    while low < high:\n        mid = (low + high) // 2\n        # Check if the mid triangular number has n digits\n        if mid * (mid + 1) // 2 >= 10**(n-1):\n            high = mid\n        else:\n            low = mid + 1\n    \n    return low\n\n# Example usage:\n# print(find_Index(2))  # Should return the index of the smallest triangular number with 2 digits\n\n\n"], "responses": ["```python\nimport math\n\ndef find_Index(n: int) -> int:\n    # The formula for the nth triangular number is n*(n+1)/2\n    # To find the smallest triangular number with n digits, we need to find the smallest x such that\n    # 10^(n-1) <= x*(x+1)/2 < 10^n\n    # We can use binary search to find the smallest x that satisfies the condition\n    \n    # Lower bound for binary search\n    low = 1\n    # Upper bound for binary search, since we are looking for n digits number, we can safely assume that\n    # the upper bound will not exceed 10^n\n    high = 10**n\n    \n    while low < high:\n        mid = (low + high) // 2\n        # Check if the mid triangular number has n digits\n        if mid * (mid + 1) // 2 >= 10**(n-1):\n            high = mid\n        else:\n            low = mid + 1\n    \n    return low\n\n# Example usage:\n# print(find_Index(2))  # Should return the index of the smallest triangular number with 2 digits\n```"], "prompt_tokens": [99], "completion_tokens": [251], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_739_find_Index"}
{"name": "mbpp_740_tuple_to_dict", "language": "Python3", "prompt": "from typing import Tuple, Dict\n\ndef tuple_to_dict(test_tup: Tuple[int, int, int, int, int, int]) -> Dict[int, int]:\n    \"\"\"\n\tWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tuple_to_dict", "test": "def check(candidate):\n    \n    assert candidate((1, 2, 3, 4, 5, 6))=={ 1: 2, 3: 4, 5: 6 }\n    assert candidate((7, 8, 9, 10, 11, 12))=={ 7: 8, 9: 10, 11: 12 }\n\ndef test_check():\n    check(tuple_to_dict)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple, Dict\n\ndef tuple_to_dict(test_tup: Tuple[int, int, int, int, int, int]) -> Dict[int, int]:\n    it = iter(test_tup)\n    return dict(zip(it, it))\n\n\n"], "responses": ["```python\nfrom typing import Tuple, Dict\n\ndef tuple_to_dict(test_tup: Tuple[int, int, int, int, int, int]) -> Dict[int, int]:\n    it = iter(test_tup)\n    return dict(zip(it, it))\n```"], "prompt_tokens": [125], "completion_tokens": [54], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_740_tuple_to_dict"}
{"name": "mbpp_741_all_Characters_Same", "language": "Python3", "prompt": "def all_Characters_Same(s: str) -> bool:\n    \"\"\"\n\tWrite a python function to check whether all the characters are same or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "all_Characters_Same", "test": "def check(candidate):\n    \n    assert candidate('aaa')==True\n    assert candidate('data')==False\n\ndef test_check():\n    check(all_Characters_Same)\n\ntest_check()\n", "source_codes": ["\ndef all_Characters_Same(s: str) -> bool:\n    return all(c == s[0] for c in s)\n\n\n"], "responses": ["```python\ndef all_Characters_Same(s: str) -> bool:\n    return all(c == s[0] for c in s)\n```"], "prompt_tokens": [80], "completion_tokens": [31], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_741_all_Characters_Same"}
{"name": "mbpp_742_area_tetrahedron", "language": "Python3", "prompt": "def area_tetrahedron(side: int) -> float:\n    \"\"\"\n\tWrite a function to caluclate the area of a tetrahedron.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "area_tetrahedron", "test": "def check(candidate):\n    \n    assert candidate(20)==692.8203230275509\n    assert candidate(10)==173.20508075688772\n\ndef test_check():\n    check(area_tetrahedron)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef area_tetrahedron(side: int) -> float:\n    \"\"\"\n    Calculate the area of a regular tetrahedron with a given side length.\n    \"\"\"\n    return math.sqrt(3) * side ** 2\n\n\n"], "responses": ["```python\nimport math\n\ndef area_tetrahedron(side: int) -> float:\n    \"\"\"\n    Calculate the area of a regular tetrahedron with a given side length.\n    \"\"\"\n    return math.sqrt(3) * side ** 2\n```"], "prompt_tokens": [83], "completion_tokens": [55], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_742_area_tetrahedron"}
{"name": "mbpp_743_rotate_right", "language": "Python3", "prompt": "from typing import List\n\ndef rotate_right(list: List[int], m: int) -> List[int]:\n    \"\"\"\n\tWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rotate_right", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n\ndef test_check():\n    check(rotate_right)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef rotate_right(lst: List[int], m: int) -> List[int]:\n    if not lst:\n        return lst\n    m = m % len(lst)  # To handle rotation greater than list size\n    return lst[-m:] + lst[:-m]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef rotate_right(lst: List[int], m: int) -> List[int]:\n    if not lst:\n        return lst\n    m = m % len(lst)  # To handle rotation greater than list size\n    return lst[-m:] + lst[:-m]\n```"], "prompt_tokens": [107], "completion_tokens": [63], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_743_rotate_right"}
{"name": "mbpp_744_check_none", "language": "Python3", "prompt": "from typing import Any\n\ndef check_none(test_tup: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if the given tuple has any none value or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_744_check_none.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_none", "test": "def check(candidate):\n    \n    assert candidate((7, 8, 9, 11, 14))==False\n    assert candidate((1, 2, 3, 4, None))==True\n\ndef test_check():\n    check(check_none)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Any\n\ndef check_none(test_tup: Any) -> bool:\n    return any(item is None for item in test_tup)\n\n\n"], "responses": ["```python\nfrom typing import Any\n\ndef check_none(test_tup: Any) -> bool:\n    return any(item is None for item in test_tup)\n```"], "prompt_tokens": [85], "completion_tokens": [34], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_744_check_none"}
{"name": "mbpp_745_divisible_by_digits", "language": "Python3", "prompt": "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "divisible_by_digits", "test": "def check(candidate):\n    \n    assert candidate(1, 15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n    assert candidate(20, 25)==[22, 24]\n\ndef test_check():\n    check(divisible_by_digits)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    def check_divisibility(n: int) -> bool:\n        for digit in str(n):\n            if digit == '0' or n % int(digit) != 0:\n                return False\n        return True\n\n    return [num for num in range(startnum, endnum + 1) if check_divisibility(num)]\n\n# Example usage:\n# print(divisible_by_digits(1, 22))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    def check_divisibility(n: int) -> bool:\n        for digit in str(n):\n            if digit == '0' or n % int(digit) != 0:\n                return False\n        return True\n\n    return [num for num in range(startnum, endnum + 1) if check_divisibility(num)]\n\n# Example usage:\n# print(divisible_by_digits(1, 22))\n```"], "prompt_tokens": [123], "completion_tokens": [113], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_745_divisible_by_digits"}
{"name": "mbpp_746_sector_area", "language": "Python3", "prompt": "from typing import Optional\n\ndef sector_area(r: int, a: int) -> Optional[float]:\n    \"\"\"\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sector_area", "test": "def check(candidate):\n    \n    assert candidate(9, 45)==31.808625617596654\n    assert candidate(9, 361)==None\n\ndef test_check():\n    check(sector_area)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Optional\nfrom math import pi\n\ndef sector_area(r: int, a: int) -> Optional[float]:\n    if a > 360:\n        return None\n    return (a / 360) * pi * r ** 2\n\n\n"], "responses": ["```python\nfrom typing import Optional\nfrom math import pi\n\ndef sector_area(r: int, a: int) -> Optional[float]:\n    if a > 360:\n        return None\n    return (a / 360) * pi * r ** 2\n```"], "prompt_tokens": [106], "completion_tokens": [56], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_746_sector_area"}
{"name": "mbpp_747_lcs_of_three", "language": "Python3", "prompt": "def lcs_of_three(X: str, Y: str, Z: str) -> int:\n    \"\"\"\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lcs_of_three", "test": "def check(candidate):\n    \n    assert candidate('Reels', 'Reelsfor', 'ReelsforReels')==5\n    assert candidate('abcd1e2', 'bc12ea', 'bd1ea')==3\n\ndef test_check():\n    check(lcs_of_three)\n\ntest_check()\n", "source_codes": ["\ndef lcs_of_three(X: str, Y: str, Z: str) -> int:\n    m, n, o = len(X), len(Y), len(Z)\n    \n    # Create a 3D array to store the lengths of LCS\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    \n    # Build the LCS table in bottom-up fashion\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n    \n    # L[m][n][o] contains the length of LCS for X[0..m-1], Y[0..n-1] and Z[0..o-1]\n    return L[m][n][o]\n\n\n"], "responses": ["```python\ndef lcs_of_three(X: str, Y: str, Z: str) -> int:\n    m, n, o = len(X), len(Y), len(Z)\n    \n    # Create a 3D array to store the lengths of LCS\n    L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    \n    # Build the LCS table in bottom-up fashion\n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if (i == 0 or j == 0 or k == 0):\n                    L[i][j][k] = 0\n                elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]):\n                    L[i][j][k] = L[i-1][j-1][k-1] + 1\n                else:\n                    L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1])\n    \n    # L[m][n][o] contains the length of LCS for X[0..m-1], Y[0..n-1] and Z[0..o-1]\n    return L[m][n][o]\n```"], "prompt_tokens": [108], "completion_tokens": [297], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_747_lcs_of_three"}
{"name": "mbpp_748_capital_words_spaces", "language": "Python3", "prompt": "def capital_words_spaces(str1: str) -> str:\n    \"\"\"\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "capital_words_spaces", "test": "def check(candidate):\n    \n    assert candidate('PythonProgrammingExamples')=='Python Programming Examples'\n    assert candidate('GetReadyToBeCodingFreak')=='Get Ready To Be Coding Freak'\n\ndef test_check():\n    check(capital_words_spaces)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef capital_words_spaces(str1: str) -> str:\n    # Use regular expression to find capital letters and add space before them\n    # except for the first letter in the string\n    return re.sub(r'(?<!^)(?=[A-Z])', ' ', str1)\n\n\n"], "responses": ["```python\nimport re\n\ndef capital_words_spaces(str1: str) -> str:\n    # Use regular expression to find capital letters and add space before them\n    # except for the first letter in the string\n    return re.sub(r'(?<!^)(?=[A-Z])', ' ', str1)\n```"], "prompt_tokens": [81], "completion_tokens": [66], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_748_capital_words_spaces"}
{"name": "mbpp_749_sort_numeric_strings", "language": "Python3", "prompt": "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_numeric_strings", "test": "def check(candidate):\n    \n    assert candidate(['2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n    assert candidate(['1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n\ndef test_check():\n    check(sort_numeric_strings)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    # Convert the list of strings to a list of integers\n    nums_int = [int(num) for num in nums_str]\n    # Sort the list of integers\n    nums_int.sort()\n    return nums_int\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    # Convert the list of strings to a list of integers\n    nums_int = [int(num) for num in nums_str]\n    # Sort the list of integers\n    nums_int.sort()\n    return nums_int\n```"], "prompt_tokens": [104], "completion_tokens": [68], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_749_sort_numeric_strings"}
{"name": "mbpp_750_add_tuple", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef add_tuple(test_list: List[int], test_tup: Tuple[int, int]) -> List[int]:\n    \"\"\"\n\tWrite a function to add the given tuple to the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_tuple", "test": "def check(candidate):\n    \n    assert candidate([6, 7, 8], (10, 11))==[6, 7, 8, 10, 11]\n    assert candidate([7, 8, 9], (11, 12))==[7, 8, 9, 11, 12]\n\ndef test_check():\n    check(add_tuple)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef add_tuple(test_list: List[int], test_tup: Tuple[int, int]) -> List[int]:\n    return test_list + list(test_tup)\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef add_tuple(test_list: List[int], test_tup: Tuple[int, int]) -> List[int]:\n    return test_list + list(test_tup)\n```"], "prompt_tokens": [94], "completion_tokens": [43], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_750_add_tuple"}
{"name": "mbpp_751_check_min_heap", "language": "Python3", "prompt": "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_min_heap", "test": "def check(candidate):\n    \n    assert candidate([2, 3, 4, 5, 10, 15])==True\n    assert candidate([2, 10, 4, 5, 3, 15])==False\n\ndef test_check():\n    check(check_min_heap)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    # Start from root and go till the last internal node\n    for i in range((n - 2) // 2 + 1):\n        # If left child is greater, return false\n        if arr[i] > arr[2 * i + 1]:\n            return False\n        # If right child is greater, return false\n        # Check if right child exists\n        if 2 * i + 2 < n and arr[i] > arr[2 * i + 2]:\n            return False\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    # Start from root and go till the last internal node\n    for i in range((n - 2) // 2 + 1):\n        # If left child is greater, return false\n        if arr[i] > arr[2 * i + 1]:\n            return False\n        # If right child is greater, return false\n        # Check if right child exists\n        if 2 * i + 2 < n and arr[i] > arr[2 * i + 2]:\n            return False\n    return True\n```"], "prompt_tokens": [108], "completion_tokens": [140], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_751_check_min_heap"}
{"name": "mbpp_752_jacobsthal_num", "language": "Python3", "prompt": "def jacobsthal_num(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "jacobsthal_num", "test": "def check(candidate):\n    \n    assert candidate(2)==1\n    assert candidate(4)==5\n    assert candidate(13)==2731\n\ndef test_check():\n    check(jacobsthal_num)\n\ntest_check()\n", "source_codes": ["\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)\n\n\n"], "responses": ["```python\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)\n```"], "prompt_tokens": [145], "completion_tokens": [70], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_752_jacobsthal_num"}
{"name": "mbpp_753_min_k", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    \"\"\"\n\tWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_k", "test": "def check(candidate):\n    \n    assert candidate([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3)==[('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n    assert candidate([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1)==[('Ayesha', 9)]\n\ndef test_check():\n    check(min_k)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\nimport heapq\n\ndef min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    # Using heapq to find the K smallest elements\n    return heapq.nsmallest(K, test_list, key=lambda x: x[1])\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\nimport heapq\n\ndef min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    # Using heapq to find the K smallest elements\n    return heapq.nsmallest(K, test_list, key=lambda x: x[1])\n```"], "prompt_tokens": [128], "completion_tokens": [69], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_753_min_k"}
{"name": "mbpp_754_extract_index_list", "language": "Python3", "prompt": "from typing import List, Any\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[Any]:\n    \"\"\"\n\tWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_index_list", "test": "def check(candidate):\n    \n    assert candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7])==[1, 6]\n    assert candidate([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])==[1, 5]\n    assert candidate([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])==[]\n\ndef test_check():\n    check(extract_index_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[Any]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[Any]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]\n```"], "prompt_tokens": [133], "completion_tokens": [76], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_754_extract_index_list"}
{"name": "mbpp_755_second_smallest", "language": "Python3", "prompt": "from typing import List, Union, Optional\n\ndef second_smallest(numbers: List[Union[int, float]]) -> Optional[float]:\n    \"\"\"\n\tWrite a function to find the second smallest number in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "second_smallest", "test": "def check(candidate):\n    \n    assert candidate([1, 1, -0.5, 0, 2, -2, -2])==-0.5\n    assert candidate([2, 2])==None\n    assert candidate([2, 2, 2])==None\n\ndef test_check():\n    check(second_smallest)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Union, Optional\n\ndef second_smallest(numbers: List[Union[int, float]]) -> Optional[float]:\n    if len(numbers) < 2:\n        return None\n    first, second = float('inf'), float('inf')\n    for number in numbers:\n        if number <= first:\n            first, second = number, first\n        elif number < second:\n            second = number\n    if second == float('inf'):\n        return None\n    return second\n\n\n"], "responses": ["```python\nfrom typing import List, Union, Optional\n\ndef second_smallest(numbers: List[Union[int, float]]) -> Optional[float]:\n    if len(numbers) < 2:\n        return None\n    first, second = float('inf'), float('inf')\n    for number in numbers:\n        if number <= first:\n            first, second = number, first\n        elif number < second:\n            second = number\n    if second == float('inf'):\n        return None\n    return second\n```"], "prompt_tokens": [91], "completion_tokens": [104], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_755_second_smallest"}
{"name": "mbpp_756_text_match_zero_one", "language": "Python3", "prompt": "def text_match_zero_one(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_zero_one", "test": "def check(candidate):\n    \n    assert candidate('dc')==False\n    assert candidate('abbbba')==True\n    assert candidate('dsabbbba')==True\n    assert candidate('asbbbba')==False\n    assert candidate('abaaa')==True\n\ndef test_check():\n    check(text_match_zero_one)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef text_match_zero_one(text: str) -> bool:\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_zero_one(text: str) -> bool:\n    pattern = 'ab+'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n```"], "prompt_tokens": [105], "completion_tokens": [45], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_756_text_match_zero_one"}
{"name": "mbpp_757_count_reverse_pairs", "language": "Python3", "prompt": "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    \"\"\"\n\tWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_reverse_pairs", "test": "def check(candidate):\n    \n    assert candidate(['geeks', 'best', 'for', 'skeeg'])==1\n    assert candidate(['makes', 'best', 'sekam', 'for', 'rof'])==2\n\ndef test_check():\n    check(count_reverse_pairs)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_pairs_count = 0\n    visited = set()\n    for string in test_list:\n        if string[::-1] in visited:\n            reverse_pairs_count += 1\n        visited.add(string)\n    return reverse_pairs_count\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_pairs_count = 0\n    visited = set()\n    for string in test_list:\n        if string[::-1] in visited:\n            reverse_pairs_count += 1\n        visited.add(string)\n    return reverse_pairs_count\n```"], "prompt_tokens": [107], "completion_tokens": [70], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_757_count_reverse_pairs"}
{"name": "mbpp_759_is_decimal", "language": "Python3", "prompt": "def is_decimal(num: str) -> bool:\n    \"\"\"\n\tWrite a function to check whether a given string is a decimal number with a precision of 2.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_decimal", "test": "def check(candidate):\n    \n    assert candidate('e666.86')==False\n    assert candidate('3.124587')==False\n    assert candidate('1.11')==True\n    assert candidate('1.1.11')==False\n\ndef test_check():\n    check(is_decimal)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef is_decimal(num: str) -> bool:\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    return bool(re.match(r'^-?\\d+\\.\\d{2}$', num))\n\n\n"], "responses": ["```python\nimport re\n\ndef is_decimal(num: str) -> bool:\n    \"\"\"\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    \"\"\"\n    return bool(re.match(r'^-?\\d+\\.\\d{2}$', num))\n```"], "prompt_tokens": [82], "completion_tokens": [61], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_759_is_decimal"}
{"name": "mbpp_760_unique_Element", "language": "Python3", "prompt": "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "unique_Element", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 1, 2])==False\n    assert candidate([1, 2, 3, 4, 5])==False\n\ndef test_check():\n    check(unique_Element)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1\n```"], "prompt_tokens": [87], "completion_tokens": [30], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_760_unique_Element"}
{"name": "mbpp_762_check_monthnumber_number", "language": "Python3", "prompt": "def check_monthnumber_number(monthnum3: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_762_check_monthnumber_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_monthnumber_number", "test": "def check(candidate):\n    \n    assert candidate(2)==False\n    assert candidate(12)==False\n\ndef test_check():\n    check(check_monthnumber_number)\n\ntest_check()\n", "source_codes": ["\ndef check_monthnumber_number(monthnum3: int) -> bool:\n    \"\"\"\n    Check whether the given month number contains 30 days or not.\n    Months with 30 days are April (4), June (6), September (9), and November (11).\n    \"\"\"\n    return monthnum3 in [4, 6, 9, 11]\n\n\n"], "responses": ["```python\ndef check_monthnumber_number(monthnum3: int) -> bool:\n    \"\"\"\n    Check whether the given month number contains 30 days or not.\n    Months with 30 days are April (4), June (6), September (9), and November (11).\n    \"\"\"\n    return monthnum3 in [4, 6, 9, 11]\n```"], "prompt_tokens": [95], "completion_tokens": [78], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_762_check_monthnumber_number"}
{"name": "mbpp_763_find_min_diff", "language": "Python3", "prompt": "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_min_diff", "test": "def check(candidate):\n    \n    assert candidate([4, 3, 2, 6], 4)==1\n    assert candidate([30, 5, 20, 9], 4)==4\n\ndef test_check():\n    check(find_min_diff)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    # Sort the array\n    arr.sort()\n    \n    # Initialize difference as infinite\n    diff = float('inf')\n    \n    # Find the min diff by comparing adjacent pairs in sorted array\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < diff:\n            diff = arr[i+1] - arr[i]\n    \n    # Return the minimum difference\n    return diff\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    # Sort the array\n    arr.sort()\n    \n    # Initialize difference as infinite\n    diff = float('inf')\n    \n    # Find the min diff by comparing adjacent pairs in sorted array\n    for i in range(n-1):\n        if arr[i+1] - arr[i] < diff:\n            diff = arr[i+1] - arr[i]\n    \n    # Return the minimum difference\n    return diff\n```"], "prompt_tokens": [107], "completion_tokens": [112], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_763_find_min_diff"}
{"name": "mbpp_764_number_ctr", "language": "Python3", "prompt": "def number_ctr(str: str) -> int:\n    \"\"\"\n\tWrite a python function to count number of digits in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "number_ctr", "test": "def check(candidate):\n    \n    assert candidate('3wonders')==1\n    assert candidate('123')==3\n    assert candidate('3wond-1ers2')==3\n\ndef test_check():\n    check(number_ctr)\n\ntest_check()\n", "source_codes": ["\ndef number_ctr(str: str) -> int:\n    return sum(c.isdigit() for c in str)\n\n\n"], "responses": ["```python\ndef number_ctr(str: str) -> int:\n    return sum(c.isdigit() for c in str)\n```"], "prompt_tokens": [76], "completion_tokens": [25], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_764_number_ctr"}
{"name": "mbpp_765_is_polite", "language": "Python3", "prompt": "def is_polite(n: int) -> int:\n    \"\"\"\n\tWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_polite", "test": "def check(candidate):\n    \n    assert candidate(4)==7\n    assert candidate(9)==13\n\ndef test_check():\n    check(is_polite)\n\ntest_check()\n", "source_codes": ["\ndef is_polite(n: int) -> int:\n    count = 0\n    i = 1\n    while True:\n        if (i & (i - 1)) == 0:  # Check if i is a power of 2\n            i += 1\n            continue\n        count += 1\n        if count == n:\n            return i\n        i += 1\n\n# Example usage:\n# nth_polite_number = is_polite(5)\n# print(nth_polite_number)  # Should print the 5th polite number\n\n\n"], "responses": ["```python\ndef is_polite(n: int) -> int:\n    count = 0\n    i = 1\n    while True:\n        if (i & (i - 1)) == 0:  # Check if i is a power of 2\n            i += 1\n            continue\n        count += 1\n        if count == n:\n            return i\n        i += 1\n\n# Example usage:\n# nth_polite_number = is_polite(5)\n# print(nth_polite_number)  # Should print the 5th polite number\n```"], "prompt_tokens": [83], "completion_tokens": [124], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_765_is_polite"}
{"name": "mbpp_766_pair_wise", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n\tWrite a function to return a list of all pairs of consecutive items in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pair_wise", "test": "def check(candidate):\n    \n    assert candidate([1, 5, 7, 9, 10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\n    assert candidate([5, 1, 9, 7, 10])==[(5, 1), (1, 9), (9, 7), (7, 10)]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n\ndef test_check():\n    check(pair_wise)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]\n```"], "prompt_tokens": [95], "completion_tokens": [55], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_766_pair_wise"}
{"name": "mbpp_767_get_pairs_count", "language": "Python3", "prompt": "from typing import List\n\ndef get_pairs_count(arr: List[int], sum: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_pairs_count", "test": "def check(candidate):\n    \n    assert candidate([1, 5, 7, -1, 5], 6)==3\n    assert candidate([1, -2, 3], 1)==1\n    assert candidate([-1, -2, 3], -3)==1\n\ndef test_check():\n    check(get_pairs_count)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum: int) -> int:\n    count = 0\n    freq = Counter(arr)\n    \n    for num in arr:\n        complement = sum - num\n        count += freq[complement]\n        \n        # If complement and num are same, then decrement count\n        if complement == num:\n            count -= 1\n            \n    # Each pair is counted twice, so halve the result\n    return count // 2\n\n\n"], "responses": ["```python\nfrom typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum: int) -> int:\n    count = 0\n    freq = Counter(arr)\n    \n    for num in arr:\n        complement = sum - num\n        count += freq[complement]\n        \n        # If complement and num are same, then decrement count\n        if complement == num:\n            count -= 1\n            \n    # Each pair is counted twice, so halve the result\n    return count // 2\n```"], "prompt_tokens": [105], "completion_tokens": [111], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_767_get_pairs_count"}
{"name": "mbpp_769_Diff", "language": "Python3", "prompt": "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to get the difference between two lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Diff", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5], [6, 7, 1])==[2, 3, 4, 5, 6, 7]\n    assert candidate([1, 2, 3], [6, 7, 1])==[2, 3, 6, 7]\n\ndef test_check():\n    check(Diff)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1) - set(li2)) + list(set(li2) - set(li1))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1) - set(li2)) + list(set(li2) - set(li1))\n```"], "prompt_tokens": [87], "completion_tokens": [50], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_769_Diff"}
{"name": "mbpp_770_odd_num_sum", "language": "Python3", "prompt": "def odd_num_sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_num_sum", "test": "def check(candidate):\n    \n    assert candidate(3)==707\n    assert candidate(4)==3108\n\ndef test_check():\n    check(odd_num_sum)\n\ntest_check()\n", "source_codes": ["\ndef odd_num_sum(n: int) -> int:\n    sum_of_powers = 0\n    for i in range(1, 2*n, 2):\n        sum_of_powers += i**4\n    return sum_of_powers\n\n\n"], "responses": ["```\ndef odd_num_sum(n: int) -> int:\n    sum_of_powers = 0\n    for i in range(1, 2*n, 2):\n        sum_of_powers += i**4\n    return sum_of_powers\n```"], "prompt_tokens": [81], "completion_tokens": [55], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_770_odd_num_sum"}
{"name": "mbpp_771_check_expression", "language": "Python3", "prompt": "def check_expression(exp: str) -> bool:\n    \"\"\"\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_expression", "test": "def check(candidate):\n    \n    assert candidate('{()}[{]')==False\n    assert candidate('{()}[{}][]({})')==True\n\ndef test_check():\n    check(check_expression)\n\ntest_check()\n", "source_codes": ["\ndef check_expression(exp: str) -> bool:\n    stack = []\n    # Dictionary to hold matching pairs\n    brackets = {')': '(', '}': '{', ']': '['}\n\n    for char in exp:\n        # If the character is an opening bracket, push it onto the stack\n        if char in brackets.values():\n            stack.append(char)\n        # If the character is a closing bracket\n        elif char in brackets.keys():\n            # If the stack is empty or the top of the stack doesn't match the corresponding opening bracket, return False\n            if not stack or stack[-1] != brackets[char]:\n                return False\n            # If the stack is not empty and top of the stack matches, pop the opening bracket\n            stack.pop()\n    # If the stack is empty, all brackets were matched, return True\n    return not stack\n\n\n"], "responses": ["```python\ndef check_expression(exp: str) -> bool:\n    stack = []\n    # Dictionary to hold matching pairs\n    brackets = {')': '(', '}': '{', ']': '['}\n\n    for char in exp:\n        # If the character is an opening bracket, push it onto the stack\n        if char in brackets.values():\n            stack.append(char)\n        # If the character is a closing bracket\n        elif char in brackets.keys():\n            # If the stack is empty or the top of the stack doesn't match the corresponding opening bracket, return False\n            if not stack or stack[-1] != brackets[char]:\n                return False\n            # If the stack is not empty and top of the stack matches, pop the opening bracket\n            stack.pop()\n    # If the stack is empty, all brackets were matched, return True\n    return not stack\n```"], "prompt_tokens": [95], "completion_tokens": [179], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_771_check_expression"}
{"name": "mbpp_772_remove_length", "language": "Python3", "prompt": "def remove_length(test_str: str, K: int) -> str:\n    \"\"\"\n\tWrite a function to remove all the words with k length in the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_length", "test": "def check(candidate):\n    \n    assert candidate('If you told me about this ok', 4)=='If you me about ok'\n    assert candidate('Forces of darkeness is come into the play', 4)=='Forces of darkeness is the'\n\ndef test_check():\n    check(remove_length)\n\ntest_check()\n", "source_codes": ["\ndef remove_length(test_str: str, K: int) -> str:\n    # Split the string into words\n    words = test_str.split()\n    \n    # Filter out words that are not of length K\n    filtered_words = [word for word in words if len(word) != K]\n    \n    # Join the words back into a string\n    result_str = ' '.join(filtered_words)\n    \n    return result_str\n\n\n"], "responses": ["```python\ndef remove_length(test_str: str, K: int) -> str:\n    # Split the string into words\n    words = test_str.split()\n    \n    # Filter out words that are not of length K\n    filtered_words = [word for word in words if len(word) != K]\n    \n    # Join the words back into a string\n    result_str = ' '.join(filtered_words)\n    \n    return result_str\n```"], "prompt_tokens": [83], "completion_tokens": [91], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_772_remove_length"}
{"name": "mbpp_773_occurance_substring", "language": "Python3", "prompt": "from typing import Optional, Tuple\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    \"\"\"\n\tWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "occurance_substring", "test": "def check(candidate):\n    \n    assert candidate('python programming,programming language', 'programming')==('programming', 7, 18)\n    assert candidate('python programming,programming language', 'language')==('language', 31, 39)\n    assert candidate('c++ programming, c++ language', 'python')==None\n\ndef test_check():\n    check(occurance_substring)\n\ntest_check()\n", "source_codes": ["\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    else:\n        return (pattern, index, index + len(pattern) - 1)\n\n\n"], "responses": ["```python\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    else:\n        return (pattern, index, index + len(pattern) - 1)\n```"], "prompt_tokens": [107], "completion_tokens": [64], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_773_occurance_substring"}
{"name": "mbpp_775_odd_position", "language": "Python3", "prompt": "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_position", "test": "def check(candidate):\n    \n    assert candidate([4, 1, 2])==True\n    assert candidate([1, 2, 3])==False\n\ndef test_check():\n    check(odd_position)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n```"], "prompt_tokens": [86], "completion_tokens": [54], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_775_odd_position"}
{"name": "mbpp_776_count_vowels", "language": "Python3", "prompt": "def count_vowels(test_str: str) -> int:\n    \"\"\"\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_vowels", "test": "def check(candidate):\n    \n    assert candidate('partofthejourneyistheend')==12\n    assert candidate('amazonprime')==5\n\ndef test_check():\n    check(count_vowels)\n\ntest_check()\n", "source_codes": ["\ndef count_vowels(test_str: str) -> int:\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n\n\n"], "responses": ["```python\ndef count_vowels(test_str: str) -> int:\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for i in range(1, len(test_str) - 1):\n        if test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n```"], "prompt_tokens": [83], "completion_tokens": [81], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_776_count_vowels"}
{"name": "mbpp_777_find_sum", "language": "Python3", "prompt": "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of non-repeated elements in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_sum", "test": "def check(candidate):\n    \n    assert candidate([1, 10, 9, 4, 2, 10, 10, 45, 4])==71\n    assert candidate([12, 10, 9, 45, 2, 10, 10, 45, 10])==78\n\ndef test_check():\n    check(find_sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    count = Counter(arr)\n    return sum([num for num in arr if count[num] == 1])\n\n\n"], "responses": ["```python\nfrom typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    count = Counter(arr)\n    return sum([num for num in arr if count[num] == 1])\n```"], "prompt_tokens": [86], "completion_tokens": [48], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_777_find_sum"}
{"name": "mbpp_778_pack_consecutive_duplicates", "language": "Python3", "prompt": "from typing import List, Any\n\ndef pack_consecutive_duplicates(list1: List[Any]) -> List[List[Any]]:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pack_consecutive_duplicates", "test": "def check(candidate):\n    \n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef pack_consecutive_duplicates(list1: List[Any]) -> List[List[Any]]:\n    if not list1:  # if the list is empty, return an empty list\n        return []\n\n    packed_list = []\n    current_sublist = [list1[0]]  # start with the first element\n\n    for element in list1[1:]:  # iterate over the rest of the elements\n        if element == current_sublist[-1]:  # if the current element is the same as the last in the sublist\n            current_sublist.append(element)  # append it to the current sublist\n        else:\n            packed_list.append(current_sublist)  # otherwise, add the current sublist to the packed list\n            current_sublist = [element]  # and start a new sublist with the current element\n\n    packed_list.append(current_sublist)  # don't forget to add the last sublist\n\n    return packed_list\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef pack_consecutive_duplicates(list1: List[Any]) -> List[List[Any]]:\n    if not list1:  # if the list is empty, return an empty list\n        return []\n\n    packed_list = []\n    current_sublist = [list1[0]]  # start with the first element\n\n    for element in list1[1:]:  # iterate over the rest of the elements\n        if element == current_sublist[-1]:  # if the current element is the same as the last in the sublist\n            current_sublist.append(element)  # append it to the current sublist\n        else:\n            packed_list.append(current_sublist)  # otherwise, add the current sublist to the packed list\n            current_sublist = [element]  # and start a new sublist with the current element\n\n    packed_list.append(current_sublist)  # don't forget to add the last sublist\n\n    return packed_list\n```"], "prompt_tokens": [91], "completion_tokens": [203], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_778_pack_consecutive_duplicates"}
{"name": "mbpp_780_find_combinations", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n\tWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_combinations", "test": "def check(candidate):\n    \n    assert candidate([(3, 5), (7, 8), (6, 2), (7, 11)])==[(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\n    assert candidate([(4, 6), (8, 9), (7, 3), (8, 12)])==[(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n\ndef test_check():\n    check(find_combinations)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    res = []\n    for i in range(2, len(test_list) + 1):\n        for comb in combinations(test_list, i):\n            sum_comb = tuple(map(sum, zip(*comb)))\n            res.append(sum_comb)\n    return res\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    res = []\n    for i in range(2, len(test_list) + 1):\n        for comb in combinations(test_list, i):\n            sum_comb = tuple(map(sum, zip(*comb)))\n            res.append(sum_comb)\n    return res\n```"], "prompt_tokens": [119], "completion_tokens": [90], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_780_find_combinations"}
{"name": "mbpp_781_count_divisors", "language": "Python3", "prompt": "def count_divisors(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_divisors", "test": "def check(candidate):\n    \n    assert candidate(100)==False\n    assert candidate(125)==True\n\ndef test_check():\n    check(count_divisors)\n\ntest_check()\n", "source_codes": ["\ndef count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\n\n"], "responses": ["```python\ndef count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n```"], "prompt_tokens": [99], "completion_tokens": [59], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_781_count_divisors"}
{"name": "mbpp_782_odd_length_sum", "language": "Python3", "prompt": "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_length_sum", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 1, 2])==15\n    assert candidate([1, 7])==8\n\ndef test_check():\n    check(odd_length_sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            total_sum += sum(arr[i:j+1])\n    return total_sum\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            total_sum += sum(arr[i:j+1])\n    return total_sum\n```"], "prompt_tokens": [102], "completion_tokens": [69], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_782_odd_length_sum"}
{"name": "mbpp_783_rgb_to_hsv", "language": "Python3", "prompt": "from typing import List\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> List[float]:\n    \"\"\"\n\tWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rgb_to_hsv", "test": "def check(candidate):\n    \n    assert candidate(0, 215, 0)==[120.0, 100.0, 84.31372549019608]\n    assert candidate(10, 215, 110)==[149.26829268292684, 95.34883720930233, 84.31372549019608]\n\ndef test_check():\n    check(rgb_to_hsv)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> List[float]:\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n\n    if mx == 0:\n        s = 0\n    else:\n        s = (df / mx) * 100\n\n    v = mx * 100\n\n    return [h, s, v]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> List[float]:\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n\n    if mx == 0:\n        s = 0\n    else:\n        s = (df / mx) * 100\n\n    v = mx * 100\n\n    return [h, s, v]\n```"], "prompt_tokens": [109], "completion_tokens": [226], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_783_rgb_to_hsv"}
{"name": "mbpp_784_mul_even_odd", "language": "Python3", "prompt": "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "mul_even_odd", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==2\n    assert candidate([1, 5, 7, 9, 10])==10\n\ndef test_check():\n    check(mul_even_odd)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if even is None and num % 2 == 0:\n            even = num\n        if odd is None and num % 2 != 0:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is not None and odd is not None:\n        return even * odd\n    else:\n        return 0  # or raise an exception if the list does not contain both even and odd numbers\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = None\n    odd = None\n    for num in list1:\n        if even is None and num % 2 == 0:\n            even = num\n        if odd is None and num % 2 != 0:\n            odd = num\n        if even is not None and odd is not None:\n            break\n    if even is not None and odd is not None:\n        return even * odd\n    else:\n        return 0  # or raise an exception if the list does not contain both even and odd numbers\n```"], "prompt_tokens": [88], "completion_tokens": [135], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_784_mul_even_odd"}
{"name": "mbpp_785_tuple_str_int", "language": "Python3", "prompt": "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, int, int]:\n    \"\"\"\n\tWrite a function to convert tuple string to integer tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tuple_str_int", "test": "def check(candidate):\n    \n    assert candidate('(1, 2, 3)')==(1, 2, 3)\n    assert candidate('(4, 5, 6)')==(4, 5, 6)\n    assert candidate('(7, 81, 19)')==(7, 81, 19)\n\ndef test_check():\n    check(tuple_str_int)\n\ntest_check()\n", "source_codes": ["\ndef tuple_str_int(test_str: str) -> Tuple[int, int, int]:\n    # Assuming the input string is in the format \"(a, b, c)\"\n    # where a, b, and c are integers, we first strip the parentheses\n    # and then split the string by commas to get the individual numbers.\n    # Finally, we convert each number to an integer and return the tuple.\n    test_str = test_str.strip(\"()\")\n    return tuple(map(int, test_str.split(\", \")))\n\n\n"], "responses": ["```python\ndef tuple_str_int(test_str: str) -> Tuple[int, int, int]:\n    # Assuming the input string is in the format \"(a, b, c)\"\n    # where a, b, and c are integers, we first strip the parentheses\n    # and then split the string by commas to get the individual numbers.\n    # Finally, we convert each number to an integer and return the tuple.\n    test_str = test_str.strip(\"()\")\n    return tuple(map(int, test_str.split(\", \")))\n```"], "prompt_tokens": [85], "completion_tokens": [108], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_785_tuple_str_int"}
{"name": "mbpp_786_right_insertion", "language": "Python3", "prompt": "from typing import List\n\ndef right_insertion(a: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "right_insertion", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 4, 5], 3)==2\n    assert candidate([1, 2, 4, 5], 7)==4\n\ndef test_check():\n    check(right_insertion)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\nfrom bisect import bisect_right\n\ndef right_insertion(a: List[int], x: int) -> int:\n    return bisect_right(a, x)\n\n\n"], "responses": ["```python\nfrom typing import List\nfrom bisect import bisect_right\n\ndef right_insertion(a: List[int], x: int) -> int:\n    return bisect_right(a, x)\n```"], "prompt_tokens": [90], "completion_tokens": [42], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_786_right_insertion"}
{"name": "mbpp_787_text_match_three", "language": "Python3", "prompt": "def text_match_three(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an a followed by three 'b'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_three", "test": "def check(candidate):\n    \n    assert candidate('dc')==False\n    assert candidate('abbbba')==True\n    assert candidate('caacabbbba')==True\n\ndef test_check():\n    check(text_match_three)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef text_match_three(text: str) -> bool:\n    pattern = 'ab{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_three(text: str) -> bool:\n    pattern = 'ab{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n```"], "prompt_tokens": [80], "completion_tokens": [45], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_787_text_match_three"}
{"name": "mbpp_788_new_tuple", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef new_tuple(test_list: List[str], test_str: str) -> Tuple[str, str, str]:\n    \"\"\"\n\tWrite a function to create a new tuple from the given string and list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "new_tuple", "test": "def check(candidate):\n    \n    assert candidate(['We', 'are'], 'Developers')==('We', 'are', 'Developers')\n    assert candidate(['Part', 'is'], 'Wrong')==('Part', 'is', 'Wrong')\n\ndef test_check():\n    check(new_tuple)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef new_tuple(test_list: List[str], test_str: str) -> Tuple[str, str, str]:\n    # Check if the list is not empty and has at least 3 elements\n    if test_list and len(test_list) >= 3:\n        # Create a new tuple with the first element of the list, the given string, and the third element of the list\n        return (test_list[0], test_str, test_list[2])\n    else:\n        # If the list does not have enough elements, return a tuple with empty strings\n        return (\"\", test_str, \"\")\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef new_tuple(test_list: List[str], test_str: str) -> Tuple[str, str, str]:\n    # Check if the list is not empty and has at least 3 elements\n    if test_list and len(test_list) >= 3:\n        # Create a new tuple with the first element of the list, the given string, and the third element of the list\n        return (test_list[0], test_str, test_list[2])\n    else:\n        # If the list does not have enough elements, return a tuple with empty strings\n        return (\"\", test_str, \"\")\n```"], "prompt_tokens": [96], "completion_tokens": [134], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_788_new_tuple"}
{"name": "mbpp_790_even_position", "language": "Python3", "prompt": "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "even_position", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3])==False\n    assert candidate([2, 1, 4])==True\n\ndef test_check():\n    check(even_position)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n```"], "prompt_tokens": [86], "completion_tokens": [54], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_790_even_position"}
{"name": "mbpp_791_remove_nested", "language": "Python3", "prompt": "from typing import Any, Tuple\n\ndef remove_nested(test_tup: Any) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to remove tuples from the given tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_791_remove_nested.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_nested", "test": "def check(candidate):\n    \n    assert candidate((2, 6, 8, (5, 7), 11))==(2, 6, 8, 11)\n    assert candidate((3, 7, 9, (6, 8), 12))==(3, 7, 9, 12)\n    assert candidate((3, 7, 9, (6, 8), (5, 12), 12))==(3, 7, 9, 12)\n\ndef test_check():\n    check(remove_nested)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Any, Tuple\n\ndef remove_nested(test_tup: Any) -> Tuple[int, int, int, int]:\n    # Initialize an empty list to store the non-tuple elements\n    result = []\n    # Iterate over the elements in the input tuple\n    for elem in test_tup:\n        # Check if the element is not a tuple\n        if not isinstance(elem, tuple):\n            # Append the non-tuple element to the result list\n            result.append(elem)\n    # Convert the result list to a tuple and return\n    return tuple(result)\n\n\n"], "responses": ["```python\nfrom typing import Any, Tuple\n\ndef remove_nested(test_tup: Any) -> Tuple[int, int, int, int]:\n    # Initialize an empty list to store the non-tuple elements\n    result = []\n    # Iterate over the elements in the input tuple\n    for elem in test_tup:\n        # Check if the element is not a tuple\n        if not isinstance(elem, tuple):\n            # Append the non-tuple element to the result list\n            result.append(elem)\n    # Convert the result list to a tuple and return\n    return tuple(result)\n```"], "prompt_tokens": [89], "completion_tokens": [121], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_791_remove_nested"}
{"name": "mbpp_792_count_list", "language": "Python3", "prompt": "from typing import List\n\ndef count_list(input_list: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a python function to count the number of lists in a given number of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_792_count_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_list", "test": "def check(candidate):\n    \n    assert candidate([[1, 2], [2, 3], [4, 5]])==3\n    assert candidate([[1, 0], [2, 0]])==2\n\ndef test_check():\n    check(count_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef count_list(input_list: List[List[int]]) -> int:\n    return len(input_list)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_list(input_list: List[List[int]]) -> int:\n    return len(input_list)\n```"], "prompt_tokens": [87], "completion_tokens": [28], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_792_count_list"}
{"name": "mbpp_793_last", "language": "Python3", "prompt": "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "last", "test": "def check(candidate):\n    \n    assert candidate([1, 1, 1, 2, 3, 4], 1)==2\n    assert candidate([2, 3, 2, 3, 6, 8, 9], 3)==3\n\ndef test_check():\n    check(last)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1  # Move to the right half to find the last occurrence\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = 0, len(arr) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1  # Move to the right half to find the last occurrence\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result\n```"], "prompt_tokens": [88], "completion_tokens": [126], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_793_last"}
{"name": "mbpp_794_text_starta_endb", "language": "Python3", "prompt": "def text_starta_endb(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_starta_endb", "test": "def check(candidate):\n    \n    assert candidate('aabAbbbc')==False\n    assert candidate('accddbbjjj')==False\n\ndef test_check():\n    check(text_starta_endb)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef text_starta_endb(text: str) -> bool:\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))\n\n\n"], "responses": ["```python\nimport re\n\ndef text_starta_endb(text: str) -> bool:\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))\n```"], "prompt_tokens": [87], "completion_tokens": [39], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_794_text_starta_endb"}
{"name": "mbpp_796_return_sum", "language": "Python3", "prompt": "from typing import Dict\n\ndef return_sum(dict: Dict[str, int]) -> int:\n    \"\"\"\n\tWrite function to find the sum of all items in the given dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "return_sum", "test": "def check(candidate):\n    \n    assert candidate({ 'a': 25, 'b': 18, 'c': 45 })==88\n    assert candidate({ 'a': 36, 'b': 39, 'c': 49 })==124\n\ndef test_check():\n    check(return_sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Dict\n\ndef return_sum(dict: Dict[str, int]) -> int:\n    return sum(dict.values())\n\n\n"], "responses": ["```python\nfrom typing import Dict\n\ndef return_sum(dict: Dict[str, int]) -> int:\n    return sum(dict.values())\n```"], "prompt_tokens": [84], "completion_tokens": [28], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_796_return_sum"}
{"name": "mbpp_797_sum_in_range", "language": "Python3", "prompt": "def sum_in_range(l: int, r: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_797_sum_in_range.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_in_range", "test": "def check(candidate):\n    \n    assert candidate(5, 7)==12\n    assert candidate(7, 13)==40\n\ndef test_check():\n    check(sum_in_range)\n\ntest_check()\n", "source_codes": ["\ndef sum_in_range(l: int, r: int) -> int:\n    # Start from the next odd number if l is even\n    if l % 2 == 0:\n        l += 1\n    # Use list comprehension to generate odd numbers and sum them\n    return sum(number for number in range(l, r+1, 2))\n\n\n"], "responses": ["```python\ndef sum_in_range(l: int, r: int) -> int:\n    # Start from the next odd number if l is even\n    if l % 2 == 0:\n        l += 1\n    # Use list comprehension to generate odd numbers and sum them\n    return sum(number for number in range(l, r+1, 2))\n```"], "prompt_tokens": [87], "completion_tokens": [78], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_797_sum_in_range"}
{"name": "mbpp_798__sum", "language": "Python3", "prompt": "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of an array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_798__sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "_sum", "test": "def check(candidate):\n    \n    assert candidate([15, 12, 13, 10])==50\n    assert candidate([0, 1, 2])==3\n\ndef test_check():\n    check(_sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)\n```"], "prompt_tokens": [80], "completion_tokens": [25], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_798__sum"}
{"name": "mbpp_799_left_rotate", "language": "Python3", "prompt": "def left_rotate(n: int, d: int) -> int:\n    \"\"\"\n\tWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "left_rotate", "test": "def check(candidate):\n    \n    assert candidate(10, 2)==40\n    assert candidate(99, 3)==792\n    assert candidate(99, 3)==792\n    assert candidate(1, 3)==8\n    assert candidate(5, 3)==40\n    assert candidate(29, 3)==232\n\ndef test_check():\n    check(left_rotate)\n\ntest_check()\n", "source_codes": ["\ndef left_rotate(n: int, d: int) -> int:\n    # Assuming n is a 32-bit integer\n    BITS = 32\n    # Left rotate is equivalent to (n << d) | (n >> (BITS - d))\n    # We also need to ensure we only consider the lower 32 bits of the result\n    # by using a mask: (1 << BITS) - 1\n    return ((n << d) | (n >> (BITS - d))) & ((1 << BITS) - 1)\n\n\n"], "responses": ["```python\ndef left_rotate(n: int, d: int) -> int:\n    # Assuming n is a 32-bit integer\n    BITS = 32\n    # Left rotate is equivalent to (n << d) | (n >> (BITS - d))\n    # We also need to ensure we only consider the lower 32 bits of the result\n    # by using a mask: (1 << BITS) - 1\n    return ((n << d) | (n >> (BITS - d))) & ((1 << BITS) - 1)\n```"], "prompt_tokens": [91], "completion_tokens": [117], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_799_left_rotate"}
{"name": "mbpp_800_remove_all_spaces", "language": "Python3", "prompt": "def remove_all_spaces(text: str) -> str:\n    \"\"\"\n\tWrite a function to remove all whitespaces from a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_800_remove_all_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_all_spaces", "test": "def check(candidate):\n    \n    assert candidate('python   programming    language')=='pythonprogramminglanguage'\n    assert candidate('python                     program')=='pythonprogram'\n    assert candidate('   python                     program')=='pythonprogram'\n\ndef test_check():\n    check(remove_all_spaces)\n\ntest_check()\n", "source_codes": ["\ndef remove_all_spaces(text: str) -> str:\n    return text.replace(\" \", \"\")\n\n\n"], "responses": ["```\ndef remove_all_spaces(text: str) -> str:\n    return text.replace(\" \", \"\")\n```"], "prompt_tokens": [75], "completion_tokens": [21], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_800_remove_all_spaces"}
{"name": "mbpp_801_test_three_equal", "language": "Python3", "prompt": "def test_three_equal(x: int, y: int, z: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of equal numbers from three given integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "test_three_equal", "test": "def check(candidate):\n    \n    assert candidate(-1, -2, -3)==0\n    assert candidate(1, 2, 2)==2\n\ndef test_check():\n    check(test_three_equal)\n\ntest_check()\n", "source_codes": ["\ndef test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n\n\n"], "responses": ["```\ndef test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n```"], "prompt_tokens": [87], "completion_tokens": [62], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_801_test_three_equal"}
{"name": "mbpp_802_count_rotation", "language": "Python3", "prompt": "from typing import List\n\ndef count_rotation(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_rotation", "test": "def check(candidate):\n    \n    assert candidate([4, 5, 1, 2, 3])==2\n    assert candidate([7, 8, 9, 1, 2, 3])==3\n    assert candidate([1, 2, 3])==0\n    assert candidate([1, 3, 2])==2\n\ndef test_check():\n    check(count_rotation)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef count_rotation(arr: List[int]) -> int:\n    n = len(arr)\n    # Find the index of the minimum element\n    min_index = arr.index(min(arr))\n    # The number of rotations is equal to the index of the minimum element\n    return min_index\n\n# Example usage:\n# arr = [15, 18, 2, 3, 6, 12]\n# print(count_rotation(arr))  # Output: 2\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_rotation(arr: List[int]) -> int:\n    n = len(arr)\n    # Find the index of the minimum element\n    min_index = arr.index(min(arr))\n    # The number of rotations is equal to the index of the minimum element\n    return min_index\n\n# Example usage:\n# arr = [15, 18, 2, 3, 6, 12]\n# print(count_rotation(arr))  # Output: 2\n```"], "prompt_tokens": [107], "completion_tokens": [104], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_802_count_rotation"}
{"name": "mbpp_803_is_perfect_square", "language": "Python3", "prompt": "def is_perfect_square(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_perfect_square", "test": "def check(candidate):\n    \n    assert candidate(36)==True\n    assert candidate(14)==False\n    assert candidate(196)==True\n    assert candidate(125)==False\n    assert candidate(15625)==True\n\ndef test_check():\n    check(is_perfect_square)\n\ntest_check()\n", "source_codes": ["\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    x = n // 2\n    seen = set([x])\n    while x * x != n:\n        x = (x + (n // x)) // 2\n        if x in seen: return False\n        seen.add(x)\n    return True\n\n\n"], "responses": ["```python\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    x = n // 2\n    seen = set([x])\n    while x * x != n:\n        x = (x + (n // x)) // 2\n        if x in seen: return False\n        seen.add(x)\n    return True\n```"], "prompt_tokens": [101], "completion_tokens": [83], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_803_is_perfect_square"}
{"name": "mbpp_804_is_product_even", "language": "Python3", "prompt": "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check whether the product of numbers in a list is even or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_804_is_product_even.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_product_even", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 1, 4])==True\n    assert candidate([1, 1])==False\n\ndef test_check():\n    check(is_product_even)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    # If there is at least one even number in the list, the product will be even.\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    # If there is at least one even number in the list, the product will be even.\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False\n```"], "prompt_tokens": [87], "completion_tokens": [65], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_804_is_product_even"}
{"name": "mbpp_805_max_sum_list", "language": "Python3", "prompt": "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sum_list", "test": "def check(candidate):\n    \n    assert candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]])==[12, 11, 10]\n    assert candidate([[2, 3, 1]])==[2, 3, 1]\n\ndef test_check():\n    check(max_sum_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)\n```"], "prompt_tokens": [92], "completion_tokens": [33], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_805_max_sum_list"}
{"name": "mbpp_806_max_run_uppercase", "language": "Python3", "prompt": "def max_run_uppercase(test_str: str) -> int:\n    \"\"\"\n\tWrite a function to find maximum run of uppercase characters in the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_run_uppercase", "test": "def check(candidate):\n    \n    assert candidate('PrECIOusMOVemENTSYT')==6\n    assert candidate('GooGLEFluTTER')==4\n\ndef test_check():\n    check(max_run_uppercase)\n\ntest_check()\n", "source_codes": ["\ndef max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n\n\n"], "responses": ["```\ndef max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run\n```"], "prompt_tokens": [80], "completion_tokens": [76], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_806_max_run_uppercase"}
{"name": "mbpp_807_first_odd", "language": "Python3", "prompt": "from typing import List\n\ndef first_odd(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the first odd number in a given list of numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "first_odd", "test": "def check(candidate):\n    \n    assert candidate([2, 4, 1, 3])==1\n    assert candidate([8, 9, 1])==9\n\ndef test_check():\n    check(first_odd)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef first_odd(nums: List[int]) -> int:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None  # or raise an exception if there must be an odd number\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef first_odd(nums: List[int]) -> int:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None  # or raise an exception if there must be an odd number\n```"], "prompt_tokens": [85], "completion_tokens": [57], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_807_first_odd"}
{"name": "mbpp_808_check_K", "language": "Python3", "prompt": "from typing import List\n\ndef check_K(test_tup: List[int], K: int) -> bool:\n    \"\"\"\n\tWrite a function to check if the given tuples contain the k or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_K", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5, 6], 7)==False\n    assert candidate([7, 8, 9, 44, 11, 12], 11)==True\n\ndef test_check():\n    check(check_K)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef check_K(test_tup: List[int], K: int) -> bool:\n    return K in test_tup\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_K(test_tup: List[int], K: int) -> bool:\n    return K in test_tup\n```"], "prompt_tokens": [89], "completion_tokens": [34], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_808_check_K"}
{"name": "mbpp_809_check_smaller", "language": "Python3", "prompt": "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> bool:\n    \"\"\"\n\tWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_smaller", "test": "def check(candidate):\n    \n    assert candidate((4, 5, 6), (3, 4, 5))==True\n    assert candidate((11, 12, 13), (10, 11, 12))==True\n\ndef test_check():\n    check(check_smaller)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> bool:\n    return all(x > y for x, y in zip(test_tup1, test_tup2))\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> bool:\n    return all(x > y for x, y in zip(test_tup1, test_tup2))\n```"], "prompt_tokens": [110], "completion_tokens": [62], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_809_check_smaller"}
