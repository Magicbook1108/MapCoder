{"name": "mbpp_3_is_not_prime", "language": "Python3", "prompt": "def is_not_prime(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to identify non-prime numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_3_is_not_prime.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_not_prime", "test": "def check(candidate):\n    \n    assert candidate(10)==True\n    assert candidate(35)==True\n    assert candidate(37)==False\n\ndef test_check():\n    check(is_not_prime)\n\ntest_check()\n", "source_codes": ["\ndef is_not_prime(n: int) -> bool:\n    if n < 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\nprint(is_not_prime(10))  # True, because 10 is not prime (divisible by 2 and 5)\nprint(is_not_prime(11))  # False, because 11 is prime\n\n\n"], "responses": ["```python\ndef is_not_prime(n: int) -> bool:\n    if n < 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\nprint(is_not_prime(10))  # True, because 10 is not prime (divisible by 2 and 5)\nprint(is_not_prime(11))  # False, because 11 is prime\n```"], "prompt_tokens": [507], "completion_tokens": [497], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_3_is_not_prime"}
{"name": "mbpp_4_heap_queue_largest", "language": "Python3", "prompt": "from typing import List\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "heap_queue_largest", "test": "def check(candidate):\n    \n    assert candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 2)==[85, 75]\n    assert candidate([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)==[85, 75, 65, 58, 35]\n\ndef test_check():\n    check(heap_queue_largest)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\nimport heapq\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    if n > len(nums):\n        raise ValueError(\"n is larger than the number of elements in the list\")\n    max_heap = [-num for num in nums]\n    heapq.heapify(max_heap)\n    largest_elements = [-heapq.heappop(max_heap) for _ in range(n)]\n    return sorted(largest_elements, reverse=True)\n\n\n"], "responses": ["```python\nfrom typing import List\nimport heapq\n\ndef heap_queue_largest(nums: List[int], n: int) -> List[int]:\n    if n > len(nums):\n        raise ValueError(\"n is larger than the number of elements in the list\")\n    max_heap = [-num for num in nums]\n    heapq.heapify(max_heap)\n    largest_elements = [-heapq.heappop(max_heap) for _ in range(n)]\n    return sorted(largest_elements, reverse=True)\n```"], "prompt_tokens": [578], "completion_tokens": [519], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_4_heap_queue_largest"}
{"name": "mbpp_6_differ_At_One_Bit_Pos", "language": "Python3", "prompt": "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the two numbers differ at one bit position only or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_6_differ_At_One_Bit_Pos.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "differ_At_One_Bit_Pos", "test": "def check(candidate):\n    \n    assert candidate(15, 8)==False\n    assert candidate(2, 4)==False\n    assert candidate(2, 3)==True\n    assert candidate(5, 1)==True\n    assert candidate(1, 5)==True\n\ndef test_check():\n    check(differ_At_One_Bit_Pos)\n\ntest_check()\n", "source_codes": ["\ndef differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result and not (xor_result & (xor_result - 1))\n\n# Example usage:\nprint(differ_At_One_Bit_Pos(10, 12))  # True\nprint(differ_At_One_Bit_Pos(10, 14))  # False\n\n\n"], "responses": ["```python\ndef differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result and not (xor_result & (xor_result - 1))\n\n# Example usage:\nprint(differ_At_One_Bit_Pos(10, 12))  # True\nprint(differ_At_One_Bit_Pos(10, 14))  # False\n```"], "prompt_tokens": [617], "completion_tokens": [559], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_6_differ_At_One_Bit_Pos"}
{"name": "mbpp_8_square_nums", "language": "Python3", "prompt": "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find squares of individual elements in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_8_square_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "square_nums", "test": "def check(candidate):\n    \n    assert candidate([10, 20, 30])==[100, 400, 900]\n    assert candidate([12, 15])==[144, 225]\n\ndef test_check():\n    check(square_nums)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]\n```"], "prompt_tokens": [408], "completion_tokens": [310], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_8_square_nums"}
{"name": "mbpp_9_find_Rotations", "language": "Python3", "prompt": "def find_Rotations(str: str) -> int:\n    \"\"\"\n\tWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_9_find_Rotations.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Rotations", "test": "def check(candidate):\n    \n    assert candidate('ab')==2\n    assert candidate('abc')==3\n\ndef test_check():\n    check(find_Rotations)\n\ntest_check()\n", "source_codes": ["\ndef find_Rotations(s: str) -> int:\n    original_str = s\n    count = 0\n    \n    while True:\n        count += 1\n        s = s[1:] + s[0]\n        if s == original_str:\n            return count\n\nprint(find_Rotations(\"abcde\"))  # Output: 5\n\n\n"], "responses": ["```python\ndef find_Rotations(s: str) -> int:\n    original_str = s\n    count = 0\n    \n    while True:\n        count += 1\n        s = s[1:] + s[0]\n        if s == original_str:\n            return count\n\nprint(find_Rotations(\"abcde\"))  # Output: 5\n```"], "prompt_tokens": [445], "completion_tokens": [379], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_9_find_Rotations"}
{"name": "mbpp_11_remove_Occ", "language": "Python3", "prompt": "def remove_Occ(s: str, ch: str) -> str:\n    \"\"\"\n\tWrite a python function to remove first and last occurrence of a given character from the string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_Occ", "test": "def check(candidate):\n    \n    assert candidate('abcda', 'a')=='bcd'\n    assert candidate('PHP', 'P')=='H'\n\ndef test_check():\n    check(remove_Occ)\n\ntest_check()\n", "source_codes": ["\ndef remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    if first_index == -1:\n        return s\n    s = s[:first_index] + s[first_index + 1:]\n    last_index = s.rfind(ch)\n    if last_index == -1:\n        return s\n    s = s[:last_index] + s[last_index + 1:]\n    return s\n\nresult = remove_Occ(\"hello world\", \"l\")\nprint(result)\n\n\n"], "responses": ["```python\ndef remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    if first_index == -1:\n        return s\n    s = s[:first_index] + s[first_index + 1:]\n    last_index = s.rfind(ch)\n    if last_index == -1:\n        return s\n    s = s[:last_index] + s[last_index + 1:]\n    return s\n\nresult = remove_Occ(\"hello world\", \"l\")\nprint(result)\n```"], "prompt_tokens": [521], "completion_tokens": [495], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_11_remove_Occ"}
{"name": "mbpp_12_sort_matrix", "language": "Python3", "prompt": "from typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to sort a given matrix in ascending order according to the sum of its rows.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_12_sort_matrix.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_matrix", "test": "def check(candidate):\n    \n    assert candidate([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n    assert candidate([[5, 8, 9], [6, 4, 3], [2, 1, 4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n\ndef test_check():\n    check(sort_matrix)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    row_sums = [sum(row) for row in M]\n    paired_rows = list(zip(row_sums, M))\n    paired_rows.sort(key=lambda x: x[0])\n    sorted_matrix = [row for _, row in paired_rows]\n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [3, 1, 2],\n    [4, 5, 6],\n    [9, 8, 7]\n]\n\nsorted_matrix = sort_matrix(matrix)\nfor row in sorted_matrix:\n    print(row)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\n    row_sums = [sum(row) for row in M]\n    paired_rows = list(zip(row_sums, M))\n    paired_rows.sort(key=lambda x: x[0])\n    sorted_matrix = [row for _, row in paired_rows]\n    return sorted_matrix\n\n# Example usage:\nmatrix = [\n    [3, 1, 2],\n    [4, 5, 6],\n    [9, 8, 7]\n]\n\nsorted_matrix = sort_matrix(matrix)\nfor row in sorted_matrix:\n    print(row)\n```"], "prompt_tokens": [474], "completion_tokens": [461], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_12_sort_matrix"}
{"name": "mbpp_14_find_Volume", "language": "Python3", "prompt": "def find_Volume(l: int, b: int, h: int) -> int:\n    \"\"\"\n\tWrite a python function to find the volume of a triangular prism.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_14_find_Volume.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Volume", "test": "def check(candidate):\n    \n    assert candidate(3, 2, 2)==6\n    assert candidate(1, 2, 1)==1\n\ndef test_check():\n    check(find_Volume)\n\ntest_check()\n", "source_codes": ["\ndef find_Volume(l: int, b: int, h: int) -> int:\n    area_of_base = (1/2) * l * b\n    volume = area_of_base * h\n    return int(volume)\n\n# Example usage:\nlength = 5\nbase = 3\nheight = 10\nvolume = find_Volume(length, base, height)\nprint(f\"The volume of the triangular prism is: {volume}\")\n\n\n"], "responses": ["```python\ndef find_Volume(l: int, b: int, h: int) -> int:\n    area_of_base = (1/2) * l * b\n    volume = area_of_base * h\n    return int(volume)\n\n# Example usage:\nlength = 5\nbase = 3\nheight = 10\nvolume = find_Volume(length, base, height)\nprint(f\"The volume of the triangular prism is: {volume}\")\n```"], "prompt_tokens": [712], "completion_tokens": [672], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_14_find_Volume"}
{"name": "mbpp_16_text_lowercase_underscore", "language": "Python3", "prompt": "def text_lowercase_underscore(text: str) -> bool:\n    \"\"\"\n\tWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_lowercase_underscore", "test": "def check(candidate):\n    \n    assert candidate('aab_Abbbc')==False\n    assert candidate('Aaab_abbbc')==False\n\ndef test_check():\n    check(text_lowercase_underscore)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    return bool(match)\n\n# Example usage:\nprint(text_lowercase_underscore(\"example_text\"))  # Should return True\nprint(text_lowercase_underscore(\"Example_Text\"))  # Should return False\nprint(text_lowercase_underscore(\"exampleText\"))   # Should return False\nprint(text_lowercase_underscore(\"example_text_more\"))  # Should return True\n\n\n"], "responses": ["```python\nimport re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = r'[a-z]+_[a-z]+'\n    match = re.search(pattern, text)\n    return bool(match)\n\n# Example usage:\nprint(text_lowercase_underscore(\"example_text\"))  # Should return True\nprint(text_lowercase_underscore(\"Example_Text\"))  # Should return False\nprint(text_lowercase_underscore(\"exampleText\"))   # Should return False\nprint(text_lowercase_underscore(\"example_text_more\"))  # Should return True\n```"], "prompt_tokens": [494], "completion_tokens": [462], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_16_text_lowercase_underscore"}
{"name": "mbpp_17_square_perimeter", "language": "Python3", "prompt": "def square_perimeter(a: int) -> int:\n    \"\"\"\n\tWrite a function that returns the perimeter of a square given its side length as input.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_17_square_perimeter.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "square_perimeter", "test": "def check(candidate):\n    \n    assert candidate(5)==20\n    assert candidate(4)==16\n\ndef test_check():\n    check(square_perimeter)\n\ntest_check()\n", "source_codes": ["\ndef square_perimeter(a: int) -> int:\n    return 4 * a\n\n# Example usage:\nside_length = 5\nperimeter = square_perimeter(side_length)\nprint(f\"The perimeter of the square is: {perimeter}\")\n\n\n"], "responses": ["```python\ndef square_perimeter(a: int) -> int:\n    return 4 * a\n\n# Example usage:\nside_length = 5\nperimeter = square_perimeter(side_length)\nprint(f\"The perimeter of the square is: {perimeter}\")\n```"], "prompt_tokens": [323], "completion_tokens": [250], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_17_square_perimeter"}
{"name": "mbpp_18_remove_dirty_chars", "language": "Python3", "prompt": "def remove_dirty_chars(string: str, second_string: str) -> str:\n    \"\"\"\n\tWrite a function to remove characters from the first string which are present in the second string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_18_remove_dirty_chars.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_dirty_chars", "test": "def check(candidate):\n    \n    assert candidate('digitalindia', 'talent')=='digiidi'\n    assert candidate('exoticmiles', 'toxic')=='emles'\n\ndef test_check():\n    check(remove_dirty_chars)\n\ntest_check()\n", "source_codes": ["\ndef remove_dirty_chars(string: str, second_string: str) -> str:\n    chars_to_remove = set(second_string)\n    cleaned_string = ''.join(char for char in string if char not in chars_to_remove)\n    return cleaned_string\n\n# Example usage:\nfirst_string = \"hello world\"\nsecond_string = \"ad\"\nresult = remove_dirty_chars(first_string, second_string)\nprint(result)  # \"hello worl\"\n\n\n"], "responses": ["```python\ndef remove_dirty_chars(string: str, second_string: str) -> str:\n    chars_to_remove = set(second_string)\n    cleaned_string = ''.join(char for char in string if char not in chars_to_remove)\n    return cleaned_string\n\n# Example usage:\nfirst_string = \"hello world\"\nsecond_string = \"ad\"\nresult = remove_dirty_chars(first_string, second_string)\nprint(result)  # \"hello worl\"\n```"], "prompt_tokens": [407], "completion_tokens": [359], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_18_remove_dirty_chars"}
{"name": "mbpp_19_test_duplicate", "language": "Python3", "prompt": "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to find whether a given array of integers contains any duplicate element.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_19_test_duplicate.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "test_duplicate", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 4])==True\n    assert candidate([1, 1, 2, 2, 3, 3, 4, 4, 5])==True\n\ndef test_check():\n    check(test_duplicate)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n```"], "prompt_tokens": [443], "completion_tokens": [358], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_19_test_duplicate"}
{"name": "mbpp_20_is_woodall", "language": "Python3", "prompt": "def is_woodall(x: int) -> bool:\n    \"\"\"\n\tWrite a function to check if the given number is woodball or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_20_is_woodall.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_woodall", "test": "def check(candidate):\n    \n    assert candidate(254)==False\n    assert candidate(200)==False\n\ndef test_check():\n    check(is_woodall)\n\ntest_check()\n", "source_codes": ["\ndef is_woodall(x: int) -> bool:\n    if x < 1:\n        return False\n\n    n = 1\n    while True:\n        woodall_n = n * (2 ** n) - 1\n        if woodall_n == x:\n            return True\n        elif woodall_n > x:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))  # Should return True\nprint(is_woodall(23)) # Should return True\nprint(is_woodall(10)) # Should return False\n\n\n"], "responses": ["```python\ndef is_woodall(x: int) -> bool:\n    if x < 1:\n        return False\n\n    n = 1\n    while True:\n        woodall_n = n * (2 ** n) - 1\n        if woodall_n == x:\n            return True\n        elif woodall_n > x:\n            return False\n        n += 1\n\n# Example usage:\nprint(is_woodall(7))  # Should return True\nprint(is_woodall(23)) # Should return True\nprint(is_woodall(10)) # Should return False\n```"], "prompt_tokens": [625], "completion_tokens": [627], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_20_is_woodall"}
{"name": "mbpp_56_checks", "language": "Python3", "prompt": "def checks(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check if a given number is one less than twice its reverse.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "checks", "test": "def check(candidate):\n    \n    assert candidate(23)==False\n    assert candidate(73)==True\n\ndef test_check():\n    check(checks)\n\ntest_check()\n", "source_codes": ["\ndef checks(n: int) -> bool:\n    n_str = str(n)\n    reversed_n = int(n_str[::-1])\n    return n == 2 * reversed_n - 1\n\n# Example usage:\nprint(checks(12))  # Should return True\nprint(checks(13))  # Should return False\n\n\n"], "responses": ["```python\ndef checks(n: int) -> bool:\n    n_str = str(n)\n    reversed_n = int(n_str[::-1])\n    return n == 2 * reversed_n - 1\n\n# Example usage:\nprint(checks(12))  # Should return True\nprint(checks(13))  # Should return False\n```"], "prompt_tokens": [534], "completion_tokens": [480], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_56_checks"}
{"name": "mbpp_57_find_Max_Num", "language": "Python3", "prompt": "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the largest number that can be formed with the given list of digits.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Max_Num", "test": "def check(candidate):\n    \n    assert candidate([4, 5, 6, 1])==6541\n    assert candidate([1, 2, 3, 9])==9321\n\ndef test_check():\n    check(find_Max_Num)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    str_arr = map(str, arr)\n    str_arr_sorted = sorted(str_arr, reverse=True, key=lambda x: x*10)\n    largest_num_str = ''.join(str_arr_sorted)\n    largest_num = int(largest_num_str)\n    return largest_num\n\n# Example usage:\narr = [3, 34, 5, 9, 1]\nprint(find_Max_Num(arr))  # Output should be 953431\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    str_arr = map(str, arr)\n    str_arr_sorted = sorted(str_arr, reverse=True, key=lambda x: x*10)\n    largest_num_str = ''.join(str_arr_sorted)\n    largest_num = int(largest_num_str)\n    return largest_num\n\n# Example usage:\narr = [3, 34, 5, 9, 1]\nprint(find_Max_Num(arr))  # Output should be 953431\n```"], "prompt_tokens": [547], "completion_tokens": [514], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_57_find_Max_Num"}
{"name": "mbpp_58_opposite_Signs", "language": "Python3", "prompt": "def opposite_Signs(x: int, y: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given two integers have opposite sign or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_58_opposite_Signs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "opposite_Signs", "test": "def check(candidate):\n    \n    assert candidate(3, 2)==False\n    assert candidate(-10, -10)==False\n    assert candidate(-2, 2)==True\n\ndef test_check():\n    check(opposite_Signs)\n\ntest_check()\n", "source_codes": ["\ndef opposite_signs(x: int, y: int) -> bool:\n    return (x ^ y) < 0\n\n# Test cases\nprint(opposite_signs(10, -20))  # True\nprint(opposite_signs(-100, -200))  # False\nprint(opposite_signs(0, 0))  # False\nprint(opposite_signs(0, 1))  # False\nprint(opposite_signs(1, -1))  # True\n\n\n"], "responses": ["```python\ndef opposite_signs(x: int, y: int) -> bool:\n    return (x ^ y) < 0\n\n# Test cases\nprint(opposite_signs(10, -20))  # True\nprint(opposite_signs(-100, -200))  # False\nprint(opposite_signs(0, 0))  # False\nprint(opposite_signs(0, 1))  # False\nprint(opposite_signs(1, -1))  # True\n```"], "prompt_tokens": [489], "completion_tokens": [461], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_58_opposite_Signs"}
{"name": "mbpp_59_is_octagonal", "language": "Python3", "prompt": "def is_octagonal(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth octagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_59_is_octagonal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_octagonal", "test": "def check(candidate):\n    \n    assert candidate(10)==280\n    assert candidate(15)==645\n\ndef test_check():\n    check(is_octagonal)\n\ntest_check()\n", "source_codes": ["\ndef is_octagonal(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    return n * (3 * n - 2)\n\n# Example usage:\nnth_octagonal = is_octagonal(3)\nprint(nth_octagonal)\n\n\n"], "responses": ["```python\ndef is_octagonal(n: int) -> int:\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    return n * (3 * n - 2)\n\n# Example usage:\nnth_octagonal = is_octagonal(3)\nprint(nth_octagonal)\n```"], "prompt_tokens": [361], "completion_tokens": [311], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_59_is_octagonal"}
{"name": "mbpp_61_count_Substrings", "language": "Python3", "prompt": "def count_Substrings(s: str) -> int:\n    \"\"\"\n\tWrite a python function to count the number of substrings with the sum of digits equal to their length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Substrings", "test": "def check(candidate):\n    \n    assert candidate('111')==6\n    assert candidate('1101112')==12\n\ndef test_check():\n    check(count_Substrings)\n\ntest_check()\n", "source_codes": ["\ndef count_Substrings(s: str) -> int:\n    count = 0\n    \n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            sum_of_digits = sum(int(char) for char in substring if char.isdigit())\n            \n            if sum_of_digits == len(substring):\n                count += 1\n    \n    return count\n\n# Example usage:\nprint(count_Substrings(\"123\"))\n\n\n"], "responses": ["```python\ndef count_Substrings(s: str) -> int:\n    count = 0\n    \n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            sum_of_digits = sum(int(char) for char in substring if char.isdigit())\n            \n            if sum_of_digits == len(substring):\n                count += 1\n    \n    return count\n\n# Example usage:\nprint(count_Substrings(\"123\"))\n```"], "prompt_tokens": [523], "completion_tokens": [487], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_61_count_Substrings"}
{"name": "mbpp_62_smallest_num", "language": "Python3", "prompt": "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find smallest number in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_62_smallest_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "smallest_num", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3])==1\n    assert candidate([45, 46, 50, 60])==45\n\ndef test_check():\n    check(smallest_num)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    if not xs:\n        raise ValueError(\"The list is empty, cannot find the smallest number.\")\n    return min(xs)\n\n# Example usage:\nnumbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nprint(smallest_num(numbers))  # Output: 1\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    if not xs:\n        raise ValueError(\"The list is empty, cannot find the smallest number.\")\n    return min(xs)\n\n# Example usage:\nnumbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nprint(smallest_num(numbers))  # Output: 1\n```"], "prompt_tokens": [354], "completion_tokens": [324], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_62_smallest_num"}
{"name": "mbpp_63_max_difference", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum difference between available pairs in the given tuple list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_difference", "test": "def check(candidate):\n    \n    assert candidate([(4, 6), (2, 17), (9, 13), (11, 12)])==15\n    assert candidate([(12, 35), (21, 27), (13, 23), (41, 22)])==23\n\ndef test_check():\n    check(max_difference)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = float('-inf')\n    for pair in test_list:\n        diff = abs(pair[1] - pair[0])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n# Example usage:\ntest_list = [(2, 5), (1, 2), (4, 4), (9, 3)]\nprint(max_difference(test_list))  # Output should be 6\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    max_diff = float('-inf')\n    for pair in test_list:\n        diff = abs(pair[1] - pair[0])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n\n# Example usage:\ntest_list = [(2, 5), (1, 2), (4, 4), (9, 3)]\nprint(max_difference(test_list))  # Output should be 6\n```"], "prompt_tokens": [510], "completion_tokens": [477], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_63_max_difference"}
{"name": "mbpp_64_subject_marks", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    \"\"\"\n\tWrite a function to sort a list of tuples using the second value of each tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_64_subject_marks.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "subject_marks", "test": "def check(candidate):\n    \n    assert candidate([('Telugu', 49), ('Hindhi', 54), ('Social', 33)])==[('Social', 33), ('Telugu', 49), ('Hindhi', 54)]\n    assert candidate([('Physics', 96), ('Chemistry', 97), ('Biology', 45)])==[('Biology', 45), ('Physics', 96), ('Chemistry', 97)]\n\ndef test_check():\n    check(subject_marks)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subjectmarks\n\n# Example usage:\nmarks = [(\"Math\", 95), (\"Science\", 90), (\"English\", 88), (\"History\", 92)]\nsorted_marks = subject_marks(marks)\nprint(sorted_marks)\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    sorted_subjectmarks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_subjectmarks\n\n# Example usage:\nmarks = [(\"Math\", 95), (\"Science\", 90), (\"English\", 88), (\"History\", 92)]\nsorted_marks = subject_marks(marks)\nprint(sorted_marks)\n```"], "prompt_tokens": [520], "completion_tokens": [456], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_64_subject_marks"}
{"name": "mbpp_65_recursive_list_sum", "language": "Python3", "prompt": "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List[int]]]) -> int:\n    \"\"\"\n\tWrite a function to flatten a list and sum all of its elements.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_65_recursive_list_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "recursive_list_sum", "test": "def check(candidate):\n    \n    assert candidate([7, 10, [15, 14], [19, 41]])==106\n    assert candidate([10, 20, [30, 40], [50, 60]])==210\n\ndef test_check():\n    check(recursive_list_sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List[int]]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, int):\n            total += element\n        elif isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            raise ValueError(\"List must contain only integers or other lists.\")\n    return total\n\n# Example usage:\nprint(recursive_list_sum([1, 2, [3, 4], 5, [6, [7, 8]]]))  # Output should be 36\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List[int]]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, int):\n            total += element\n        elif isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            raise ValueError(\"List must contain only integers or other lists.\")\n    return total\n\n# Example usage:\nprint(recursive_list_sum([1, 2, [3, 4], 5, [6, [7, 8]]]))  # Output should be 36\n```"], "prompt_tokens": [538], "completion_tokens": [519], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_65_recursive_list_sum"}
{"name": "mbpp_66_pos_count", "language": "Python3", "prompt": "from typing import List\n\ndef pos_count(list: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to count the number of positive numbers in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_66_pos_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pos_count", "test": "def check(candidate):\n    \n    assert candidate([3, 4, 5, -1])==3\n    assert candidate([1, 2, 3, 4])==4\n\ndef test_check():\n    check(pos_count)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef pos_count(numbers: List[int]) -> int:\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count\n\n# Example usage:\nmy_list = [1, -2, 3, 4, -5, 6]\npositive_count = pos_count(my_list)\nprint(f\"The number of positive numbers is: {positive_count}\")\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef pos_count(numbers: List[int]) -> int:\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count\n\n# Example usage:\nmy_list = [1, -2, 3, 4, -5, 6]\npositive_count = pos_count(my_list)\nprint(f\"The number of positive numbers is: {positive_count}\")\n```"], "prompt_tokens": [393], "completion_tokens": [355], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_66_pos_count"}
{"name": "mbpp_67_bell_number", "language": "Python3", "prompt": "def bell_number(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the number of ways to partition a set of Bell numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_67_bell_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "bell_number", "test": "def check(candidate):\n    \n    assert candidate(10)==115975\n    assert candidate(56)==6775685320645824322581483068371419745979053216268760300\n\ndef test_check():\n    check(bell_number)\n\ntest_check()\n", "source_codes": ["\ndef bell_number(n: int) -> int:\n    if n < 0:\n        return 0\n\n    bell = [0] * (n + 1)\n    bell[0] = 1\n\n    for i in range(1, n + 1):\n        bell[i] = bell[i - 1] + bell[i - 1 - bell[i - 1]]\n        for j in range(i - 1, 0, -1):\n            bell[j - 1] = bell[j - 1] + bell[j]\n\n    return bell[n]\n\n# Example usage:\nprint(bell_number(5))  # Output: 52\n\n\n"], "responses": ["```python\ndef bell_number(n: int) -> int:\n    if n < 0:\n        return 0\n\n    bell = [0] * (n + 1)\n    bell[0] = 1\n\n    for i in range(1, n + 1):\n        bell[i] = bell[i - 1] + bell[i - 1 - bell[i - 1]]\n        for j in range(i - 1, 0, -1):\n            bell[j - 1] = bell[j - 1] + bell[j]\n\n    return bell[n]\n\n# Example usage:\nprint(bell_number(5))  # Output: 52\n```"], "prompt_tokens": [567], "completion_tokens": [584], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_67_bell_number"}
{"name": "mbpp_68_is_Monotonic", "language": "Python3", "prompt": "from typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given array is monotonic or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_68_is_Monotonic.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Monotonic", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 2, 3])==True\n    assert candidate([1, 3, 2])==False\n\ndef test_check():\n    check(is_Monotonic)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    increasing = decreasing = True\n\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_Monotonic(A: List[int]) -> bool:\n    increasing = decreasing = True\n\n    for i in range(1, len(A)):\n        if A[i] > A[i - 1]:\n            decreasing = False\n        elif A[i] < A[i - 1]:\n            increasing = False\n\n    return increasing or decreasing\n```"], "prompt_tokens": [526], "completion_tokens": [466], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_68_is_Monotonic"}
{"name": "mbpp_69_is_sublist", "language": "Python3", "prompt": "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check whether a list contains the given sublist or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_sublist", "test": "def check(candidate):\n    \n    assert candidate([2, 4, 3, 5, 7], [4, 3])==True\n    assert candidate([2, 4, 3, 5, 7], [1, 6])==False\n\ndef test_check():\n    check(is_sublist)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n```"], "prompt_tokens": [604], "completion_tokens": [542], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_69_is_sublist"}
{"name": "mbpp_70_get_equal", "language": "Python3", "prompt": "from typing import List\n\ndef get_equal(Input: List[List[int]]) -> bool:\n    \"\"\"\n\tWrite a function to find whether all the given lists have equal length or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_70_get_equal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_equal", "test": "def check(candidate):\n    \n    assert candidate([[1, 2, 3], [4, 5, 6, 7]])==False\n    assert candidate([[1, 2], [3, 4]])==True\n\ndef test_check():\n    check(get_equal)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef get_equal(input_lists: List[List[int]]) -> bool:\n    if not input_lists:\n        return True\n    \n    reference_length = len(input_lists[0])\n    \n    for lst in input_lists[1:]:\n        if len(lst) != reference_length:\n            return False\n    \n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef get_equal(input_lists: List[List[int]]) -> bool:\n    if not input_lists:\n        return True\n    \n    reference_length = len(input_lists[0])\n    \n    for lst in input_lists[1:]:\n        if len(lst) != reference_length:\n            return False\n    \n    return True\n```"], "prompt_tokens": [510], "completion_tokens": [442], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_70_get_equal"}
{"name": "mbpp_71_comb_sort", "language": "Python3", "prompt": "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a list of elements.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_71_comb_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "comb_sort", "test": "def check(candidate):\n    \n    assert candidate([41, 32, 15, 19, 22])==[15, 19, 22, 32, 41]\n    assert candidate([99, 15, 13, 47])==[13, 15, 47, 99]\n\ndef test_check():\n    check(comb_sort)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                sorted = False\n            i += 1\n\n    return nums\n```"], "prompt_tokens": [518], "completion_tokens": [524], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_71_comb_sort"}
{"name": "mbpp_72_dif_Square", "language": "Python3", "prompt": "def dif_Square(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given number can be represented as the difference of two squares or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_72_dif_Square.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "dif_Square", "test": "def check(candidate):\n    \n    assert candidate(10)==False\n    assert candidate(15)==True\n\ndef test_check():\n    check(dif_Square)\n\ntest_check()\n", "source_codes": ["\ndef dif_Square(n: int) -> bool:\n    if n % 2 == 0:\n        if n % 4 == 2:\n            return False\n        else:\n            return True\n    else:\n        return True\n\n# Test cases\nprint(dif_Square(1))  # True\nprint(dif_Square(2))  # False\nprint(dif_Square(3))  # True\nprint(dif_Square(4))  # True\nprint(dif_Square(5))  # True\nprint(dif_Square(6))  # False\n\n\n"], "responses": ["```python\ndef dif_Square(n: int) -> bool:\n    if n % 2 == 0:\n        if n % 4 == 2:\n            return False\n        else:\n            return True\n    else:\n        return True\n\n# Test cases\nprint(dif_Square(1))  # True\nprint(dif_Square(2))  # False\nprint(dif_Square(3))  # True\nprint(dif_Square(4))  # True\nprint(dif_Square(5))  # True\nprint(dif_Square(6))  # False\n```"], "prompt_tokens": [814], "completion_tokens": [806], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_72_dif_Square"}
{"name": "mbpp_74_is_samepatterns", "language": "Python3", "prompt": "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    \"\"\"\n\tWrite a function to check whether it follows the sequence given in the patterns array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_74_is_samepatterns.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_samepatterns", "test": "def check(candidate):\n    \n    assert candidate(['red', 'green', 'greenn'], ['a', 'b', 'b'])==False\n    assert candidate(['red', 'green', 'greenn'], ['a', 'b'])==False\n\ndef test_check():\n    check(is_samepatterns)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n\n    pattern_to_color = {}\n    for pattern, color in zip(patterns, colors):\n        if pattern not in pattern_to_color:\n            if color in pattern_to_color.values():\n                return False\n            pattern_to_color[pattern] = color\n        else:\n            if pattern_to_color[pattern] != color:\n                return False\n\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n\n    pattern_to_color = {}\n    for pattern, color in zip(patterns, colors):\n        if pattern not in pattern_to_color:\n            if color in pattern_to_color.values():\n                return False\n            pattern_to_color[pattern] = color\n        else:\n            if pattern_to_color[pattern] != color:\n                return False\n\n    return True\n```"], "prompt_tokens": [614], "completion_tokens": [579], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_74_is_samepatterns"}
{"name": "mbpp_75_find_tuples", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, int, int]], K: int) -> List[Tuple[int, int, int]]:\n    \"\"\"\n\tWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_tuples", "test": "def check(candidate):\n    \n    assert candidate([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5)==[(5, 25, 30)]\n    assert candidate([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4)==[(8, 16, 4)]\n\ndef test_check():\n    check(find_tuples)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, int, int]], K: int) -> List[Tuple[int, int, int]]:\n    result = []\n    for tup in test_list:\n        if all(element % K == 0 for element in tup):\n            result.append(tup)\n    return result\n\n# Example usage:\ntest_list = [(4, 8, 12), (3, 6, 9), (2, 4, 6), (5, 10, 15)]\nK = 2\nprint(find_tuples(test_list, K))  # Output: [(4, 8, 12), (2, 4, 6)]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, int, int]], K: int) -> List[Tuple[int, int, int]]:\n    result = []\n    for tup in test_list:\n        if all(element % K == 0 for element in tup):\n            result.append(tup)\n    return result\n\n# Example usage:\ntest_list = [(4, 8, 12), (3, 6, 9), (2, 4, 6), (5, 10, 15)]\nK = 2\nprint(find_tuples(test_list, K))  # Output: [(4, 8, 12), (2, 4, 6)]\n```"], "prompt_tokens": [553], "completion_tokens": [523], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_75_find_tuples"}
{"name": "mbpp_77_is_Diff", "language": "Python3", "prompt": "def is_Diff(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to find whether a number is divisible by 11.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_77_is_Diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Diff", "test": "def check(candidate):\n    \n    assert candidate(1212112)==True\n    assert candidate(1212)==False\n\ndef test_check():\n    check(is_Diff)\n\ntest_check()\n", "source_codes": ["\ndef is_Diff(n: int) -> bool:\n    num_str = str(n)\n    alt_sum = 0\n    for i, digit in enumerate(reversed(num_str)):\n        digit = int(digit)\n        if i % 2 == 0:\n            alt_sum += digit\n        else:\n            alt_sum -= digit\n    return alt_sum % 11 == 0\n\n# Example usage:\nprint(is_Diff(121))  # Output: True\nprint(is_Diff(123))  # Output: False\n\n\n"], "responses": ["```python\ndef is_Diff(n: int) -> bool:\n    num_str = str(n)\n    alt_sum = 0\n    for i, digit in enumerate(reversed(num_str)):\n        digit = int(digit)\n        if i % 2 == 0:\n            alt_sum += digit\n        else:\n            alt_sum -= digit\n    return alt_sum % 11 == 0\n\n# Example usage:\nprint(is_Diff(121))  # Output: True\nprint(is_Diff(123))  # Output: False\n```"], "prompt_tokens": [516], "completion_tokens": [507], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_77_is_Diff"}
{"name": "mbpp_79_word_len", "language": "Python3", "prompt": "def word_len(s: str) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the length of the word is odd or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_79_word_len.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "word_len", "test": "def check(candidate):\n    \n    assert candidate('great')==True\n    assert candidate('structure')==True\n\ndef test_check():\n    check(word_len)\n\ntest_check()\n", "source_codes": ["\ndef word_len(s: str) -> bool:\n    length_of_word = len(s)\n    is_odd = length_of_word % 2 == 1\n    return is_odd\n\n\n"], "responses": ["```python\ndef word_len(s: str) -> bool:\n    length_of_word = len(s)\n    is_odd = length_of_word % 2 == 1\n    return is_odd\n```"], "prompt_tokens": [407], "completion_tokens": [323], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_79_word_len"}
{"name": "mbpp_80_tetrahedral_number", "language": "Python3", "prompt": "def tetrahedral_number(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth tetrahedral number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_80_tetrahedral_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tetrahedral_number", "test": "def check(candidate):\n    \n    assert candidate(6)==56\n    assert candidate(7)==84\n\ndef test_check():\n    check(tetrahedral_number)\n\ntest_check()\n", "source_codes": ["\ndef tetrahedral_number(n: int) -> int:\n    return n * (n + 1) * (n + 2) // 6\n\n# Example usage:\nprint(tetrahedral_number(1))  # Output: 1\nprint(tetrahedral_number(2))  # Output: 4\nprint(tetrahedral_number(3))  # Output: 10\nprint(tetrahedral_number(4))  # Output: 20\n\n\n"], "responses": ["```python\ndef tetrahedral_number(n: int) -> int:\n    return n * (n + 1) * (n + 2) // 6\n\n# Example usage:\nprint(tetrahedral_number(1))  # Output: 1\nprint(tetrahedral_number(2))  # Output: 4\nprint(tetrahedral_number(3))  # Output: 10\nprint(tetrahedral_number(4))  # Output: 20\n```"], "prompt_tokens": [538], "completion_tokens": [524], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_80_tetrahedral_number"}
{"name": "mbpp_83_get_Char", "language": "Python3", "prompt": "def get_Char(strr: str) -> str:\n    \"\"\"\n\tWrite a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_83_get_Char.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_Char", "test": "def check(candidate):\n    \n    assert candidate('gfg')=='t'\n    assert candidate('ab')=='c'\n\ndef test_check():\n    check(get_Char)\n\ntest_check()\n", "source_codes": ["\ndef get_Char(strr: str) -> str:\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    modulo_result = ascii_sum % 26\n    char_result = chr(modulo_result + 65)\n    return char_result\n\n# Example usage:\nprint(get_Char(\"hello\"))\n\n\n"], "responses": ["```python\ndef get_Char(strr: str) -> str:\n    ascii_sum = 0\n    for char in strr:\n        ascii_sum += ord(char)\n    modulo_result = ascii_sum % 26\n    char_result = chr(modulo_result + 65)\n    return char_result\n\n# Example usage:\nprint(get_Char(\"hello\"))\n```"], "prompt_tokens": [552], "completion_tokens": [479], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_83_get_Char"}
{"name": "mbpp_84_sequence", "language": "Python3", "prompt": "def sequence(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth number in the newman conway sequence.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_84_sequence.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sequence", "test": "def check(candidate):\n    \n    assert candidate(2)==1\n    assert candidate(3)==2\n\ndef test_check():\n    check(sequence)\n\ntest_check()\n", "source_codes": ["\ndef sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    \n    seq = [0] * (n + 1)\n    seq[1], seq[2] = 1, 1\n    \n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    \n    return seq[n]\n\nprint(sequence(10))\n\n\n"], "responses": ["```python\ndef sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    \n    seq = [0] * (n + 1)\n    seq[1], seq[2] = 1, 1\n    \n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    \n    return seq[n]\n\nprint(sequence(10))\n```"], "prompt_tokens": [483], "completion_tokens": [468], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_84_sequence"}
{"name": "mbpp_86_centered_hexagonal_number", "language": "Python3", "prompt": "def centered_hexagonal_number(n: int) -> int:\n    \"\"\"\n\tWrite a function to find nth centered hexagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_86_centered_hexagonal_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "centered_hexagonal_number", "test": "def check(candidate):\n    \n    assert candidate(2)==7\n    assert candidate(9)==217\n\ndef test_check():\n    check(centered_hexagonal_number)\n\ntest_check()\n", "source_codes": ["\ndef centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1\n\n# Example usage:\nn = 5\nprint(f\"The {n}th centered hexagonal number is: {centered_hexagonal_number(n)}\")\n\n\n"], "responses": ["```python\ndef centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1\n\n# Example usage:\nn = 5\nprint(f\"The {n}th centered hexagonal number is: {centered_hexagonal_number(n)}\")\n```"], "prompt_tokens": [358], "completion_tokens": [305], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_86_centered_hexagonal_number"}
{"name": "mbpp_87_merge_dictionaries_three", "language": "Python3", "prompt": "from typing import Dict\n\ndef merge_dictionaries_three(dict1: Dict[str, str], dict2: Dict[str, str], dict3: Dict[str, str]) -> Dict[str, str]:\n    \"\"\"\n\tWrite a function to merge three dictionaries into a single dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_87_merge_dictionaries_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "merge_dictionaries_three", "test": "def check(candidate):\n    \n    assert candidate({ 'R': 'Red', 'B': 'Black', 'P': 'Pink' }, { 'G': 'Green', 'W': 'White' }, { 'L': 'lavender', 'B': 'Blue' })=={ 'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender' }\n    assert candidate({ 'R': 'Red', 'B': 'Black', 'P': 'Pink' }, { 'L': 'lavender', 'B': 'Blue' }, { 'G': 'Green', 'W': 'White' })=={ 'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White' }\n\ndef test_check():\n    check(merge_dictionaries_three)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Dict\n\ndef merge_dictionaries_three(dict1: Dict[str, str], dict2: Dict[str, str], dict3: Dict[str, str]) -> Dict[str, str]:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n\n# Example usage:\ndict1 = {'a': 'apple', 'b': 'banana'}\ndict2 = {'b': 'berry', 'c': 'cherry'}\ndict3 = {'d': 'date', 'e': 'elderberry'}\n\nmerged = merge_dictionaries_three(dict1, dict2, dict3)\nprint(merged)  # Output: {'a': 'apple', 'b': 'berry', 'c': 'cherry', 'd': 'date', 'e': 'elderberry'}\n\n\n"], "responses": ["```python\nfrom typing import Dict\n\ndef merge_dictionaries_three(dict1: Dict[str, str], dict2: Dict[str, str], dict3: Dict[str, str]) -> Dict[str, str]:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict\n\n# Example usage:\ndict1 = {'a': 'apple', 'b': 'banana'}\ndict2 = {'b': 'berry', 'c': 'cherry'}\ndict3 = {'d': 'date', 'e': 'elderberry'}\n\nmerged = merge_dictionaries_three(dict1, dict2, dict3)\nprint(merged)  # Output: {'a': 'apple', 'b': 'berry', 'c': 'cherry', 'd': 'date', 'e': 'elderberry'}\n```"], "prompt_tokens": [503], "completion_tokens": [500], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_87_merge_dictionaries_three"}
{"name": "mbpp_88_freq_count", "language": "Python3", "prompt": "from typing import List, Dict\n\ndef freq_count(list1: List[int]) -> Dict[int, int]:\n    \"\"\"\n\tWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_88_freq_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "freq_count", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4])=={ 1: 3, 2: 2, 3: 3, 4: 3 }\n    assert candidate([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5])=={ 10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2 }\n\ndef test_check():\n    check(freq_count)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Dict\n\ndef freq_count(list1: List[int]) -> Dict[int, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n\n\n"], "responses": ["```python\nfrom typing import List, Dict\n\ndef freq_count(list1: List[int]) -> Dict[int, int]:\n    frequency = {}\n    for item in list1:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency\n```"], "prompt_tokens": [512], "completion_tokens": [423], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_88_freq_count"}
{"name": "mbpp_89_closest_num", "language": "Python3", "prompt": "def closest_num(N: int) -> int:\n    \"\"\"\n\tWrite a function to find the closest smaller number than n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_89_closest_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "closest_num", "test": "def check(candidate):\n    \n    assert candidate(7)==6\n    assert candidate(12)==11\n\ndef test_check():\n    check(closest_num)\n\ntest_check()\n", "source_codes": ["\ndef closest_num(N: int) -> int:\n    return N - 1\n\n# Example usage:\nprint(closest_num(10))  # Output: 9\nprint(closest_num(0))   # Output: -1\n\n\n"], "responses": ["```python\ndef closest_num(N: int) -> int:\n    return N - 1\n\n# Example usage:\nprint(closest_num(10))  # Output: 9\nprint(closest_num(0))   # Output: -1\n```"], "prompt_tokens": [276], "completion_tokens": [214], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_89_closest_num"}
{"name": "mbpp_90_len_log", "language": "Python3", "prompt": "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    \"\"\"\n\tWrite a python function to find the length of the longest word.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_90_len_log.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "len_log", "test": "def check(candidate):\n    \n    assert candidate(['a', 'ab', 'abc'])==3\n    assert candidate(['small', 'big', 'tall'])==5\n\ndef test_check():\n    check(len_log)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef len_log(list1: List[str]) -> int:\n    max_length = 0\n    for word in list1:\n        word_length = len(word)\n        if word_length > max_length:\n            max_length = word_length\n    return max_length\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef len_log(list1: List[str]) -> int:\n    max_length = 0\n    for word in list1:\n        word_length = len(word)\n        if word_length > max_length:\n            max_length = word_length\n    return max_length\n```"], "prompt_tokens": [462], "completion_tokens": [393], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_90_len_log"}
{"name": "mbpp_91_find_substring", "language": "Python3", "prompt": "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    \"\"\"\n\tWrite a function to check if a string is present as a substring in a given list of string values.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_91_find_substring.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_substring", "test": "def check(candidate):\n    \n    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'abc')==False\n    assert candidate(['red', 'black', 'white', 'green', 'orange'], 'ange')==True\n\ndef test_check():\n    check(find_substring)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_substring(str_list: List[str], sub_str: str) -> bool:\n    for s in str_list:\n        if sub_str in s:\n            return True\n    return False\n\n# Example usage:\nstrings = [\"hello\", \"world\", \"python\", \"programming\"]\nsubstring = \"thon\"\nprint(find_substring(strings, substring))  # Output: True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_substring(str_list: List[str], sub_str: str) -> bool:\n    for s in str_list:\n        if sub_str in s:\n            return True\n    return False\n\n# Example usage:\nstrings = [\"hello\", \"world\", \"python\", \"programming\"]\nsubstring = \"thon\"\nprint(find_substring(strings, substring))  # Output: True\n```"], "prompt_tokens": [436], "completion_tokens": [363], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_91_find_substring"}
{"name": "mbpp_92_is_undulating", "language": "Python3", "prompt": "def is_undulating(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is undulating or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_92_is_undulating.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_undulating", "test": "def check(candidate):\n    \n    assert candidate(1991)==False\n    assert candidate(121)==True\n\ndef test_check():\n    check(is_undulating)\n\ntest_check()\n", "source_codes": ["\ndef is_undulating(n: int) -> bool:\n    num_str = str(n)\n    if len(num_str) < 3:\n        return False\n    if num_str[0] == num_str[1]:\n        return False\n    for i in range(2, len(num_str)):\n        if num_str[i] == num_str[i - 1]:\n            return False\n        if i % 2 == 0 and num_str[i] != num_str[0]:\n            return False\n        if i % 2 == 1 and num_str[i] != num_str[1]:\n            return False\n    return True\n\n# Example usage:\nprint(is_undulating(1212))  # Should return True\nprint(is_undulating(1221))  # Should return False\n\n\n"], "responses": ["```python\ndef is_undulating(n: int) -> bool:\n    num_str = str(n)\n    if len(num_str) < 3:\n        return False\n    if num_str[0] == num_str[1]:\n        return False\n    for i in range(2, len(num_str)):\n        if num_str[i] == num_str[i - 1]:\n            return False\n        if i % 2 == 0 and num_str[i] != num_str[0]:\n            return False\n        if i % 2 == 1 and num_str[i] != num_str[1]:\n            return False\n    return True\n\n# Example usage:\nprint(is_undulating(1212))  # Should return True\nprint(is_undulating(1221))  # Should return False\n```"], "prompt_tokens": [594], "completion_tokens": [639], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_92_is_undulating"}
{"name": "mbpp_93_power", "language": "Python3", "prompt": "def power(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the value of 'a' to the power 'b'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_93_power.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "power", "test": "def check(candidate):\n    \n    assert candidate(2, 3)==8\n    assert candidate(5, 5)==3125\n\ndef test_check():\n    check(power)\n\ntest_check()\n", "source_codes": ["\ndef power(a: int, b: int) -> int:\n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    elif b == 1:\n        return a\n    \n    result = 1\n    for _ in range(b):\n        result *= a\n    \n    return result\n\n\n"], "responses": ["```python\ndef power(a: int, b: int) -> int:\n    if b == 0:\n        return 1\n    elif a == 0:\n        return 0\n    elif b == 1:\n        return a\n    \n    result = 1\n    for _ in range(b):\n        result *= a\n    \n    return result\n```"], "prompt_tokens": [754], "completion_tokens": [697], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_93_power"}
{"name": "mbpp_94_index_minimum", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> str:\n    \"\"\"\n\tGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_94_index_minimum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "index_minimum", "test": "def check(candidate):\n    \n    assert candidate([('Yash', 185), ('Dawood', 125), ('Sanya', 175)])=='Dawood'\n    assert candidate([('Sai', 345), ('Salman', 145), ('Ayesha', 96)])=='Ayesha'\n\ndef test_check():\n    check(index_minimum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> str:\n    min_value = float('inf')\n    min_value_first = ''\n    for item in test_list:\n        if item[1] < min_value:\n            min_value = item[1]\n            min_value_first = item[0]\n    return min_value_first\n\n# Example usage:\ntest_list = [('a', 2), ('b', 1), ('c', 3)]\nprint(index_minimum(test_list))  # Output should be 'b'\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> str:\n    min_value = float('inf')\n    min_value_first = ''\n    for item in test_list:\n        if item[1] < min_value:\n            min_value = item[1]\n            min_value_first = item[0]\n    return min_value_first\n\n# Example usage:\ntest_list = [('a', 2), ('b', 1), ('c', 3)]\nprint(index_minimum(test_list))  # Output should be 'b'\n```"], "prompt_tokens": [538], "completion_tokens": [493], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_94_index_minimum"}
{"name": "mbpp_95_Find_Min_Length", "language": "Python3", "prompt": "from typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a python function to find the length of the smallest list in a list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_95_Find_Min_Length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Min_Length", "test": "def check(candidate):\n    \n    assert candidate([[1, 2], [1, 2, 3], [1, 2, 3, 4]])==2\n    assert candidate([[3, 3, 3], [4, 4, 4, 4]])==3\n\ndef test_check():\n    check(Find_Min_Length)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> int:\n    min_length = float('inf')\n    for sublist in lst:\n        sublist_length = len(sublist)\n        if sublist_length < min_length:\n            min_length = sublist_length\n    return min_length if min_length != float('inf') else 0\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nprint(Find_Min_Length(list_of_lists))  # Output should be 1\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Find_Min_Length(lst: List[List[int]]) -> int:\n    min_length = float('inf')\n    for sublist in lst:\n        sublist_length = len(sublist)\n        if sublist_length < min_length:\n            min_length = sublist_length\n    return min_length if min_length != float('inf') else 0\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nprint(Find_Min_Length(list_of_lists))  # Output should be 1\n```"], "prompt_tokens": [555], "completion_tokens": [542], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_95_Find_Min_Length"}
{"name": "mbpp_96_divisor", "language": "Python3", "prompt": "def divisor(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the number of divisors of a given integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "divisor", "test": "def check(candidate):\n    \n    assert candidate(12)==6\n    assert candidate(9)==3\n\ndef test_check():\n    check(divisor)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef divisor(n: int) -> int:\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n            if i * i == n:\n                count -= 1\n    return count\n\n# Example usage:\nprint(divisor(10))  # Output: 4\n\n\n"], "responses": ["```python\nimport math\n\ndef divisor(n: int) -> int:\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 2\n            if i * i == n:\n                count -= 1\n    return count\n\n# Example usage:\nprint(divisor(10))  # Output: 4\n```"], "prompt_tokens": [548], "completion_tokens": [516], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_96_divisor"}
{"name": "mbpp_97_frequency_lists", "language": "Python3", "prompt": "from typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    \"\"\"\n\tWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_97_frequency_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "frequency_lists", "test": "def check(candidate):\n    \n    assert candidate([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])=={ 1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1 }\n    assert candidate([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]])=={ 20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1 }\n\ndef test_check():\n    check(frequency_lists)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    frequency_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict\n\n# Example usage:\nlist_of_lists = [[1, 2, 2], [3, 2, 1], [4, 4, 5]]\nprint(frequency_lists(list_of_lists))  # Output: {1: 2, 2: 4, 3: 1, 4: 2, 5: 1}\n\n\n"], "responses": ["```python\nfrom typing import List, Dict\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    frequency_dict = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in frequency_dict:\n                frequency_dict[item] += 1\n            else:\n                frequency_dict[item] = 1\n    return frequency_dict\n\n# Example usage:\nlist_of_lists = [[1, 2, 2], [3, 2, 1], [4, 4, 5]]\nprint(frequency_lists(list_of_lists))  # Output: {1: 2, 2: 4, 3: 1, 4: 2, 5: 1}\n```"], "prompt_tokens": [519], "completion_tokens": [515], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_97_frequency_lists"}
{"name": "mbpp_99_decimal_to_binary", "language": "Python3", "prompt": "def decimal_to_binary(n: int) -> str:\n    \"\"\"\n\tWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_99_decimal_to_binary.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "decimal_to_binary", "test": "def check(candidate):\n    \n    assert candidate(18)=='10010'\n    assert candidate(7)=='111'\n\ndef test_check():\n    check(decimal_to_binary)\n\ntest_check()\n", "source_codes": ["\ndef decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    \n    binary_representation = ''\n    \n    while n > 0:\n        remainder = n % 2\n        binary_representation = str(remainder) + binary_representation\n        n = n // 2\n    \n    return binary_representation\n\n\n"], "responses": ["```python\ndef decimal_to_binary(n: int) -> str:\n    if n == 0:\n        return '0'\n    \n    binary_representation = ''\n    \n    while n > 0:\n        remainder = n % 2\n        binary_representation = str(remainder) + binary_representation\n        n = n // 2\n    \n    return binary_representation\n```"], "prompt_tokens": [490], "completion_tokens": [425], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_99_decimal_to_binary"}
{"name": "mbpp_100_next_smallest_palindrome", "language": "Python3", "prompt": "def next_smallest_palindrome(num: int) -> int:\n    \"\"\"\n\tWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "next_smallest_palindrome", "test": "def check(candidate):\n    \n    assert candidate(1221)==1331\n    assert candidate(120)==121\n\ndef test_check():\n    check(next_smallest_palindrome)\n\ntest_check()\n", "source_codes": ["\ndef next_smallest_palindrome(num: int) -> int:\n    num += 1\n    while True:\n        num_str = str(num)\n        half_len = len(num_str) // 2\n        if len(num_str) % 2 == 0:\n            first_half = num_str[:half_len]\n            second_half = first_half[::-1]\n        else:\n            first_half = num_str[:half_len]\n            second_half = first_half[::-1]\n            first_half += num_str[half_len]\n\n        palindrome = int(first_half + second_half)\n\n        if palindrome >= num:\n            return palindrome\n        else:\n            first_half = str(int(first_half) + 1)\n            num = int(first_half + first_half[::-1][:len(num_str) - len(first_half)])\n\nprint(next_smallest_palindrome(123))\nprint(next_smallest_palindrome(808))\nprint(next_smallest_palindrome(999))\n\n\n"], "responses": ["```python\ndef next_smallest_palindrome(num: int) -> int:\n    num += 1\n    while True:\n        num_str = str(num)\n        half_len = len(num_str) // 2\n        if len(num_str) % 2 == 0:\n            first_half = num_str[:half_len]\n            second_half = first_half[::-1]\n        else:\n            first_half = num_str[:half_len]\n            second_half = first_half[::-1]\n            first_half += num_str[half_len]\n\n        palindrome = int(first_half + second_half)\n\n        if palindrome >= num:\n            return palindrome\n        else:\n            first_half = str(int(first_half) + 1)\n            num = int(first_half + first_half[::-1][:len(num_str) - len(first_half)])\n\nprint(next_smallest_palindrome(123))\nprint(next_smallest_palindrome(808))\nprint(next_smallest_palindrome(999))\n```"], "prompt_tokens": [624], "completion_tokens": [683], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_100_next_smallest_palindrome"}
{"name": "mbpp_101_kth_element", "language": "Python3", "prompt": "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    \"\"\"\n\tWrite a function to find the kth element in the given array using 1-based indexing.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_101_kth_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "kth_element", "test": "def check(candidate):\n    \n    assert candidate([17, 24, 8, 23], 3)==8\n    assert candidate([16, 21, 25, 36, 4], 4)==36\n\ndef test_check():\n    check(kth_element)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    if k <= 0 or k > len(arr):\n        raise ValueError(\"k is out of the bounds of the array\")\n    \n    return arr[k - 1]\n\n# Example usage:\narr = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nk = 5\nprint(kth_element(arr, k))  # Output: 5\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    if k <= 0 or k > len(arr):\n        raise ValueError(\"k is out of the bounds of the array\")\n    \n    return arr[k - 1]\n\n# Example usage:\narr = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nk = 5\nprint(kth_element(arr, k))  # Output: 5\n```"], "prompt_tokens": [409], "completion_tokens": [377], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_101_kth_element"}
{"name": "mbpp_102_snake_to_camel", "language": "Python3", "prompt": "def snake_to_camel(word: str) -> str:\n    \"\"\"\n\tWrite a function to convert a snake case string to camel case string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "snake_to_camel", "test": "def check(candidate):\n    \n    assert candidate('python_language')=='PythonLanguage'\n    assert candidate('programming_language')=='ProgrammingLanguage'\n\ndef test_check():\n    check(snake_to_camel)\n\ntest_check()\n", "source_codes": ["\ndef snake_to_camel(word: str) -> str:\n    words = word.split('_')\n    camel_case_word = words[0] + ''.join(word.capitalize() for word in words[1:])\n    return camel_case_word\n\n# Test cases\nprint(snake_to_camel(\"this_is_a_test\"))  # Output: \"thisIsATest\"\nprint(snake_to_camel(\"snake_to_camel\"))  # Output: \"snakeToCamel\"\nprint(snake_to_camel(\"example_word\"))    # Output: \"exampleWord\"\n\n\n"], "responses": ["```python\ndef snake_to_camel(word: str) -> str:\n    words = word.split('_')\n    camel_case_word = words[0] + ''.join(word.capitalize() for word in words[1:])\n    return camel_case_word\n\n# Test cases\nprint(snake_to_camel(\"this_is_a_test\"))  # Output: \"thisIsATest\"\nprint(snake_to_camel(\"snake_to_camel\"))  # Output: \"snakeToCamel\"\nprint(snake_to_camel(\"example_word\"))    # Output: \"exampleWord\"\n```"], "prompt_tokens": [400], "completion_tokens": [394], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_102_snake_to_camel"}
{"name": "mbpp_103_eulerian_num", "language": "Python3", "prompt": "def eulerian_num(n: int, m: int) -> int:\n    \"\"\"\n\tWrite a function to find the Eulerian number a(n, m).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_103_eulerian_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "eulerian_num", "test": "def check(candidate):\n    \n    assert candidate(4, 1)==11\n    assert candidate(5, 3)==26\n\ndef test_check():\n    check(eulerian_num)\n\ntest_check()\n", "source_codes": ["\ndef eulerian_num(n: int, m: int) -> int:\n    # Initialize a table to store intermediate results\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Base cases\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        dp[i][0] = 1\n    \n    # Fill the table using the recursive formula\n    for i in range(1, n + 1):\n        for j in range(1, min(i, m + 1)):\n            dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n    \n    return dp[n][m]\n\n# Example usage:\nprint(eulerian_num(3, 1))  # Output should be 4\n\n\n"], "responses": ["```python\ndef eulerian_num(n: int, m: int) -> int:\n    # Initialize a table to store intermediate results\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    \n    # Base cases\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        dp[i][0] = 1\n    \n    # Fill the table using the recursive formula\n    for i in range(1, n + 1):\n        for j in range(1, min(i, m + 1)):\n            dp[i][j] = (i - j) * dp[i - 1][j - 1] + (j + 1) * dp[i - 1][j]\n    \n    return dp[n][m]\n\n# Example usage:\nprint(eulerian_num(3, 1))  # Output should be 4\n```"], "prompt_tokens": [711], "completion_tokens": [783], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_103_eulerian_num"}
{"name": "mbpp_104_sort_sublists", "language": "Python3", "prompt": "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_104_sort_sublists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_sublists", "test": "def check(candidate):\n    \n    assert candidate([[' red ', 'green'], ['blue ', ' black'], [' orange', 'brown']])==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    assert candidate([['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze']])==[['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]\n\n# Example usage:\n# input_list = [[\"banana\", \"apple\", \"cherry\"], [\"dog\", \"elephant\", \"cat\"]]\n# sorted_list = sort_sublists(input_list)\n# print(sorted_list)  # Output: [['apple', 'banana', 'cherry'], ['cat', 'dog', 'elephant']]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n\n# Example usage:\n# input_list = [[\"banana\", \"apple\", \"cherry\"], [\"dog\", \"elephant\", \"cat\"]]\n# sorted_list = sort_sublists(input_list)\n# print(sorted_list)  # Output: [['apple', 'banana', 'cherry'], ['cat', 'dog', 'elephant']]\n```\n\n```python\nfrom typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]\n\n# Example usage:\n# input_list = [[\"banana\", \"apple\", \"cherry\"], [\"dog\", \"elephant\", \"cat\"]]\n# sorted_list = sort_sublists(input_list)\n# print(sorted_list)  # Output: [['apple', 'banana', 'cherry'], ['cat', 'dog', 'elephant']]\n```"], "prompt_tokens": [535], "completion_tokens": [604], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_104_sort_sublists"}
{"name": "mbpp_105_count", "language": "Python3", "prompt": "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    \"\"\"\n\tWrite a python function to count true booleans in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_105_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count", "test": "def check(candidate):\n    \n    assert candidate([False, False])==0\n    assert candidate([True, True, True])==3\n\ndef test_check():\n    check(count)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)\n\n# Example usage:\nbool_list = [True, False, True, True, False]\nprint(count(bool_list))  # Output: 3\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)\n\n# Example usage:\nbool_list = [True, False, True, True, False]\nprint(count(bool_list))  # Output: 3\n```"], "prompt_tokens": [335], "completion_tokens": [259], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_105_count"}
{"name": "mbpp_106_add_lists", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef add_lists(test_list: List[int], test_tup: Tuple[int, int]) -> Tuple[int, int, int, int, int]:\n    \"\"\"\n\tWrite a function to append the given list to the given tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_106_add_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_lists", "test": "def check(candidate):\n    \n    assert candidate([6, 7, 8], (10, 11))==(10, 11, 6, 7, 8)\n    assert candidate([7, 8, 9], (11, 12))==(11, 12, 7, 8, 9)\n\ndef test_check():\n    check(add_lists)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef add_lists(test_list: List[int], test_tup: Tuple[int, int]) -> Tuple[int, int, int, int, int]:\n    result_list = list(test_tup)\n    result_list.extend(test_list)\n    result_tuple = tuple(result_list)\n    return result_tuple\n\n# Example usage:\nmy_list = [3, 4, 5]\nmy_tuple = (1, 2)\nprint(add_lists(my_list, my_tuple))  # Output: (1, 2, 3, 4, 5)\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef add_lists(test_list: List[int], test_tup: Tuple[int, int]) -> Tuple[int, int, int, int, int]:\n    result_list = list(test_tup)\n    result_list.extend(test_list)\n    result_tuple = tuple(result_list)\n    return result_tuple\n\n# Example usage:\nmy_list = [3, 4, 5]\nmy_tuple = (1, 2)\nprint(add_lists(my_list, my_tuple))  # Output: (1, 2, 3, 4, 5)\n```"], "prompt_tokens": [459], "completion_tokens": [411], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_106_add_lists"}
{"name": "mbpp_108_merge_sorted_list", "language": "Python3", "prompt": "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to merge three lists into a single sorted list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_108_merge_sorted_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "merge_sorted_list", "test": "def check(candidate):\n    \n    assert candidate([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    assert candidate([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n\ndef test_check():\n    check(merge_sorted_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\nimport heapq\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return list(heapq.merge(num1, num2, num3))\n\n# Example usage:\nnum1 = [1, 3, 5]\nnum2 = [2, 4, 6]\nnum3 = [0, 7, 8, 9]\nprint(merge_sorted_list(num1, num2, num3))  # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n"], "responses": ["```python\nfrom typing import List\nimport heapq\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return list(heapq.merge(num1, num2, num3))\n\n# Example usage:\nnum1 = [1, 3, 5]\nnum2 = [2, 4, 6]\nnum3 = [0, 7, 8, 9]\nprint(merge_sorted_list(num1, num2, num3))  # Output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```"], "prompt_tokens": [512], "completion_tokens": [497], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_108_merge_sorted_list"}
{"name": "mbpp_109_odd_Equivalent", "language": "Python3", "prompt": "def odd_Equivalent(s: str, n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_109_odd_Equivalent.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_Equivalent", "test": "def check(candidate):\n    \n    assert candidate('11011', 5)==4\n    assert candidate('1010', 4)==2\n\ndef test_check():\n    check(odd_Equivalent)\n\ntest_check()\n", "source_codes": ["\ndef odd_Equivalent(s: str, n: int) -> int:\n    original_number = int(s, 2)\n    length = len(s)\n    odd_count = 0\n    \n    for i in range(n):\n        rotated_number = (original_number >> 1) | ((original_number & 1) << (length - 1))\n        if rotated_number % 2 == 1:\n            odd_count += 1\n        original_number = rotated_number\n    \n    return odd_count\n\n# Example usage:\nprint(odd_Equivalent('1011', 4))\n\n\n"], "responses": ["```python\ndef odd_Equivalent(s: str, n: int) -> int:\n    original_number = int(s, 2)\n    length = len(s)\n    odd_count = 0\n    \n    for i in range(n):\n        rotated_number = (original_number >> 1) | ((original_number & 1) << (length - 1))\n        if rotated_number % 2 == 1:\n            odd_count += 1\n        original_number = rotated_number\n    \n    return odd_count\n\n# Example usage:\nprint(odd_Equivalent('1011', 4))\n```"], "prompt_tokens": [716], "completion_tokens": [686], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_109_odd_Equivalent"}
{"name": "mbpp_113_check_integer", "language": "Python3", "prompt": "def check_integer(text: str) -> bool:\n    \"\"\"\n\tWrite a function to check if a string represents an integer or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_113_check_integer.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_integer", "test": "def check(candidate):\n    \n    assert candidate('1')==True\n    assert candidate('12345')==True\n\ndef test_check():\n    check(check_integer)\n\ntest_check()\n", "source_codes": ["\ndef check_integer(text: str) -> bool:\n    text = text.strip()\n    if not text:\n        return False\n    if text[0] in '+-':\n        text = text[1:]\n    return text.isdigit()\n\n# Example usage:\nprint(check_integer(\"42\"))       # True\nprint(check_integer(\"-42\"))      # True\nprint(check_integer(\"   42  \"))  # True\nprint(check_integer(\"42.0\"))     # False\nprint(check_integer(\"abc\"))      # False\nprint(check_integer(\"\"))         # False\n\n\n"], "responses": ["```python\ndef check_integer(text: str) -> bool:\n    text = text.strip()\n    if not text:\n        return False\n    if text[0] in '+-':\n        text = text[1:]\n    return text.isdigit()\n\n# Example usage:\nprint(check_integer(\"42\"))       # True\nprint(check_integer(\"-42\"))      # True\nprint(check_integer(\"   42  \"))  # True\nprint(check_integer(\"42.0\"))     # False\nprint(check_integer(\"abc\"))      # False\nprint(check_integer(\"\"))         # False\n```"], "prompt_tokens": [454], "completion_tokens": [453], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_113_check_integer"}
{"name": "mbpp_116_tuple_to_int", "language": "Python3", "prompt": "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, int, int]) -> int:\n    \"\"\"\n\tWrite a function to convert a given tuple of positive integers into a single integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_116_tuple_to_int.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tuple_to_int", "test": "def check(candidate):\n    \n    assert candidate((4, 5, 6))==456\n    assert candidate((5, 6, 7))==567\n\ndef test_check():\n    check(tuple_to_int)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    concatenated_string = ''.join(str(num) for num in nums)\n    result = int(concatenated_string)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    concatenated_string = ''.join(str(num) for num in nums)\n    result = int(concatenated_string)\n    return result\n```"], "prompt_tokens": [393], "completion_tokens": [298], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_116_tuple_to_int"}
{"name": "mbpp_117_list_to_float", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef list_to_float(test_list: List[Tuple[str, str]]) -> List[Tuple[float, float]]:\n    \"\"\"\n\tWrite a function to convert all possible convertible elements in a list of lists to floats.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_117_list_to_float.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "list_to_float", "test": "def check(candidate):\n    \n    assert candidate([('4', '4'), ('2', '27'), ('4.12', '9'), ('7', '11')])==[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]\n    assert candidate([('6', '78'), ('5', '26.45'), ('1.33', '4'), ('82', '13')])==[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]\n\ndef test_check():\n    check(list_to_float)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef list_to_float(test_list: List[Tuple[str, str]]) -> List[Tuple[float, float]]:\n    converted_list = []\n    for tup in test_list:\n        try:\n            converted_tup = (float(tup[0]), float(tup[1]))\n            converted_list.append(converted_tup)\n        except ValueError:\n            pass\n    return converted_list\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef list_to_float(test_list: List[Tuple[str, str]]) -> List[Tuple[float, float]]:\n    converted_list = []\n    for tup in test_list:\n        try:\n            converted_tup = (float(tup[0]), float(tup[1]))\n            converted_list.append(converted_tup)\n        except ValueError:\n            pass\n    return converted_list\n```"], "prompt_tokens": [638], "completion_tokens": [562], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_117_list_to_float"}
{"name": "mbpp_118_string_to_list", "language": "Python3", "prompt": "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    \"\"\"\n\tWrite a function to convert a string to a list of strings split on the space character.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_118_string_to_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "string_to_list", "test": "def check(candidate):\n    \n    assert candidate('lists tuples strings')==['lists', 'tuples', 'strings']\n    assert candidate('write a program')==['write', 'a', 'program']\n\ndef test_check():\n    check(string_to_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split()\n\n# Example usage:\ninput_string = \"Hello world this is a test\"\noutput_list = string_to_list(input_string)\nprint(output_list)  # Output: ['Hello', 'world', 'this', 'is', 'a', 'test']\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split()\n\n# Example usage:\ninput_string = \"Hello world this is a test\"\noutput_list = string_to_list(input_string)\nprint(output_list)  # Output: ['Hello', 'world', 'this', 'is', 'a', 'test']\n```"], "prompt_tokens": [373], "completion_tokens": [308], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_118_string_to_list"}
{"name": "mbpp_119_search", "language": "Python3", "prompt": "from typing import List\n\ndef search(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the element that appears only once in a sorted array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_119_search.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "search", "test": "def check(candidate):\n    \n    assert candidate([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8])==8\n    assert candidate([1, 2, 2, 3, 3, 4, 4])==1\n\ndef test_check():\n    check(search)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        if mid % 2 == 1:\n            mid -= 1\n        \n        if arr[mid] != arr[mid + 1]:\n            right = mid\n        else:\n            left = mid + 2\n    \n    return arr[left]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = 0, len(arr) - 1\n    \n    while left < right:\n        mid = left + (right - left) // 2\n        \n        if mid % 2 == 1:\n            mid -= 1\n        \n        if arr[mid] != arr[mid + 1]:\n            right = mid\n        else:\n            left = mid + 2\n    \n    return arr[left]\n```"], "prompt_tokens": [724], "completion_tokens": [692], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_119_search"}
{"name": "mbpp_120_max_product_tuple", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_product_tuple", "test": "def check(candidate):\n    \n    assert candidate([(10, 20), (15, 2), (5, 10)])==200\n    assert candidate([(11, 44), (10, 15), (20, 5), (12, 9)])==484\n\ndef test_check():\n    check(max_product_tuple)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = float('-inf')\n    for pair in list1:\n        product = pair[0] * pair[1]\n        abs_product = abs(product)\n        if abs_product > max_product:\n            max_product = abs_product\n    return max_product\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = float('-inf')\n    for pair in list1:\n        product = pair[0] * pair[1]\n        abs_product = abs(product)\n        if abs_product > max_product:\n            max_product = abs_product\n    return max_product\n```"], "prompt_tokens": [559], "completion_tokens": [482], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_120_max_product_tuple"}
{"name": "mbpp_123_amicable_numbers_sum", "language": "Python3", "prompt": "def amicable_numbers_sum(limit: int) -> int:\n    \"\"\"\n\tWrite a function to sum all amicable numbers from 1 to a specified number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "amicable_numbers_sum", "test": "def check(candidate):\n    \n    assert candidate(9999)==31626\n    assert candidate(99)==0\n\ndef test_check():\n    check(amicable_numbers_sum)\n\ntest_check()\n", "source_codes": ["\ndef sum_of_divisors(n: int) -> int:\n    divisors_sum = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\n\ndef are_amicable(a: int, b: int) -> bool:\n    return sum_of_divisors(a) == b and sum_of_divisors(b) == a\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    for num in range(2, limit):\n        partner = sum_of_divisors(num)\n        if partner > num and are_amicable(num, partner):\n            amicable_sum += num + partner\n    return amicable_sum\n\n# Example usage:\nlimit = 10000\nprint(amicable_numbers_sum(limit))\n\n\n"], "responses": ["```python\ndef sum_of_divisors(n: int) -> int:\n    divisors_sum = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\n\ndef are_amicable(a: int, b: int) -> bool:\n    return sum_of_divisors(a) == b and sum_of_divisors(b) == a\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    for num in range(2, limit):\n        partner = sum_of_divisors(num)\n        if partner > num and are_amicable(num, partner):\n            amicable_sum += num + partner\n    return amicable_sum\n\n# Example usage:\nlimit = 10000\nprint(amicable_numbers_sum(limit))\n```"], "prompt_tokens": [559], "completion_tokens": [634], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_123_amicable_numbers_sum"}
{"name": "mbpp_125_find_length", "language": "Python3", "prompt": "def find_length(string: str) -> int:\n    \"\"\"\n\tWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_length", "test": "def check(candidate):\n    \n    assert candidate('10111')==1\n    assert candidate('11011101100101')==2\n\ndef test_check():\n    check(find_length)\n\ntest_check()\n", "source_codes": ["\ndef find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n\n    for char in string:\n        if char == '0':\n            current_diff -= 1\n        elif char == '1':\n            current_diff += 1\n\n        max_diff = max(max_diff, abs(current_diff))\n\n        if current_diff < 0:\n            current_diff = 0\n\n    return max_diff\n\n# Example usage:\nbinary_string = \"110100110\"\nprint(find_length(binary_string))  # Output should be the maximum difference\n\n\n"], "responses": ["```python\ndef find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n\n    for char in string:\n        if char == '0':\n            current_diff -= 1\n        elif char == '1':\n            current_diff += 1\n\n        max_diff = max(max_diff, abs(current_diff))\n\n        if current_diff < 0:\n            current_diff = 0\n\n    return max_diff\n\n# Example usage:\nbinary_string = \"110100110\"\nprint(find_length(binary_string))  # Output should be the maximum difference\n```"], "prompt_tokens": [633], "completion_tokens": [601], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_125_find_length"}
{"name": "mbpp_126_sum", "language": "Python3", "prompt": "def sum(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of common divisors of two given numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_126_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum", "test": "def check(candidate):\n    \n    assert candidate(100, 150)==93\n    assert candidate(4, 6)==3\n\ndef test_check():\n    check(sum)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef sum_common_divisors(a: int, b: int) -> int:\n    gcd_value = math.gcd(a, b)\n    return sum(i for i in range(1, gcd_value + 1) if gcd_value % i == 0)\n\n# Example usage:\na = 12\nb = 18\nprint(sum_common_divisors(a, b))  # This should print the sum of common divisors of 12 and 18\n\n\n"], "responses": ["```python\nimport math\n\ndef sum_common_divisors(a: int, b: int) -> int:\n    gcd_value = math.gcd(a, b)\n    return sum(i for i in range(1, gcd_value + 1) if gcd_value % i == 0)\n\n# Example usage:\na = 12\nb = 18\nprint(sum_common_divisors(a, b))  # This should print the sum of common divisors of 12 and 18\n```"], "prompt_tokens": [433], "completion_tokens": [403], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_126_sum"}
{"name": "mbpp_127_multiply_int", "language": "Python3", "prompt": "def multiply_int(x: int, y: int) -> int:\n    \"\"\"\n\tWrite a function to multiply two integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_127_multiply_int.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "multiply_int", "test": "def check(candidate):\n    \n    assert candidate(5, 10)==50\n    assert candidate(4, 8)==32\n\ndef test_check():\n    check(multiply_int)\n\ntest_check()\n", "source_codes": ["\ndef multiply_int(x: int, y: int) -> int:\n    return x * y\n\n\n"], "responses": ["```python\ndef multiply_int(x: int, y: int) -> int:\n    return x * y\n```"], "prompt_tokens": [329], "completion_tokens": [238], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_127_multiply_int"}
{"name": "mbpp_128_long_words", "language": "Python3", "prompt": "from typing import List\n\ndef long_words(n: int, str: str) -> List[str]:\n    \"\"\"\n\tWrite a function to find words that are longer than n characters from a given list of words.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "long_words", "test": "def check(candidate):\n    \n    assert candidate(2, 'writing a program')==['writing', 'program']\n    assert candidate(5, 'sorting list')==['sorting']\n\ndef test_check():\n    check(long_words)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef long_words(n: int, input_str: str) -> List[str]:\n    words = input_str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef long_words(n: int, input_str: str) -> List[str]:\n    words = input_str.split()\n    long_words_list = []\n    for word in words:\n        if len(word) > n:\n            long_words_list.append(word)\n    return long_words_list\n```"], "prompt_tokens": [497], "completion_tokens": [413], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_128_long_words"}
{"name": "mbpp_129_magic_square_test", "language": "Python3", "prompt": "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    \"\"\"\n\tWrite a function to calculate whether the matrix is a magic square.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_129_magic_square_test.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "magic_square_test", "test": "def check(candidate):\n    \n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\n    assert candidate([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False\n\ndef test_check():\n    check(magic_square_test)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if any(len(row) != n for row in my_matrix):\n        return False\n\n    flat_matrix = [num for row in my_matrix for num in row]\n    if len(flat_matrix) != len(set(flat_matrix)):\n        return False\n\n    magic_sum = sum(my_matrix[0])\n\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    if sum(my_matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if any(len(row) != n for row in my_matrix):\n        return False\n\n    flat_matrix = [num for row in my_matrix for num in row]\n    if len(flat_matrix) != len(set(flat_matrix)):\n        return False\n\n    magic_sum = sum(my_matrix[0])\n\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    for col in range(n):\n        if sum(my_matrix[row][col] for row in range(n)) != magic_sum:\n            return False\n\n    if sum(my_matrix[i][i] for i in range(n)) != magic_sum:\n        return False\n\n    if sum(my_matrix[i][n - 1 - i] for i in range(n)) != magic_sum:\n        return False\n\n    return True\n```"], "prompt_tokens": [678], "completion_tokens": [740], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_129_magic_square_test"}
{"name": "mbpp_130_max_occurrences", "language": "Python3", "prompt": "from typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the item with maximum frequency in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_130_max_occurrences.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_occurrences", "test": "def check(candidate):\n    \n    assert candidate([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18])==8\n    assert candidate([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10])==20\n\ndef test_check():\n    check(max_occurrences)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    frequency = Counter(nums)\n    max_freq = max(frequency.values())\n    max_freq_items = [item for item, freq in frequency.items() if freq == max_freq]\n    return max_freq_items[0] if max_freq_items else None\n\n\n"], "responses": ["```python\nfrom typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    frequency = Counter(nums)\n    max_freq = max(frequency.values())\n    max_freq_items = [item for item, freq in frequency.items() if freq == max_freq]\n    return max_freq_items[0] if max_freq_items else None\n```"], "prompt_tokens": [544], "completion_tokens": [486], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_130_max_occurrences"}
{"name": "mbpp_131_reverse_vowels", "language": "Python3", "prompt": "def reverse_vowels(str1: str) -> str:\n    \"\"\"\n\tWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_131_reverse_vowels.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "reverse_vowels", "test": "def check(candidate):\n    \n    assert candidate('USA')=='ASU'\n    assert candidate('ab')=='ab'\n\ndef test_check():\n    check(reverse_vowels)\n\ntest_check()\n", "source_codes": ["\ndef reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    vowel_positions = []\n    vowel_chars = []\n\n    for i, char in enumerate(str_list):\n        if char in vowels:\n            vowel_positions.append(i)\n            vowel_chars.append(char)\n\n    vowel_chars.reverse()\n\n    for position, char in zip(vowel_positions, vowel_chars):\n        str_list[position] = char\n\n    return ''.join(str_list)\n\n# Example usage:\nprint(reverse_vowels(\"hello world\"))  # Output: \"hollo werld\"\n\n\n"], "responses": ["```python\ndef reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    vowel_positions = []\n    vowel_chars = []\n\n    for i, char in enumerate(str_list):\n        if char in vowels:\n            vowel_positions.append(i)\n            vowel_chars.append(char)\n\n    vowel_chars.reverse()\n\n    for position, char in zip(vowel_positions, vowel_chars):\n        str_list[position] = char\n\n    return ''.join(str_list)\n\n# Example usage:\nprint(reverse_vowels(\"hello world\"))  # Output: \"hollo werld\"\n```"], "prompt_tokens": [496], "completion_tokens": [487], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_131_reverse_vowels"}
{"name": "mbpp_132_tup_string", "language": "Python3", "prompt": "from typing import List\n\ndef tup_string(tup1: List[str]) -> str:\n    \"\"\"\n\tWrite a function to convert a list to a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_132_tup_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tup_string", "test": "def check(candidate):\n    \n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'])=='python'\n    assert candidate(['p', 'r', 'o', 'g', 'r', 'a', 'm'])=='program'\n\ndef test_check():\n    check(tup_string)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef tup_string(tup1: List[str]) -> str:\n    return ''.join(tup1)\n\n# Example usage:\nmy_list = ['Hello', 'World', '!']\nresult = tup_string(my_list)\nprint(result)  # Output: HelloWorld!\n\ndef tup_string_with_space(tup1: List[str]) -> str:\n    return ' '.join(tup1)\n\n# Example usage with space:\nmy_list_with_space = ['Hello', 'World', '!']\nresult_with_space = tup_string_with_space(my_list_with_space)\nprint(result_with_space)  # Output: Hello World !\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef tup_string(tup1: List[str]) -> str:\n    return ''.join(tup1)\n\n# Example usage:\nmy_list = ['Hello', 'World', '!']\nresult = tup_string(my_list)\nprint(result)  # Output: HelloWorld!\n\ndef tup_string_with_space(tup1: List[str]) -> str:\n    return ' '.join(tup1)\n\n# Example usage with space:\nmy_list_with_space = ['Hello', 'World', '!']\nresult_with_space = tup_string_with_space(my_list_with_space)\nprint(result_with_space)  # Output: Hello World !\n```"], "prompt_tokens": [457], "completion_tokens": [457], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_132_tup_string"}
{"name": "mbpp_133_sum_negativenum", "language": "Python3", "prompt": "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a function to calculate the sum of the negative numbers of a given list of numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_133_sum_negativenum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_negativenum", "test": "def check(candidate):\n    \n    assert candidate([10, 15, -14, 13, -18, 12, -20])==-52\n    assert candidate([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])==-894\n\ndef test_check():\n    check(sum_negativenum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n\n# Example usage:\nnumbers = [1, -4, 12, 0, -3, 5, -1]\nprint(sum_negativenum(numbers))  # Output should be -8\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n\n# Example usage:\nnumbers = [1, -4, 12, 0, -3, 5, -1]\nprint(sum_negativenum(numbers))  # Output should be -8\n```"], "prompt_tokens": [437], "completion_tokens": [389], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_133_sum_negativenum"}
{"name": "mbpp_135_hexagonal_num", "language": "Python3", "prompt": "def hexagonal_num(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth hexagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "hexagonal_num", "test": "def check(candidate):\n    \n    assert candidate(5)==45\n    assert candidate(7)==91\n\ndef test_check():\n    check(hexagonal_num)\n\ntest_check()\n", "source_codes": ["\ndef hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)\n\n# Example usage:\nn = 5\nprint(f\"The {n}th hexagonal number is: {hexagonal_num(n)}\")\n\n\n"], "responses": ["```python\ndef hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)\n\n# Example usage:\nn = 5\nprint(f\"The {n}th hexagonal number is: {hexagonal_num(n)}\")\n```"], "prompt_tokens": [342], "completion_tokens": [282], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_135_hexagonal_num"}
{"name": "mbpp_138_is_Sum_Of_Powers_Of_Two", "language": "Python3", "prompt": "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_138_is_Sum_Of_Powers_Of_Two.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Sum_Of_Powers_Of_Two", "test": "def check(candidate):\n    \n    assert candidate(7)==False\n    assert candidate(14)==True\n\ndef test_check():\n    check(is_Sum_Of_Powers_Of_Two)\n\ntest_check()\n", "source_codes": ["\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n\n# Example usage:\nprint(is_Sum_Of_Powers_Of_Two(10))  # Output: True\nprint(is_Sum_Of_Powers_Of_Two(0))   # Output: False\nprint(is_Sum_Of_Powers_Of_Two(-1))  # Output: False\n\n\n"], "responses": ["```python\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n\n# Example usage:\nprint(is_Sum_Of_Powers_Of_Two(10))  # Output: True\nprint(is_Sum_Of_Powers_Of_Two(0))   # Output: False\nprint(is_Sum_Of_Powers_Of_Two(-1))  # Output: False\n```"], "prompt_tokens": [926], "completion_tokens": [877], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_138_is_Sum_Of_Powers_Of_Two"}
{"name": "mbpp_141_pancake_sort", "language": "Python3", "prompt": "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a list of elements.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_141_pancake_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pancake_sort", "test": "def check(candidate):\n    \n    assert candidate([98, 12, 54, 36, 85])==[12, 36, 54, 85, 98]\n    assert candidate([41, 42, 32, 12, 23])==[12, 23, 32, 41, 42]\n\ndef test_check():\n    check(pancake_sort)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    def flip(sublist: List[int], k: int):\n        sublist[:k] = sublist[:k][::-1]\n\n    def find_max_index(sublist: List[int], n: int) -> int:\n        return sublist.index(max(sublist[:n]))\n\n    n = len(nums)\n    while n > 1:\n        max_index = find_max_index(nums, n)\n        if max_index != n - 1:\n            if max_index != 0:\n                flip(nums, max_index + 1)\n            flip(nums, n)\n        n -= 1\n    return nums\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    def flip(sublist: List[int], k: int):\n        sublist[:k] = sublist[:k][::-1]\n\n    def find_max_index(sublist: List[int], n: int) -> int:\n        return sublist.index(max(sublist[:n]))\n\n    n = len(nums)\n    while n > 1:\n        max_index = find_max_index(nums, n)\n        if max_index != n - 1:\n            if max_index != 0:\n                flip(nums, max_index + 1)\n            flip(nums, n)\n        n -= 1\n    return nums\n```"], "prompt_tokens": [697], "completion_tokens": [714], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_141_pancake_sort"}
{"name": "mbpp_142_count_samepair", "language": "Python3", "prompt": "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    \"\"\"\n\tWrite a function to count number items that are identical in the same position of three given lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_142_count_samepair.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_samepair", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])==4\n    assert candidate([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])==5\n\ndef test_check():\n    check(count_samepair)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    count = 0\n    for item1, item2, item3 in zip(list1, list2, list3):\n        if item1 == item2 == item3:\n            count += 1\n    return count\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 4, 4, 5]\nlist3 = [1, 3, 3, 4, 5]\nprint(count_samepair(list1, list2, list3))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    count = 0\n    for item1, item2, item3 in zip(list1, list2, list3):\n        if item1 == item2 == item3:\n            count += 1\n    return count\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [1, 2, 4, 4, 5]\nlist3 = [1, 3, 3, 4, 5]\nprint(count_samepair(list1, list2, list3))\n```"], "prompt_tokens": [561], "completion_tokens": [545], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_142_count_samepair"}
{"name": "mbpp_143_find_lists", "language": "Python3", "prompt": "from typing import List, Any\n\ndef find_lists(Input: List[Any]) -> int:\n    \"\"\"\n\tWrite a function to find number of lists present in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_143_find_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_lists", "test": "def check(candidate):\n    \n    assert candidate([[1, 2], [3, 4], [5, 6]])==3\n    assert candidate([9, 8, 7, 6, 5, 4, 3, 2, 1])==1\n\ndef test_check():\n    check(find_lists)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef find_lists(Input: List[Any]) -> int:\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count\n\n# Example usage:\nexample_input = [1, [2, 3], [4, 5], 'hello', {'a': 1}, (6, 7), [[8], [9]]]\nnumber_of_lists = find_lists(example_input)\nprint(f\"Number of lists in the input: {number_of_lists}\")\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef find_lists(Input: List[Any]) -> int:\n    count = 0\n    for element in Input:\n        if isinstance(element, list):\n            count += 1\n    return count\n\n# Example usage:\nexample_input = [1, [2, 3], [4, 5], 'hello', {'a': 1}, (6, 7), [[8], [9]]]\nnumber_of_lists = find_lists(example_input)\nprint(f\"Number of lists in the input: {number_of_lists}\")\n```"], "prompt_tokens": [460], "completion_tokens": [444], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_143_find_lists"}
{"name": "mbpp_145_max_Abs_Diff", "language": "Python3", "prompt": "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the maximum difference between any two elements in a given array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_145_max_Abs_Diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_Abs_Diff", "test": "def check(candidate):\n    \n    assert candidate([9, 3, 2, 5, 1])==8\n    assert candidate([3, 2, 1])==2\n\ndef test_check():\n    check(max_Abs_Diff)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if len(arr) < 2:\n        return 0\n\n    min_val = arr[0]\n    max_val = arr[0]\n\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n\n    return max_val - min_val\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if len(arr) < 2:\n        return 0\n\n    min_val = arr[0]\n    max_val = arr[0]\n\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        elif num > max_val:\n            max_val = num\n\n    return max_val - min_val\n```"], "prompt_tokens": [485], "completion_tokens": [433], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_145_max_Abs_Diff"}
{"name": "mbpp_160_find_solution", "language": "Python3", "prompt": "from typing import Optional, Tuple\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    \"\"\"\n\tWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_160_find_solution.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_solution", "test": "def check(candidate):\n    \n    assert candidate(4, 2, 7)==None\n    assert candidate(1, 13, 17)==(4, 1)\n\ndef test_check():\n    check(find_solution)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Optional, Tuple\n\ndef extended_gcd(a: int, b: int) -> Tuple[int, int, int]:\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        gcd, x, y = extended_gcd(b % a, a)\n        return (gcd, y - (b // a) * x, x)\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    return (x, y)\n\n\n"], "responses": ["```python\nfrom typing import Optional, Tuple\n\ndef extended_gcd(a: int, b: int) -> Tuple[int, int, int]:\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        gcd, x, y = extended_gcd(b % a, a)\n        return (gcd, y - (b // a) * x, x)\n\ndef find_solution(a: int, b: int, n: int) -> Optional[Tuple[int, int]]:\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    return (x, y)\n```"], "prompt_tokens": [715], "completion_tokens": [684], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_160_find_solution"}
{"name": "mbpp_161_remove_elements", "language": "Python3", "prompt": "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to remove all elements from a given list present in another list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_161_remove_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_elements", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7])==[1, 2, 3, 4, 6, 8, 9, 10]\n\ndef test_check():\n    check(remove_elements)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    set2 = set(list2)\n    return [element for element in list1 if element not in set2]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    set2 = set(list2)\n    return [element for element in list1 if element not in set2]\n```"], "prompt_tokens": [631], "completion_tokens": [532], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_161_remove_elements"}
{"name": "mbpp_162_sum_series", "language": "Python3", "prompt": "def sum_series(n: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_162_sum_series.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_series", "test": "def check(candidate):\n    \n    assert candidate(10)==30\n    assert candidate(9)==25\n\ndef test_check():\n    check(sum_series)\n\ntest_check()\n", "source_codes": ["\ndef sum_series(n: int) -> int:\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum\n\n# Example usage:\nprint(sum_series(5))  # Output should be 9 (5 + 3 + 1)\nprint(sum_series(6))  # Output should be 12 (6 + 4 + 2 + 0)\n\n\n"], "responses": ["```python\ndef sum_series(n: int) -> int:\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum\n\n# Example usage:\nprint(sum_series(5))  # Output should be 9 (5 + 3 + 1)\nprint(sum_series(6))  # Output should be 12 (6 + 4 + 2 + 0)\n```"], "prompt_tokens": [499], "completion_tokens": [410], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_162_sum_series"}
{"name": "mbpp_164_are_equivalent", "language": "Python3", "prompt": "def are_equivalent(num1: int, num2: int) -> bool:\n    \"\"\"\n\tWrite a function to determine if the sum of the divisors of two integers are the same.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "are_equivalent", "test": "def check(candidate):\n    \n    assert candidate(2, 4)==False\n    assert candidate(23, 47)==True\n\ndef test_check():\n    check(are_equivalent)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef sum_of_divisors(num: int) -> int:\n    sum_divisors = 1\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            sum_divisors += i\n            if i != num // i:\n                sum_divisors += num // i\n    if num > 1:\n        sum_divisors += num\n    return sum_divisors\n\ndef are_equivalent(num1: int, num2: int) -> bool:\n    sum_num1 = sum_of_divisors(num1)\n    sum_num2 = sum_of_divisors(num2)\n    return sum_num1 == sum_num2\n\n\n"], "responses": ["```python\nimport math\n\ndef sum_of_divisors(num: int) -> int:\n    sum_divisors = 1\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            sum_divisors += i\n            if i != num // i:\n                sum_divisors += num // i\n    if num > 1:\n        sum_divisors += num\n    return sum_divisors\n\ndef are_equivalent(num1: int, num2: int) -> bool:\n    sum_num1 = sum_of_divisors(num1)\n    sum_num2 = sum_of_divisors(num2)\n    return sum_num1 == sum_num2\n```"], "prompt_tokens": [707], "completion_tokens": [712], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_164_are_equivalent"}
{"name": "mbpp_165_count_char_position", "language": "Python3", "prompt": "def count_char_position(str1: str) -> int:\n    \"\"\"\n\tWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_165_count_char_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_char_position", "test": "def check(candidate):\n    \n    assert candidate('ABcED')==3\n    assert candidate('AbgdeF')==5\n\ndef test_check():\n    check(count_char_position)\n\ntest_check()\n", "source_codes": ["\ndef count_char_position(str1: str) -> int:\n    count = 0\n    str1 = str1.lower()\n    for i, char in enumerate(str1):\n        if char.isalpha():\n            position = ord(char) - ord('a')\n            if position == i:\n                count += 1\n    return count\n\n# Example usage:\nprint(count_char_position(\"Abcdefghijklmnopqrstuvwxyz\"))  # Should return 26\nprint(count_char_position(\"The quick brown fox jumps over the lazy dog\"))  # Should return 1 (for 'v')\n\n\n"], "responses": ["```python\ndef count_char_position(str1: str) -> int:\n    count = 0\n    str1 = str1.lower()\n    for i, char in enumerate(str1):\n        if char.isalpha():\n            position = ord(char) - ord('a')\n            if position == i:\n                count += 1\n    return count\n\n# Example usage:\nprint(count_char_position(\"Abcdefghijklmnopqrstuvwxyz\"))  # Should return 26\nprint(count_char_position(\"The quick brown fox jumps over the lazy dog\"))  # Should return 1 (for 'v')\n```"], "prompt_tokens": [633], "completion_tokens": [601], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_165_count_char_position"}
{"name": "mbpp_166_find_even_pair", "language": "Python3", "prompt": "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    \"\"\"\n\tWrite a function that counts the number of pairs of integers in a list that xor to an even number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_166_find_even_pair.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_even_pair", "test": "def check(candidate):\n    \n    assert candidate([7, 2, 8, 1, 0, 5, 11])==9\n    assert candidate([1, 2, 3])==1\n\ndef test_check():\n    check(find_even_pair)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    even_count = 0\n    odd_count = 0\n    \n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    even_pairs = even_count * (even_count - 1) // 2\n    odd_pairs = odd_count * (odd_count - 1) // 2\n    \n    total_pairs = even_pairs + odd_pairs\n    \n    return total_pairs\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    even_count = 0\n    odd_count = 0\n    \n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    \n    even_pairs = even_count * (even_count - 1) // 2\n    odd_pairs = odd_count * (odd_count - 1) // 2\n    \n    total_pairs = even_pairs + odd_pairs\n    \n    return total_pairs\n```"], "prompt_tokens": [590], "completion_tokens": [562], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_166_find_even_pair"}
{"name": "mbpp_167_next_power_of_2", "language": "Python3", "prompt": "def next_power_of_2(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the smallest power of 2 greater than or equal to n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_167_next_power_of_2.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "next_power_of_2", "test": "def check(candidate):\n    \n    assert candidate(5)==8\n    assert candidate(17)==32\n\ndef test_check():\n    check(next_power_of_2)\n\ntest_check()\n", "source_codes": ["\ndef next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    if (n & (n - 1)) == 0:\n        return n\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n\n\n"], "responses": ["```python\ndef next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    if (n & (n - 1)) == 0:\n        return n\n    power = 1\n    while power < n:\n        power *= 2\n    return power\n```"], "prompt_tokens": [510], "completion_tokens": [445], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_167_next_power_of_2"}
{"name": "mbpp_168_frequency", "language": "Python3", "prompt": "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to count the number of occurrences of a number in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_168_frequency.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "frequency", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 2, 3, 3, 3, 4], 3)==3\n    assert candidate([0, 1, 2, 3, 1, 2], 1)==2\n\ndef test_check():\n    check(frequency)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)\n```"], "prompt_tokens": [367], "completion_tokens": [253], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_168_frequency"}
{"name": "mbpp_170_sum_range_list", "language": "Python3", "prompt": "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    \"\"\"\n\tWrite a function to find the sum of numbers in a list within a range specified by two indices.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_170_sum_range_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_range_list", "test": "def check(candidate):\n    \n    assert candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7)==16\n    assert candidate([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10)==38\n\ndef test_check():\n    check(sum_range_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    if m < 0 or n >= len(list1) or m > n:\n        raise ValueError(\"Invalid indices. Please ensure 0 <= m <= n < len(list1).\")\n    \n    sum_of_sublist = sum(list1[m:n+1])\n    \n    return sum_of_sublist\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nm = 2  # Start index\nn = 5  # End index\nprint(sum_range_list(my_list, m, n))  # Output should be 18\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    if m < 0 or n >= len(list1) or m > n:\n        raise ValueError(\"Invalid indices. Please ensure 0 <= m <= n < len(list1).\")\n    \n    sum_of_sublist = sum(list1[m:n+1])\n    \n    return sum_of_sublist\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nm = 2  # Start index\nn = 5  # End index\nprint(sum_range_list(my_list, m, n))  # Output should be 18\n```"], "prompt_tokens": [536], "completion_tokens": [539], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_170_sum_range_list"}
{"name": "mbpp_171_perimeter_pentagon", "language": "Python3", "prompt": "def perimeter_pentagon(a: int) -> int:\n    \"\"\"\n\tWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_171_perimeter_pentagon.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "perimeter_pentagon", "test": "def check(candidate):\n    \n    assert candidate(10)==50\n    assert candidate(15)==75\n\ndef test_check():\n    check(perimeter_pentagon)\n\ntest_check()\n", "source_codes": ["\ndef perimeter_pentagon(a: int) -> int:\n    return 5 * a\n\n\n"], "responses": ["```python\ndef perimeter_pentagon(a: int) -> int:\n    return 5 * a\n```"], "prompt_tokens": [430], "completion_tokens": [320], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_171_perimeter_pentagon"}
{"name": "mbpp_172_count_occurance", "language": "Python3", "prompt": "def count_occurance(s: str) -> int:\n    \"\"\"\n\tWrite a function to count the number of occurence of the string 'std' in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_172_count_occurance.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_occurance", "test": "def check(candidate):\n    \n    assert candidate('truststdsolensporsd')==1\n    assert candidate('makestdsostdworthit')==2\n    assert candidate('stds')==1\n    assert candidate('')==0\n\ndef test_check():\n    check(count_occurance)\n\ntest_check()\n", "source_codes": ["\ndef count_occurrence(s: str) -> int:\n    return s.count('std')\n\n# Test cases\nprint(count_occurrence(\"std\"))  # Should return 1\nprint(count_occurrence(\"stdstdstd\"))  # Should return 3\nprint(count_occurrence(\"standard\"))  # Should return 1\nprint(count_occurrence(\"no occurrences here\"))  # Should return 0\n\ndef count_occurrence_case_insensitive(s: str) -> int:\n    return s.lower().count('std')\n\n# Test cases for case-insensitive function\nprint(count_occurrence_case_insensitive(\"sTdStD\"))  # Should return 2\nprint(count_occurrence_case_insensitive(\"STDstdSTd\"))  # Should return 3\nprint(count_occurrence_case_insensitive(\"Standard\"))  # Should return 1\nprint(count_occurrence_case_insensitive(\"No Occurrences Here\"))  # Should return 0\n\n\n"], "responses": ["```python\ndef count_occurrence(s: str) -> int:\n    return s.count('std')\n\n# Test cases\nprint(count_occurrence(\"std\"))  # Should return 1\nprint(count_occurrence(\"stdstdstd\"))  # Should return 3\nprint(count_occurrence(\"standard\"))  # Should return 1\nprint(count_occurrence(\"no occurrences here\"))  # Should return 0\n\ndef count_occurrence_case_insensitive(s: str) -> int:\n    return s.lower().count('std')\n\n# Test cases for case-insensitive function\nprint(count_occurrence_case_insensitive(\"sTdStD\"))  # Should return 2\nprint(count_occurrence_case_insensitive(\"STDstdSTd\"))  # Should return 3\nprint(count_occurrence_case_insensitive(\"Standard\"))  # Should return 1\nprint(count_occurrence_case_insensitive(\"No Occurrences Here\"))  # Should return 0\n```"], "prompt_tokens": [488], "completion_tokens": [546], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_172_count_occurance"}
{"name": "mbpp_222_check_type", "language": "Python3", "prompt": "from typing import Any\n\ndef check_type(test_tuple: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if all the elements in tuple have same data type or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_type", "test": "def check(candidate):\n    \n    assert candidate((1, 2, '4'))==False\n    assert candidate((3, 2, 1, 4, 5))==True\n\ndef test_check():\n    check(check_type)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Any, Tuple\n\ndef check_type(test_tuple: Tuple[Any, ...]) -> bool:\n    if not test_tuple:\n        return True\n    \n    first_type = type(test_tuple[0])\n    \n    for element in test_tuple:\n        if type(element) != first_type:\n            return False\n    \n    return True\n\n\n"], "responses": ["```python\nfrom typing import Any, Tuple\n\ndef check_type(test_tuple: Tuple[Any, ...]) -> bool:\n    if not test_tuple:\n        return True\n    \n    first_type = type(test_tuple[0])\n    \n    for element in test_tuple:\n        if type(element) != first_type:\n            return False\n    \n    return True\n```"], "prompt_tokens": [482], "completion_tokens": [413], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_222_check_type"}
{"name": "mbpp_223_is_majority", "language": "Python3", "prompt": "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n\tWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_majority", "test": "def check(candidate):\n    \n    assert candidate([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)==False\n    assert candidate([1, 1, 1, 2, 2], 5, 1)==True\n    assert candidate([1, 1, 2, 2], 5, 1)==False\n\ndef test_check():\n    check(is_majority)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef binary_search(arr: List[int], n: int, x: int, search_first: bool) -> int:\n    low, high = 0, n - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            if search_first:\n                high = mid - 1\n            else:\n                low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    first_index = binary_search(arr, n, x, True)\n    if first_index == -1:\n        return False\n\n    last_index = binary_search(arr, n, x, False)\n    count = last_index - first_index + 1\n    return count > n // 2\n\n# Example usage:\narr = [1, 2, 3, 3, 3, 3, 4, 4]\nn = len(arr)\nx = 3\nprint(is_majority(arr, n, x))  # Output: True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef binary_search(arr: List[int], n: int, x: int, search_first: bool) -> int:\n    low, high = 0, n - 1\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            if search_first:\n                high = mid - 1\n            else:\n                low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    first_index = binary_search(arr, n, x, True)\n    if first_index == -1:\n        return False\n\n    last_index = binary_search(arr, n, x, False)\n    count = last_index - first_index + 1\n    return count > n // 2\n\n# Example usage:\narr = [1, 2, 3, 3, 3, 3, 4, 4]\nn = len(arr)\nx = 3\nprint(is_majority(arr, n, x))  # Output: True\n```"], "prompt_tokens": [766], "completion_tokens": [822], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_223_is_majority"}
{"name": "mbpp_224_count_Set_Bits", "language": "Python3", "prompt": "def count_Set_Bits(n: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_224_count_Set_Bits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Set_Bits", "test": "def check(candidate):\n    \n    assert candidate(4)==1\n    assert candidate(6)==2\n\ndef test_check():\n    check(count_Set_Bits)\n\ntest_check()\n", "source_codes": ["\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n# Example usage:\nnumber = 29\nprint(count_set_bits(number))  # Output should be 4\n\n\n"], "responses": ["```python\ndef count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n\n# Example usage:\nnumber = 29\nprint(count_set_bits(number))  # Output should be 4\n```"], "prompt_tokens": [455], "completion_tokens": [378], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_224_count_Set_Bits"}
{"name": "mbpp_226_odd_values_string", "language": "Python3", "prompt": "def odd_values_string(str: str) -> str:\n    \"\"\"\n\tWrite a python function to remove the characters which have odd index values of a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_226_odd_values_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_values_string", "test": "def check(candidate):\n    \n    assert candidate('python')=='pto'\n    assert candidate('data')=='dt'\n    assert candidate('lambs')=='lms'\n\ndef test_check():\n    check(odd_values_string)\n\ntest_check()\n", "source_codes": ["\ndef odd_values_string(str):\n    result = \"\"\n    for index, char in enumerate(str):\n        if index % 2 == 0:\n            result += char\n    return result\n\n# Example usage:\nprint(odd_values_string(\"Hello World\"))  # Output: \"HloWrd\"\n\n\n"], "responses": ["```python\ndef odd_values_string(str):\n    result = \"\"\n    for index, char in enumerate(str):\n        if index % 2 == 0:\n            result += char\n    return result\n\n# Example usage:\nprint(odd_values_string(\"Hello World\"))  # Output: \"HloWrd\"\n```"], "prompt_tokens": [437], "completion_tokens": [373], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_226_odd_values_string"}
{"name": "mbpp_227_min_of_three", "language": "Python3", "prompt": "def min_of_three(a: int, b: int, c: int) -> int:\n    \"\"\"\n\tWrite a function to find minimum of three numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_227_min_of_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_of_three", "test": "def check(candidate):\n    \n    assert candidate(19, 15, 18)==15\n    assert candidate(-10, -20, -30)==-30\n\ndef test_check():\n    check(min_of_three)\n\ntest_check()\n", "source_codes": ["\ndef min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)\n\n# Example usage:\nprint(min_of_three(10, 20, 30))  # Output: 10\nprint(min_of_three(25, 15, 30))  # Output: 15\nprint(min_of_three(100, 200, 50)) # Output: 50\n\n\n"], "responses": ["```python\ndef min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)\n\n# Example usage:\nprint(min_of_three(10, 20, 30))  # Output: 10\nprint(min_of_three(25, 15, 30))  # Output: 15\nprint(min_of_three(100, 200, 50)) # Output: 50\n```"], "prompt_tokens": [595], "completion_tokens": [561], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_227_min_of_three"}
{"name": "mbpp_228_all_Bits_Set_In_The_Given_Range", "language": "Python3", "prompt": "def all_Bits_Set_In_The_Given_Range(n: int, l: int, r: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether all the bits are unset in the given range or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_228_all_Bits_Set_In_The_Given_Range.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "all_Bits_Set_In_The_Given_Range", "test": "def check(candidate):\n    \n    assert candidate(17, 2, 4)==True\n    assert candidate(39, 4, 6)==False\n\ndef test_check():\n    check(all_Bits_Set_In_The_Given_Range)\n\ntest_check()\n", "source_codes": ["\ndef all_bits_set_in_the_given_range(n: int, l: int, r: int) -> bool:\n    mask = (1 << (r - l + 1)) - 1\n    mask = mask << (l - 1)\n    result = n & mask\n    return result == mask\n\n\n"], "responses": ["```python\ndef all_bits_set_in_the_given_range(n: int, l: int, r: int) -> bool:\n    mask = (1 << (r - l + 1)) - 1\n    mask = mask << (l - 1)\n    result = n & mask\n    return result == mask\n```"], "prompt_tokens": [595], "completion_tokens": [501], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_228_all_Bits_Set_In_The_Given_Range"}
{"name": "mbpp_229_re_arrange_array", "language": "Python3", "prompt": "from typing import List\n\ndef re_arrange_array(arr: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_229_re_arrange_array.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "re_arrange_array", "test": "def check(candidate):\n    \n    assert candidate([12, -14, -26, 13, 15], 5)==[-14, -26, 12, 13, 15]\n    assert candidate([10, 24, 36, -42, -39, -78, 85], 7)==[-42, -39, -78, 10, 24, 36, 85]\n\ndef test_check():\n    check(re_arrange_array)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef re_arrange_array(arr: List[int], n: int) -> List[int]:\n    negatives = []\n    positives = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    arr[:len(negatives)] = negatives\n    arr[len(negatives):n] = positives\n    \n    return arr\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef re_arrange_array(arr: List[int], n: int) -> List[int]:\n    negatives = []\n    positives = []\n    \n    for i in range(n):\n        if arr[i] < 0:\n            negatives.append(arr[i])\n        else:\n            positives.append(arr[i])\n    \n    arr[:len(negatives)] = negatives\n    arr[len(negatives):n] = positives\n    \n    return arr\n```"], "prompt_tokens": [566], "completion_tokens": [446], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_229_re_arrange_array"}
{"name": "mbpp_230_replace_blank", "language": "Python3", "prompt": "def replace_blank(str1: str, char: str) -> str:\n    \"\"\"\n\tWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_230_replace_blank.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_blank", "test": "def check(candidate):\n    \n    assert candidate('python program language', '$')=='python$program$language'\n    assert candidate('blank space', '-')=='blank-space'\n\ndef test_check():\n    check(replace_blank)\n\ntest_check()\n", "source_codes": ["\ndef replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)\n\n# Example usage:\nresult = replace_blank(\"Hello World\", \"-\")\nprint(result)  # Output: \"Hello-World\"\n\n\n"], "responses": ["```python\ndef replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)\n\n# Example usage:\nresult = replace_blank(\"Hello World\", \"-\")\nprint(result)  # Output: \"Hello-World\"\n```"], "prompt_tokens": [348], "completion_tokens": [249], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_230_replace_blank"}
{"name": "mbpp_234_volume_cube", "language": "Python3", "prompt": "def volume_cube(l: int) -> int:\n    \"\"\"\n\tWrite a function to find the volume of a cube given its side length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_234_volume_cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "volume_cube", "test": "def check(candidate):\n    \n    assert candidate(2)==8\n    assert candidate(5)==125\n\ndef test_check():\n    check(volume_cube)\n\ntest_check()\n", "source_codes": ["\ndef volume_cube(l: int) -> int:\n    return l ** 3\n\n\n"], "responses": ["```python\ndef volume_cube(l: int) -> int:\n    return l ** 3\n```"], "prompt_tokens": [288], "completion_tokens": [188], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_234_volume_cube"}
{"name": "mbpp_237_check_occurences", "language": "Python3", "prompt": "from typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    \"\"\"\n\tWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_237_check_occurences.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_occurences", "test": "def check(candidate):\n    \n    assert candidate([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)])=={ (2, 4): 2, (3, 6): 2, (4, 7): 1 }\n    assert candidate([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)])=={ (2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1 }\n\ndef test_check():\n    check(check_occurences)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    occurences = {}\n    for item in test_list:\n        if item in occurences:\n            occurences[item] += 1\n        else:\n            occurences[item] = 1\n    return occurences\n\n# Example usage:\ntest_list = [(1, 2), (3, 4), (1, 2), (5, 6), (3, 4), (3, 4)]\nresult = check_occurences(test_list)\nprint(result)  # Output: {(1, 2): 2, (3, 4): 3, (5, 6): 1}\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple, Dict\n\ndef check_occurences(test_list: List[Tuple[int, int]]) -> Dict[Tuple[int, int], int]:\n    occurences = {}\n    for item in test_list:\n        if item in occurences:\n            occurences[item] += 1\n        else:\n            occurences[item] = 1\n    return occurences\n\n# Example usage:\ntest_list = [(1, 2), (3, 4), (1, 2), (5, 6), (3, 4), (3, 4)]\nresult = check_occurences(test_list)\nprint(result)  # Output: {(1, 2): 2, (3, 4): 3, (5, 6): 1}\n```"], "prompt_tokens": [596], "completion_tokens": [573], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_237_check_occurences"}
{"name": "mbpp_238_number_of_substrings", "language": "Python3", "prompt": "def number_of_substrings(str: str) -> int:\n    \"\"\"\n\tWrite a python function to count the number of non-empty substrings of a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_238_number_of_substrings.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "number_of_substrings", "test": "def check(candidate):\n    \n    assert candidate('abcd')==10\n    assert candidate('abcde')==15\n\ndef test_check():\n    check(number_of_substrings)\n\ntest_check()\n", "source_codes": ["\ndef number_of_substrings(str: str) -> int:\n    n = len(str)\n    return n * (n + 1) // 2\n\n# Example usage:\n# print(number_of_substrings(\"abc\"))  # Expected output: 6\n\n\n"], "responses": ["```python\ndef number_of_substrings(str: str) -> int:\n    n = len(str)\n    return n * (n + 1) // 2\n\n# Example usage:\n# print(number_of_substrings(\"abc\"))  # Expected output: 6\n```"], "prompt_tokens": [459], "completion_tokens": [385], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_238_number_of_substrings"}
{"name": "mbpp_239_get_total_number_of_sequences", "language": "Python3", "prompt": "def get_total_number_of_sequences(m: int, n: int) -> int:\n    \"\"\"\n\tWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_239_get_total_number_of_sequences.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_total_number_of_sequences", "test": "def check(candidate):\n    \n    assert candidate(5, 2)==6\n    assert candidate(16, 3)==84\n\ndef test_check():\n    check(get_total_number_of_sequences)\n\ntest_check()\n", "source_codes": ["\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        total_sequences = 0\n        for next_start in range(start * 2, m + 1):\n            total_sequences += count_sequences(next_start, length - 1)\n        return total_sequences\n\n    return count_sequences(1, n)\n\n# Example usage:\nm = 10\nn = 4\nprint(get_total_number_of_sequences(m, n))  # Output will depend on m and n\n\n\n"], "responses": ["```python\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        total_sequences = 0\n        for next_start in range(start * 2, m + 1):\n            total_sequences += count_sequences(next_start, length - 1)\n        return total_sequences\n\n    return count_sequences(1, n)\n\n# Example usage:\nm = 10\nn = 4\nprint(get_total_number_of_sequences(m, n))  # Output will depend on m and n\n```"], "prompt_tokens": [651], "completion_tokens": [574], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_239_get_total_number_of_sequences"}
{"name": "mbpp_240_replace_list", "language": "Python3", "prompt": "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    \"\"\"\n\tWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_240_replace_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_list", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5], [5, 6, 7, 8])==[1, 2, 3, 4, 5, 6, 7, 8]\n    assert candidate(['red', 'blue', 'green'], ['yellow'])==['red', 'blue', 'yellow']\n\ndef test_check():\n    check(replace_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    if list1:\n        list1.pop()\n        list1.extend(list2)\n    return list1\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    if list1:\n        list1.pop()\n        list1.extend(list2)\n    return list1\n```"], "prompt_tokens": [524], "completion_tokens": [403], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_240_replace_list"}
{"name": "mbpp_242_count_charac", "language": "Python3", "prompt": "def count_charac(str1: str) -> int:\n    \"\"\"\n\tWrite a function to count the total number of characters in a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_242_count_charac.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_charac", "test": "def check(candidate):\n    \n    assert candidate('language')==8\n    assert candidate('words')==5\n\ndef test_check():\n    check(count_charac)\n\ntest_check()\n", "source_codes": ["\ndef count_charac(str1: str) -> int:\n    return len(str1)\n\n# Example usage:\nmy_string = \"Hello, World!\"\nprint(count_charac(my_string))  # Output will be 13\n\n\n"], "responses": ["```python\ndef count_charac(str1: str) -> int:\n    return len(str1)\n\n# Example usage:\nmy_string = \"Hello, World!\"\nprint(count_charac(my_string))  # Output will be 13\n```"], "prompt_tokens": [297], "completion_tokens": [223], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_242_count_charac"}
{"name": "mbpp_244_next_Perfect_Square", "language": "Python3", "prompt": "def next_Perfect_Square(N: int) -> int:\n    \"\"\"\n\tWrite a python function to find the next perfect square greater than a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_244_next_Perfect_Square.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "next_Perfect_Square", "test": "def check(candidate):\n    \n    assert candidate(6)==9\n    assert candidate(9)==16\n\ndef test_check():\n    check(next_Perfect_Square)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef next_Perfect_Square(N: int) -> int:\n    sqrt_N = math.sqrt(N)\n    next_int = math.ceil(sqrt_N)\n    next_perfect_square = next_int ** 2\n    return next_perfect_square\n\n\n"], "responses": ["```python\nimport math\n\ndef next_Perfect_Square(N: int) -> int:\n    sqrt_N = math.sqrt(N)\n    next_int = math.ceil(sqrt_N)\n    next_perfect_square = next_int ** 2\n    return next_perfect_square\n```"], "prompt_tokens": [404], "completion_tokens": [331], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_244_next_Perfect_Square"}
{"name": "mbpp_245_max_sum", "language": "Python3", "prompt": "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_245_max_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sum", "test": "def check(candidate):\n    \n    assert candidate([80, 60, 30, 40, 20, 10])==210\n    assert candidate([2, 3, 14, 16, 21, 23, 29, 30])==138\n\ndef test_check():\n    check(max_sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize MSIS and MSDS arrays\n    msis = arr.copy()\n    msds = arr.copy()\n\n    # Compute MSIS values from left to right\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and msis[i] < msis[j] + arr[i]:\n                msis[i] = msis[j] + arr[i]\n\n    # Compute MSDS values from right to left\n    for i in reversed(range(n - 1)):\n        for j in reversed(range(i, n)):\n            if arr[i] > arr[j] and msds[i] < msds[j] + arr[i]:\n                msds[i] = msds[j] + arr[i]\n\n    # Find the maximum sum bitonic subsequence\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, msis[i] + msds[i] - arr[i])\n\n    return max_sum_bitonic\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize MSIS and MSDS arrays\n    msis = arr.copy()\n    msds = arr.copy()\n\n    # Compute MSIS values from left to right\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and msis[i] < msis[j] + arr[i]:\n                msis[i] = msis[j] + arr[i]\n\n    # Compute MSDS values from right to left\n    for i in reversed(range(n - 1)):\n        for j in reversed(range(i, n)):\n            if arr[i] > arr[j] and msds[i] < msds[j] + arr[i]:\n                msds[i] = msds[j] + arr[i]\n\n    # Find the maximum sum bitonic subsequence\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, msis[i] + msds[i] - arr[i])\n\n    return max_sum_bitonic\n```"], "prompt_tokens": [769], "completion_tokens": [845], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_245_max_sum"}
{"name": "mbpp_247_lps", "language": "Python3", "prompt": "def lps(str: str) -> int:\n    \"\"\"\n\tWrite a function to find the length of the longest palindromic subsequence in the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_247_lps.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lps", "test": "def check(candidate):\n    \n    assert candidate('CARDIO FOR CARDS')==7\n    assert candidate('PART OF THE JOURNEY IS PART')==9\n\ndef test_check():\n    check(lps)\n\ntest_check()\n", "source_codes": ["\ndef lps(str: str) -> int:\n    n = len(str)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n\n\n"], "responses": ["```python\ndef lps(str: str) -> int:\n    n = len(str)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str[i] == str[j] and cl == 2:\n                dp[i][j] = 2\n            elif str[i] == str[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n```"], "prompt_tokens": [744], "completion_tokens": [793], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_247_lps"}
{"name": "mbpp_249_intersection_array", "language": "Python3", "prompt": "from typing import List\n\ndef intersection_array(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find the intersection of two arrays.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_249_intersection_array.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "intersection_array", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9])==[3, 5, 7, 9]\n    assert candidate([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40])==[10]\n\ndef test_check():\n    check(intersection_array)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef intersection_array(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    set_nums2 = set(array_nums2)\n    intersection = set()\n    \n    for num in array_nums1:\n        if num in set_nums2:\n            intersection.add(num)\n    \n    return list(intersection)\n\n# Example usage:\narray1 = [1, 2, 2, 3]\narray2 = [2, 3, 4]\nprint(intersection_array(array1, array2))  # Output: [2, 3]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef intersection_array(array_nums1: List[int], array_nums2: List[int]) -> List[int]:\n    set_nums2 = set(array_nums2)\n    intersection = set()\n    \n    for num in array_nums1:\n        if num in set_nums2:\n            intersection.add(num)\n    \n    return list(intersection)\n\n# Example usage:\narray1 = [1, 2, 2, 3]\narray2 = [2, 3, 4]\nprint(intersection_array(array1, array2))  # Output: [2, 3]\n```"], "prompt_tokens": [520], "completion_tokens": [500], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_249_intersection_array"}
{"name": "mbpp_250_count_X", "language": "Python3", "prompt": "from typing import List\n\ndef count_X(tup: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_250_count_X.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_X", "test": "def check(candidate):\n    \n    assert candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 10)==3\n    assert candidate([10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2], 8)==4\n\ndef test_check():\n    check(count_X)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef count_X(tup: Tuple[int], x: int) -> int:\n    return tup.count(x)\n\n# Example usage:\nmy_tuple = (1, 2, 3, 4, 2, 2, 5)\nelement_to_count = 2\nprint(count_X(my_tuple, element_to_count))  # Output: 3\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef count_X(tup: Tuple[int], x: int) -> int:\n    return tup.count(x)\n\n# Example usage:\nmy_tuple = (1, 2, 3, 4, 2, 2, 5)\nelement_to_count = 2\nprint(count_X(my_tuple, element_to_count))  # Output: 3\n```"], "prompt_tokens": [435], "completion_tokens": [353], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_250_count_X"}
{"name": "mbpp_251_insert_element", "language": "Python3", "prompt": "from typing import List\n\ndef insert_element(list: List[str], element: str) -> List[str]:\n    \"\"\"\n\tWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_251_insert_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "insert_element", "test": "def check(candidate):\n    \n    assert candidate(['python', 'java'], 'program')==['program', 'python', 'program', 'java']\n    assert candidate(['happy', 'sad'], 'laugh')==['laugh', 'happy', 'laugh', 'sad']\n\ndef test_check():\n    check(insert_element)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef insert_element(lst: List[str], element: str) -> List[str]:\n    new_list = []\n    for item in lst:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list\n\n# Example usage:\noriginal_list = ['a', 'b', 'c']\nelement_to_insert = 'x'\nresulting_list = insert_element(original_list, element_to_insert)\nprint(resulting_list)  # Output: ['x', 'a', 'x', 'b', 'x', 'c']\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef insert_element(lst: List[str], element: str) -> List[str]:\n    new_list = []\n    for item in lst:\n        new_list.append(element)\n        new_list.append(item)\n    return new_list\n\n# Example usage:\noriginal_list = ['a', 'b', 'c']\nelement_to_insert = 'x'\nresulting_list = insert_element(original_list, element_to_insert)\nprint(resulting_list)  # Output: ['x', 'a', 'x', 'b', 'x', 'c']\n```"], "prompt_tokens": [412], "completion_tokens": [359], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_251_insert_element"}
{"name": "mbpp_252_convert", "language": "Python3", "prompt": "from typing import Tuple\n\ndef convert(numbers: int) -> Tuple[float, float]:\n    \"\"\"\n\tWrite a python function to convert complex numbers to polar coordinates.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_252_convert.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "convert", "test": "def check(candidate):\n    \n    assert candidate(4)==(4.0, 0.0)\n    assert candidate(5)==(5.0, 0.0)\n\ndef test_check():\n    check(convert)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\nimport math\n\ndef convert(real_part: float, imaginary_part: float) -> Tuple[float, float]:\n    magnitude = math.sqrt(real_part**2 + imaginary_part**2)\n    angle = math.atan2(imaginary_part, real_part)\n    return magnitude, angle\n\n# Example usage:\nreal_part = 3.0\nimaginary_part = 4.0\npolar_coordinates = convert(real_part, imaginary_part)\nprint(polar_coordinates)  # Output: (5.0, 0.9272952180016122)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\nimport math\n\ndef convert(real_part: float, imaginary_part: float) -> Tuple[float, float]:\n    magnitude = math.sqrt(real_part**2 + imaginary_part**2)\n    angle = math.atan2(imaginary_part, real_part)\n    return magnitude, angle\n\n# Example usage:\nreal_part = 3.0\nimaginary_part = 4.0\npolar_coordinates = convert(real_part, imaginary_part)\nprint(polar_coordinates)  # Output: (5.0, 0.9272952180016122)\n```"], "prompt_tokens": [549], "completion_tokens": [541], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_252_convert"}
{"name": "mbpp_253_count_integer", "language": "Python3", "prompt": "from typing import List, Union\n\ndef count_integer(list1: List[Union[int, str, float]]) -> int:\n    \"\"\"\n\tWrite a python function that returns the number of integer elements in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_253_count_integer.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_integer", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3])==3\n    assert candidate([1, 1.2, 4, 5.1])==2\n\ndef test_check():\n    check(count_integer)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Union\n\ndef count_integer(list1: List[Union[int, str, float]]) -> int:\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n\n# Example usage:\nmy_list = [1, 'a', 2.5, 3, '4', 5.0, 6]\nprint(count_integer(my_list))  # Output should be 3\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef count_integer(list1: List[Union[int, str, float]]) -> int:\n    count = 0\n    for element in list1:\n        if isinstance(element, int):\n            count += 1\n    return count\n\n# Example usage:\nmy_list = [1, 'a', 2.5, 3, '4', 5.0, 6]\nprint(count_integer(my_list))  # Output should be 3\n```"], "prompt_tokens": [448], "completion_tokens": [400], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_253_count_integer"}
{"name": "mbpp_255_combinations_colors", "language": "Python3", "prompt": "from typing import List\n\ndef combinations_colors(l: List[str], n: int) -> List[List[str]]:\n    \"\"\"\n\tWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a list for each combination.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_255_combinations_colors.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "combinations_colors", "test": "def check(candidate):\n    \n    assert candidate(['Red', 'Green', 'Blue'], 2)==[['Red', 'Red'], ['Red', 'Green'], ['Red', 'Blue'], ['Green', 'Green'], ['Green', 'Blue'], ['Blue', 'Blue']]\n    assert candidate(['Red', 'Green', 'Blue'], 3)==[['Red', 'Red', 'Red'], ['Red', 'Red', 'Green'], ['Red', 'Red', 'Blue'], ['Red', 'Green', 'Green'], ['Red', 'Green', 'Blue'], ['Red', 'Blue', 'Blue'], ['Green', 'Green', 'Green'], ['Green', 'Green', 'Blue'], ['Green', 'Blue', 'Blue'], ['Blue', 'Blue', 'Blue']]\n\ndef test_check():\n    check(combinations_colors)\n\ntest_check()\n", "source_codes": ["\nfrom itertools import product\nfrom typing import List\n\ndef combinations_colors(l: List[str], n: int) -> List[List[str]]:\n    combinations = product(l, repeat=n)\n    combinations_as_lists = [list(combination) for combination in combinations]\n    return combinations_as_lists\n\n# Example usage:\ncolors = ['red', 'green', 'blue']\ncombinations = combinations_colors(colors, 2)\nprint(combinations)\n\n\n"], "responses": ["```python\nfrom itertools import product\nfrom typing import List\n\ndef combinations_colors(l: List[str], n: int) -> List[List[str]]:\n    combinations = product(l, repeat=n)\n    combinations_as_lists = [list(combination) for combination in combinations]\n    return combinations_as_lists\n\n# Example usage:\ncolors = ['red', 'green', 'blue']\ncombinations = combinations_colors(colors, 2)\nprint(combinations)\n```"], "prompt_tokens": [513], "completion_tokens": [414], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_255_combinations_colors"}
{"name": "mbpp_256_count_Primes_nums", "language": "Python3", "prompt": "def count_Primes_nums(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_256_count_Primes_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Primes_nums", "test": "def check(candidate):\n    \n    assert candidate(10)==4\n    assert candidate(100)==25\n\ndef test_check():\n    check(count_Primes_nums)\n\ntest_check()\n", "source_codes": ["\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n\n    return sum(is_prime)\n\n\n"], "responses": ["```python\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n\n    return sum(is_prime)\n```"], "prompt_tokens": [632], "completion_tokens": [591], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_256_count_Primes_nums"}
{"name": "mbpp_257_swap_numbers", "language": "Python3", "prompt": "from typing import List\n\ndef swap_numbers(a: int, b: int) -> List[int]:\n    \"\"\"\n\tWrite a function that takes in two numbers and returns a list with the second number and then the first number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_257_swap_numbers.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "swap_numbers", "test": "def check(candidate):\n    \n    assert candidate(15, 17)==[17, 15]\n    assert candidate(100, 200)==[200, 100]\n\ndef test_check():\n    check(swap_numbers)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef swap_numbers(a: int, b: int) -> List[int]:\n    return [b, a]\n\n# Example usage:\nprint(swap_numbers(1, 2))  # Output: [2, 1]\nprint(swap_numbers(3, 4))  # Output: [4, 3]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef swap_numbers(a: int, b: int) -> List[int]:\n    return [b, a]\n\n# Example usage:\nprint(swap_numbers(1, 2))  # Output: [2, 1]\nprint(swap_numbers(3, 4))  # Output: [4, 3]\n```"], "prompt_tokens": [355], "completion_tokens": [275], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_257_swap_numbers"}
{"name": "mbpp_259_maximize_elements", "language": "Python3", "prompt": "from typing import List\n\ndef maximize_elements(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to maximize the given two lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_259_maximize_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "maximize_elements", "test": "def check(candidate):\n    \n    assert candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])==[[7, 8], [5, 10], [3, 10], [8, 11]]\n    assert candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])==[[8, 9], [6, 11], [4, 11], [9, 12]]\n\ndef test_check():\n    check(maximize_elements)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef maximize_elements(test_list1: List[List[int]], test_list2: List[List[int]]) -> List[List[int]]:\n    max_list = []\n    for sublist1, sublist2 in zip(test_list1, test_list2):\n        max_sublist = [max(pair) for pair in zip(sublist1, sublist2)]\n        max_list.append(max_sublist)\n    return max_list\n\n# Example usage:\nlist1 = [[1, 2, 3], [4, 5, 6]]\nlist2 = [[3, 2, 1], [6, 5, 4]]\n\nprint(maximize_elements(list1, list2))  # Output: [[3, 2, 3], [6, 5, 6]]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef maximize_elements(test_list1: List[List[int]], test_list2: List[List[int]]) -> List[List[int]]:\n    max_list = []\n    for sublist1, sublist2 in zip(test_list1, test_list2):\n        max_sublist = [max(pair) for pair in zip(sublist1, sublist2)]\n        max_list.append(max_sublist)\n    return max_list\n\n# Example usage:\nlist1 = [[1, 2, 3], [4, 5, 6]]\nlist2 = [[3, 2, 1], [6, 5, 4]]\n\nprint(maximize_elements(list1, list2))  # Output: [[3, 2, 3], [6, 5, 6]]\n```"], "prompt_tokens": [472], "completion_tokens": [485], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_259_maximize_elements"}
{"name": "mbpp_260_newman_prime", "language": "Python3", "prompt": "def newman_prime(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth newman\u2013shanks\u2013williams prime number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_260_newman_prime.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "newman_prime", "test": "def check(candidate):\n    \n    assert candidate(4)==17\n    assert candidate(5)==41\n\ndef test_check():\n    check(newman_prime)\n\ntest_check()\n", "source_codes": ["\nfrom sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    S = [1, 1]\n    count = 0\n    i = 1\n    while count < n:\n        S.append(2 * S[i] + S[i-1])\n        if isprime(S[-1]):\n            count += 1\n        i += 1\n    return S[-1]\n\n# Example usage:\nnth_nsw_prime = newman_prime(5)\nprint(f\"The 5th Newman-Shanks-Williams prime is: {nth_nsw_prime}\")\n\n\n"], "responses": ["```python\nfrom sympy import isprime\n\ndef newman_prime(n: int) -> int:\n    S = [1, 1]\n    count = 0\n    i = 1\n    while count < n:\n        S.append(2 * S[i] + S[i-1])\n        if isprime(S[-1]):\n            count += 1\n        i += 1\n    return S[-1]\n\n# Example usage:\nnth_nsw_prime = newman_prime(5)\nprint(f\"The 5th Newman-Shanks-Williams prime is: {nth_nsw_prime}\")\n```"], "prompt_tokens": [599], "completion_tokens": [595], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_260_newman_prime"}
{"name": "mbpp_261_division_elements", "language": "Python3", "prompt": "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_261_division_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "division_elements", "test": "def check(candidate):\n    \n    assert candidate((12, 6, 8, 16), (6, 3, 4, 4))==(2, 2, 2, 4)\n    assert candidate((20, 14, 36, 18), (5, 7, 6, 9))==(4, 2, 6, 2)\n\ndef test_check():\n    check(division_elements)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef division_elements(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[float, float, float, float]:\n    result = []\n    for num1, num2 in zip(test_tup1, test_tup2):\n        if num2 == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        result.append(num1 / num2)\n    return tuple(result)\n\n# Example usage:\ntup1 = (10, 20, 30, 40)\ntup2 = (2, 4, 5, 8)\nprint(division_elements(tup1, tup2))  # Output: (5.0, 5.0, 6.0, 5.0)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef division_elements(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[float, float, float, float]:\n    result = []\n    for num1, num2 in zip(test_tup1, test_tup2):\n        if num2 == 0:\n            raise ValueError(\"Cannot divide by zero\")\n        result.append(num1 / num2)\n    return tuple(result)\n\n# Example usage:\ntup1 = (10, 20, 30, 40)\ntup2 = (2, 4, 5, 8)\nprint(division_elements(tup1, tup2))  # Output: (5.0, 5.0, 6.0, 5.0)\n```"], "prompt_tokens": [637], "completion_tokens": [609], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_261_division_elements"}
{"name": "mbpp_262_split_two_parts", "language": "Python3", "prompt": "from typing import List, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Any:\n    \"\"\"\n\tWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "split_two_parts", "test": "def check(candidate):\n    \n    assert candidate(['a', 'b', 'c', 'd'], 2)==(['a', 'b'], ['c', 'd'])\n    assert candidate(['p', 'y', 't', 'h', 'o', 'n'], 4)==(['p', 'y', 't', 'h'], ['o', 'n'])\n\ndef test_check():\n    check(split_two_parts)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any, Tuple\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    if L > len(list1):\n        raise ValueError(\"L cannot be greater than the length of the list\")\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n\n\n"], "responses": ["```python\nfrom typing import List, Any, Tuple\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    if L > len(list1):\n        raise ValueError(\"L cannot be greater than the length of the list\")\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n```"], "prompt_tokens": [611], "completion_tokens": [492], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_262_split_two_parts"}
{"name": "mbpp_264_dog_age", "language": "Python3", "prompt": "def dog_age(h_age: int) -> int:\n    \"\"\"\n\tWrite a function to calculate a dog's age in dog's years.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_264_dog_age.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "dog_age", "test": "def check(candidate):\n    \n    assert candidate(15)==73\n    assert candidate(24)==109\n\ndef test_check():\n    check(dog_age)\n\ntest_check()\n", "source_codes": ["\ndef dog_age(h_age: int) -> int:\n    if h_age == 0:\n        return 0\n    elif h_age == 1:\n        return 15\n    elif h_age == 2:\n        return 15 + 9\n    else:\n        return 15 + 9 + (h_age - 2) * 5\n\n# Example usage:\nhuman_years = 5\ndog_years = dog_age(human_years)\nprint(f\"A {human_years}-year-old dog is {dog_years} dog years old.\")\n\n\n"], "responses": ["```python\ndef dog_age(h_age: int) -> int:\n    if h_age == 0:\n        return 0\n    elif h_age == 1:\n        return 15\n    elif h_age == 2:\n        return 15 + 9\n    else:\n        return 15 + 9 + (h_age - 2) * 5\n\n# Example usage:\nhuman_years = 5\ndog_years = dog_age(human_years)\nprint(f\"A {human_years}-year-old dog is {dog_years} dog years old.\")\n```"], "prompt_tokens": [535], "completion_tokens": [531], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_264_dog_age"}
{"name": "mbpp_265_list_split", "language": "Python3", "prompt": "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    \"\"\"\n\tWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "list_split", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3)==[[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]\n    assert candidate(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n\ndef test_check():\n    check(list_split)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i + step])\n    return result\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = 3\nprint(list_split(my_list, n))  # Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i + step])\n    return result\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nn = 3\nprint(list_split(my_list, n))  # Output: [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n```"], "prompt_tokens": [528], "completion_tokens": [487], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_265_list_split"}
{"name": "mbpp_266_lateralsurface_cube", "language": "Python3", "prompt": "def lateralsurface_cube(l: int) -> int:\n    \"\"\"\n\tWrite a function to find the lateral surface area of a cube given its side length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_266_lateralsurface_cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lateralsurface_cube", "test": "def check(candidate):\n    \n    assert candidate(9)==324\n    assert candidate(10)==400\n\ndef test_check():\n    check(lateralsurface_cube)\n\ntest_check()\n", "source_codes": ["\ndef lateralsurface_cube(l: int) -> int:\n    return 4 * (l ** 2)\n\n# Example usage:\nside_length = 5\nlsa = lateralsurface_cube(side_length)\nprint(f\"The lateral surface area of a cube with side length {side_length} is {lsa}.\")\n\n\n"], "responses": ["```python\ndef lateralsurface_cube(l: int) -> int:\n    return 4 * (l ** 2)\n\n# Example usage:\nside_length = 5\nlsa = lateralsurface_cube(side_length)\nprint(f\"The lateral surface area of a cube with side length {side_length} is {lsa}.\")\n```"], "prompt_tokens": [417], "completion_tokens": [355], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_266_lateralsurface_cube"}
{"name": "mbpp_267_square_Sum", "language": "Python3", "prompt": "def square_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_267_square_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "square_Sum", "test": "def check(candidate):\n    \n    assert candidate(3)==35\n    assert candidate(4)==84\n\ndef test_check():\n    check(square_Sum)\n\ntest_check()\n", "source_codes": ["\ndef square_sum(n: int) -> int:\n    sum_of_squares = 0\n    odd_number = 1\n    for i in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n    return sum_of_squares\n\n# Example usage:\nprint(square_sum(5))\n\n\n"], "responses": ["```python\ndef square_sum(n: int) -> int:\n    sum_of_squares = 0\n    odd_number = 1\n    for i in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n    return sum_of_squares\n\n# Example usage:\nprint(square_sum(5))\n```"], "prompt_tokens": [404], "completion_tokens": [334], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_267_square_Sum"}
{"name": "mbpp_268_find_star_num", "language": "Python3", "prompt": "def find_star_num(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the n'th star number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_268_find_star_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_star_num", "test": "def check(candidate):\n    \n    assert candidate(4)==73\n    assert candidate(5)==121\n\ndef test_check():\n    check(find_star_num)\n\ntest_check()\n", "source_codes": ["\ndef find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1\n\n# Example usage:\nn = 3\nprint(f\"The {n}'th star number is: {find_star_num(n)}\")\n\n\n"], "responses": ["```python\ndef find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1\n\n# Example usage:\nn = 3\nprint(f\"The {n}'th star number is: {find_star_num(n)}\")\n```"], "prompt_tokens": [340], "completion_tokens": [282], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_268_find_star_num"}
{"name": "mbpp_269_ascii_value", "language": "Python3", "prompt": "def ascii_value(k: str) -> int:\n    \"\"\"\n\tWrite a function to find the ascii value of a character.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_269_ascii_value.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "ascii_value", "test": "def check(candidate):\n    \n    assert candidate('R')==82\n    assert candidate('S')==83\n\ndef test_check():\n    check(ascii_value)\n\ntest_check()\n", "source_codes": ["\ndef ascii_value(k: str) -> int:\n    if len(k) != 1:\n        raise ValueError(\"Input must be a single character.\")\n    return ord(k)\n\n# Example usage:\nprint(ascii_value('A'))  # Output: 65\nprint(ascii_value('a'))  # Output: 97\nprint(ascii_value('0'))  # Output: 48\n\n\n"], "responses": ["```python\ndef ascii_value(k: str) -> int:\n    if len(k) != 1:\n        raise ValueError(\"Input must be a single character.\")\n    return ord(k)\n\n# Example usage:\nprint(ascii_value('A'))  # Output: 65\nprint(ascii_value('a'))  # Output: 97\nprint(ascii_value('0'))  # Output: 48\n```"], "prompt_tokens": [363], "completion_tokens": [333], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_269_ascii_value"}
{"name": "mbpp_270_sum_even_and_even_index", "language": "Python3", "prompt": "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of even numbers at even positions of a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_270_sum_even_and_even_index.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_even_and_even_index", "test": "def check(candidate):\n    \n    assert candidate([3, 20, 17, 9, 2, 10, 18, 13, 6, 18])==26\n    assert candidate([5, 6, 12, 1])==12\n\ndef test_check():\n    check(sum_even_and_even_index)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    total = 0\n    for index, value in enumerate(arr):\n        if index % 2 == 0 and value % 2 == 0:\n            total += value\n    return total\n\n# Test the function\nprint(sum_even_and_even_index([1, 3, 5, 8, 10, 12]))  # Should return 10\nprint(sum_even_and_even_index([2, 4, 6, 8, 10, 12]))  # Should return 30\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    total = 0\n    for index, value in enumerate(arr):\n        if index % 2 == 0 and value % 2 == 0:\n            total += value\n    return total\n\n# Test the function\nprint(sum_even_and_even_index([1, 3, 5, 8, 10, 12]))  # Should return 10\nprint(sum_even_and_even_index([2, 4, 6, 8, 10, 12]))  # Should return 30\n```"], "prompt_tokens": [449], "completion_tokens": [436], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_270_sum_even_and_even_index"}
{"name": "mbpp_271_even_Power_Sum", "language": "Python3", "prompt": "def even_Power_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_271_even_Power_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "even_Power_Sum", "test": "def check(candidate):\n    \n    assert candidate(3)==8832\n    assert candidate(1)==32\n\ndef test_check():\n    check(even_Power_Sum)\n\ntest_check()\n", "source_codes": ["\ndef even_Power_Sum(n: int) -> int:\n    sum_of_powers = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_powers += even_number ** 5\n    return sum_of_powers\n\n# Example usage:\nprint(even_Power_Sum(3))  # This would calculate 2^5 + 4^5 + 6^5\n\n\n"], "responses": ["```python\ndef even_Power_Sum(n: int) -> int:\n    sum_of_powers = 0\n    for i in range(1, n + 1):\n        even_number = 2 * i\n        sum_of_powers += even_number ** 5\n    return sum_of_powers\n\n# Example usage:\nprint(even_Power_Sum(3))  # This would calculate 2^5 + 4^5 + 6^5\n```"], "prompt_tokens": [448], "completion_tokens": [394], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_271_even_Power_Sum"}
{"name": "mbpp_272_rear_extract", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple[int, str, int]]) -> List[int]:\n    \"\"\"\n\tWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_272_rear_extract.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rear_extract", "test": "def check(candidate):\n    \n    assert candidate([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)])==[36, 25, 45]\n    assert candidate([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)])==[14, 36, 56]\n\ndef test_check():\n    check(rear_extract)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple[int, str, int]]) -> List[int]:\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements\n\n# Example usage:\ntest_list = [(1, 'a', 2), (3, 'b', 4), (5, 'c', 6)]\nprint(rear_extract(test_list))  # Output: [2, 4, 6]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple[int, str, int]]) -> List[int]:\n    rear_elements = []\n    for tup in test_list:\n        rear_elements.append(tup[-1])\n    return rear_elements\n\n# Example usage:\ntest_list = [(1, 'a', 2), (3, 'b', 4), (5, 'c', 6)]\nprint(rear_extract(test_list))  # Output: [2, 4, 6]\n```"], "prompt_tokens": [435], "completion_tokens": [378], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_272_rear_extract"}
{"name": "mbpp_273_substract_elements", "language": "Python3", "prompt": "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> Tuple[int, int, int]:\n    \"\"\"\n\tWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "substract_elements", "test": "def check(candidate):\n    \n    assert candidate((11, 2, 3), (24, 45, 16))==(-13, -43, -13)\n    assert candidate((7, 18, 9), (10, 11, 12))==(-3, 7, -3)\n\ndef test_check():\n    check(substract_elements)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef subtract_elements(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> Tuple[int, int, int]:\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n\n# Example usage:\ntup1 = (5, 6, 7)\ntup2 = (1, 2, 3)\nprint(subtract_elements(tup1, tup2))  # Output: (4, 4, 4)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef subtract_elements(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> Tuple[int, int, int]:\n    return tuple(a - b for a, b in zip(test_tup1, test_tup2))\n\n# Example usage:\ntup1 = (5, 6, 7)\ntup2 = (1, 2, 3)\nprint(subtract_elements(tup1, tup2))  # Output: (4, 4, 4)\n```"], "prompt_tokens": [446], "completion_tokens": [355], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_273_substract_elements"}
{"name": "mbpp_274_even_binomial_Coeff_Sum", "language": "Python3", "prompt": "def even_binomial_Coeff_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_274_even_binomial_Coeff_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "even_binomial_Coeff_Sum", "test": "def check(candidate):\n    \n    assert candidate(6)==32\n    assert candidate(2)==2\n\ndef test_check():\n    check(even_binomial_Coeff_Sum)\n\ntest_check()\n", "source_codes": ["\nfrom math import factorial\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    sum_even_coeffs = 0\n    for k in range(0, n+1, 2):\n        coeff = factorial(n) // (factorial(k) * factorial(n - k))\n        sum_even_coeffs += coeff\n    return sum_even_coeffs\n\n# Example usage:\nn = 4\nprint(even_binomial_Coeff_Sum(n))  # Expected output: 8\n\n\n"], "responses": ["```python\nfrom math import factorial\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    sum_even_coeffs = 0\n    for k in range(0, n+1, 2):\n        coeff = factorial(n) // (factorial(k) * factorial(n - k))\n        sum_even_coeffs += coeff\n    return sum_even_coeffs\n\n# Example usage:\nn = 4\nprint(even_binomial_Coeff_Sum(n))  # Expected output: 8\n```"], "prompt_tokens": [592], "completion_tokens": [553], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_274_even_binomial_Coeff_Sum"}
{"name": "mbpp_277_dict_filter", "language": "Python3", "prompt": "from typing import Dict\n\ndef dict_filter(dict: Dict[str, int], n: int) -> Dict[str, int]:\n    \"\"\"\n\tWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_277_dict_filter.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "dict_filter", "test": "def check(candidate):\n    assert candidate({ 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190 }, 170)=={ 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190 }\n    assert candidate({ 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190 }, 180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190 }\n    assert candidate({ 'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190 }, 190)=={ 'Pierre Cox': 190 }\n\ndef test_check():\n    check(dict_filter)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Dict\n\ndef dict_filter(input_dict: Dict[str, int], n: int) -> Dict[str, int]:\n    filtered_dict = {}\n    for key, value in input_dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n\n# Example usage:\nexample_dict = {'a': 1, 'b': 5, 'c': 10, 'd': 15}\nn = 5\nfiltered = dict_filter(example_dict, n)\nprint(filtered)  # Output should be {'b': 5, 'c': 10, 'd': 15}\n\n\n"], "responses": ["```python\nfrom typing import Dict\n\ndef dict_filter(input_dict: Dict[str, int], n: int) -> Dict[str, int]:\n    filtered_dict = {}\n    for key, value in input_dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n\n# Example usage:\nexample_dict = {'a': 1, 'b': 5, 'c': 10, 'd': 15}\nn = 5\nfiltered = dict_filter(example_dict, n)\nprint(filtered)  # Output should be {'b': 5, 'c': 10, 'd': 15}\n```"], "prompt_tokens": [496], "completion_tokens": [454], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_277_dict_filter"}
{"name": "mbpp_278_count_first_elements", "language": "Python3", "prompt": "from typing import List, Union, Tuple\n\ndef count_first_elements(test_tup: List[Union[int, Tuple[int, int]]]) -> int:\n    \"\"\"\n\tWrite a function to find the number of elements that occurs before the list element in the given tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_278_count_first_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_first_elements", "test": "def check(candidate):\n    \n    assert candidate([2, 9, (5, 7), 11])==2\n    assert candidate([11, 15, 5, 8, (2, 3), 8])==4\n\ndef test_check():\n    check(count_first_elements)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Union, Tuple\n\ndef count_first_elements(test_tup: List[Union[int, Tuple[int, int]]]) -> int:\n    count = 0\n    for element in test_tup:\n        if not isinstance(element, tuple):\n            count += 1\n        else:\n            break\n    return count\n\n# Example usage:\nexample_list = [1, 3, (4, 5), 7, 9]\nprint(count_first_elements(example_list))  # Output should be 2\n\n\n"], "responses": ["```python\nfrom typing import List, Union, Tuple\n\ndef count_first_elements(test_tup: List[Union[int, Tuple[int, int]]]) -> int:\n    count = 0\n    for element in test_tup:\n        if not isinstance(element, tuple):\n            count += 1\n        else:\n            break\n    return count\n\n# Example usage:\nexample_list = [1, 3, (4, 5), 7, 9]\nprint(count_first_elements(example_list))  # Output should be 2\n```"], "prompt_tokens": [491], "completion_tokens": [431], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_278_count_first_elements"}
{"name": "mbpp_279_is_num_decagonal", "language": "Python3", "prompt": "def is_num_decagonal(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth decagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_num_decagonal", "test": "def check(candidate):\n    \n    assert candidate(7)==175\n    assert candidate(10)==370\n\ndef test_check():\n    check(is_num_decagonal)\n\ntest_check()\n", "source_codes": ["\ndef nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number.\n    \"\"\"\n    return 4 * n * n - 3 * n\n\n# Example usage:\nn = 5\nprint(f\"The {n}th decagonal number is: {nth_decagonal_number(n)}\")\n\n\n"], "responses": ["```python\ndef nth_decagonal_number(n: int) -> int:\n    \"\"\"\n    Calculate the nth decagonal number.\n    \"\"\"\n    return 4 * n * n - 3 * n\n\n# Example usage:\nn = 5\nprint(f\"The {n}th decagonal number is: {nth_decagonal_number(n)}\")\n```"], "prompt_tokens": [367], "completion_tokens": [321], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_279_is_num_decagonal"}
{"name": "mbpp_280_sequential_search", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    \"\"\"\n\tWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_280_sequential_search.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sequential_search", "test": "def check(candidate):\n    \n    assert candidate([12, 32, 45, 62, 35, 47, 44, 61], 61)==(True, 7)\n    assert candidate([9, 10, 17, 19, 22, 39, 48, 56], 48)==(True, 6)\n\ndef test_check():\n    check(sequential_search)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return True, index\n    return False, -1\n\n# Example usage:\nmy_list = [1, 3, 5, 7, 9]\nitem_to_find = 5\nprint(sequential_search(my_list, item_to_find))\n\nitem_to_find = 6\nprint(sequential_search(my_list, item_to_find))\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return True, index\n    return False, -1\n\n# Example usage:\nmy_list = [1, 3, 5, 7, 9]\nitem_to_find = 5\nprint(sequential_search(my_list, item_to_find))\n\nitem_to_find = 6\nprint(sequential_search(my_list, item_to_find))\n```"], "prompt_tokens": [544], "completion_tokens": [449], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_280_sequential_search"}
{"name": "mbpp_281_all_unique", "language": "Python3", "prompt": "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check if the elements of a given list are unique or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_281_all_unique.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "all_unique", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 1, 2])==False\n    assert candidate([1, 2, 3, 4, 5])==True\n\ndef test_check():\n    check(all_unique)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    unique_elements = set(test_list)\n    return len(unique_elements) == len(test_list)\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5]\nprint(all_unique(my_list))  # Output: True\n\nmy_list = [1, 2, 3, 3, 4]\nprint(all_unique(my_list))  # Output: False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    unique_elements = set(test_list)\n    return len(unique_elements) == len(test_list)\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5]\nprint(all_unique(my_list))  # Output: True\n\nmy_list = [1, 2, 3, 3, 4]\nprint(all_unique(my_list))  # Output: False\n```"], "prompt_tokens": [397], "completion_tokens": [360], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_281_all_unique"}
{"name": "mbpp_282_sub_list", "language": "Python3", "prompt": "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to subtract two lists element-wise.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_282_sub_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sub_list", "test": "def check(candidate):\n    \n    assert candidate([1, 2], [3, 4])==[-2, -2]\n    assert candidate([90, 120], [50, 70])==[40, 50]\n\ndef test_check():\n    check(sub_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    max_length = max(len(nums1), len(nums2))\n    result = []\n    for i in range(max_length):\n        a = nums1[i] if i < len(nums1) else 0\n        b = nums2[i] if i < len(nums2) else 0\n        result.append(a - b)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    max_length = max(len(nums1), len(nums2))\n    result = []\n    for i in range(max_length):\n        a = nums1[i] if i < len(nums1) else 0\n        b = nums2[i] if i < len(nums2) else 0\n        result.append(a - b)\n    return result\n```"], "prompt_tokens": [575], "completion_tokens": [536], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_282_sub_list"}
{"name": "mbpp_283_validate", "language": "Python3", "prompt": "def validate(n: int) -> bool:\n    \"\"\"\n\tWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_283_validate.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "validate", "test": "def check(candidate):\n    \n    assert candidate(51241)==False\n    assert candidate(321)==True\n\ndef test_check():\n    check(validate)\n\ntest_check()\n", "source_codes": ["\ndef validate(n: int) -> bool:\n    n_str = str(n)\n    frequency = {}\n    \n    for digit in n_str:\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n    \n    for digit, freq in frequency.items():\n        if freq > int(digit):\n            return False\n    \n    return True\n\n\n"], "responses": ["```python\ndef validate(n: int) -> bool:\n    n_str = str(n)\n    frequency = {}\n    \n    for digit in n_str:\n        if digit in frequency:\n            frequency[digit] += 1\n        else:\n            frequency[digit] = 1\n    \n    for digit, freq in frequency.items():\n        if freq > int(digit):\n            return False\n    \n    return True\n```"], "prompt_tokens": [486], "completion_tokens": [423], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_283_validate"}
{"name": "mbpp_284_check_element", "language": "Python3", "prompt": "from typing import List, Any\n\ndef check_element(list: List[Any], element: Any) -> bool:\n    \"\"\"\n\tWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_284_check_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_element", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4], 7)==False\n    assert candidate(['green', 'green', 'green', 'green'], 'green')==True\n\ndef test_check():\n    check(check_element)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef check_element(lst: List[Any], element: Any) -> bool:\n    for item in lst:\n        if item != element:\n            return False\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef check_element(lst: List[Any], element: Any) -> bool:\n    for item in lst:\n        if item != element:\n            return False\n    return True\n```"], "prompt_tokens": [433], "completion_tokens": [314], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_284_check_element"}
{"name": "mbpp_285_text_match_two_three", "language": "Python3", "prompt": "def text_match_two_three(text: str) -> bool:\n    \"\"\"\n\tWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_285_text_match_two_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_two_three", "test": "def check(candidate):\n    \n    assert candidate('dc')==False\n    assert candidate('abbbba')==True\n\ndef test_check():\n    check(text_match_two_three)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef text_match_two_three(text: str) -> bool:\n    pattern = 'ab{2,3}'\n    return bool(re.search(pattern, text))\n\n# Example usage:\nprint(text_match_two_three(\"ab\"))       # False, only one 'b'\nprint(text_match_two_three(\"abb\"))      # True, two 'b's\nprint(text_match_two_three(\"abbb\"))     # True, three 'b's\nprint(text_match_two_three(\"abbbb\"))    # False, four 'b's\nprint(text_match_two_three(\"aabb\"))     # True, 'a' followed by two 'b's\nprint(text_match_two_three(\"some text\"))# False, pattern not present\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_two_three(text: str) -> bool:\n    pattern = 'ab{2,3}'\n    return bool(re.search(pattern, text))\n\n# Example usage:\nprint(text_match_two_three(\"ab\"))       # False, only one 'b'\nprint(text_match_two_three(\"abb\"))      # True, two 'b's\nprint(text_match_two_three(\"abbb\"))     # True, three 'b's\nprint(text_match_two_three(\"abbbb\"))    # False, four 'b's\nprint(text_match_two_three(\"aabb\"))     # True, 'a' followed by two 'b's\nprint(text_match_two_three(\"some text\"))# False, pattern not present\n```"], "prompt_tokens": [577], "completion_tokens": [585], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_285_text_match_two_three"}
{"name": "mbpp_286_max_sub_array_sum_repeated", "language": "Python3", "prompt": "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_286_max_sub_array_sum_repeated.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sub_array_sum_repeated", "test": "def check(candidate):\n    \n    assert candidate([-1, 10, 20], 3, 2)==59\n    assert candidate([-1, -2, -3], 3, 3)==-1\n\ndef test_check():\n    check(max_sub_array_sum_repeated)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef kadane_algorithm(arr: List[int]) -> int:\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    max_kadane = kadane_algorithm(a)\n    if k == 1:\n        return max_kadane\n    array_sum = sum(a)\n    max_prefix_sum = curr_prefix_sum = 0\n    for i in range(n):\n        curr_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, curr_prefix_sum)\n    max_suffix_sum = curr_suffix_sum = 0\n    for i in range(n-1, -1, -1):\n        curr_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, curr_suffix_sum)\n    if array_sum > 0:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum + array_sum * (k-2))\n    else:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum)\n\n# Example usage:\nprint(max_sub_array_sum_repeated([1, -2, 1], 3, 2))  # Output should be 2\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef kadane_algorithm(arr: List[int]) -> int:\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    max_kadane = kadane_algorithm(a)\n    if k == 1:\n        return max_kadane\n    array_sum = sum(a)\n    max_prefix_sum = curr_prefix_sum = 0\n    for i in range(n):\n        curr_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, curr_prefix_sum)\n    max_suffix_sum = curr_suffix_sum = 0\n    for i in range(n-1, -1, -1):\n        curr_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, curr_suffix_sum)\n    if array_sum > 0:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum + array_sum * (k-2))\n    else:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum)\n\n# Example usage:\nprint(max_sub_array_sum_repeated([1, -2, 1], 3, 2))  # Output should be 2\n```"], "prompt_tokens": [911], "completion_tokens": [1040], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_286_max_sub_array_sum_repeated"}
{"name": "mbpp_287_square_Sum", "language": "Python3", "prompt": "def square_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_287_square_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "square_Sum", "test": "def check(candidate):\n    \n    assert candidate(3)==56\n    assert candidate(4)==120\n\ndef test_check():\n    check(square_Sum)\n\ntest_check()\n", "source_codes": ["\ndef square_sum(n: int) -> int:\n    sum_of_squares = 4 * n * (n + 1) * (2 * n + 1) // 6\n    return sum_of_squares\n\n# Example usage:\nprint(square_sum(3))\n\n\n"], "responses": ["```python\ndef square_sum(n: int) -> int:\n    sum_of_squares = 4 * n * (n + 1) * (2 * n + 1) // 6\n    return sum_of_squares\n\n# Example usage:\nprint(square_sum(3))\n```"], "prompt_tokens": [665], "completion_tokens": [589], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_287_square_Sum"}
{"name": "mbpp_290_max_length", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_length(list1: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\"\n\tWrite a function to find the list of maximum length in a list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_290_max_length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_length", "test": "def check(candidate):\n    \n    assert candidate([[1], [5, 7], [10, 12, 14, 15]])==(4, [10, 12, 14, 15])\n    assert candidate([[5], [15, 20, 25]])==(3, [15, 20, 25])\n\ndef test_check():\n    check(max_length)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_length(list1: List[List[int]]) -> Tuple[int, List[int]]:\n    max_len = 0\n    max_list = []\n    \n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return max_len, max_list\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nmax_len, max_list = max_length(list_of_lists)\nprint(f\"The list with the maximum length is: {max_list} with a length of {max_len}\")\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_length(list1: List[List[int]]) -> Tuple[int, List[int]]:\n    max_len = 0\n    max_list = []\n    \n    for lst in list1:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n    \n    return max_len, max_list\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nmax_len, max_list = max_length(list_of_lists)\nprint(f\"The list with the maximum length is: {max_list} with a length of {max_len}\")\n```"], "prompt_tokens": [498], "completion_tokens": [497], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_290_max_length"}
{"name": "mbpp_291_count_no_of_ways", "language": "Python3", "prompt": "def count_no_of_ways(n: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_291_count_no_of_ways.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_no_of_ways", "test": "def check(candidate):\n    \n    assert candidate(3, 2)==6\n    assert candidate(4, 4)==228\n\ndef test_check():\n    check(count_no_of_ways)\n\ntest_check()\n", "source_codes": ["\ndef count_no_of_ways(n: int, k: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    \n    same = [0] * (n + 1)\n    diff = [0] * (n + 1)\n    \n    same[1] = 0\n    diff[1] = k\n    \n    for i in range(2, n + 1):\n        same[i] = diff[i - 1]\n        diff[i] = (same[i - 1] + diff[i - 1]) * (k - 1)\n    \n    return same[n] + diff[n]\n\n# Example usage:\nprint(count_no_of_ways(3, 2))  # Output should be 6\n\n\n"], "responses": ["```python\ndef count_no_of_ways(n: int, k: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return k\n    \n    same = [0] * (n + 1)\n    diff = [0] * (n + 1)\n    \n    same[1] = 0\n    diff[1] = k\n    \n    for i in range(2, n + 1):\n        same[i] = diff[i - 1]\n        diff[i] = (same[i - 1] + diff[i - 1]) * (k - 1)\n    \n    return same[n] + diff[n]\n\n# Example usage:\nprint(count_no_of_ways(3, 2))  # Output should be 6\n```"], "prompt_tokens": [823], "completion_tokens": [816], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_291_count_no_of_ways"}
{"name": "mbpp_292_find", "language": "Python3", "prompt": "def find(n: int, m: int) -> int:\n    \"\"\"\n\tWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find", "test": "def check(candidate):\n    \n    assert candidate(4, 2)==2\n    assert candidate(20, 5)==4\n\ndef test_check():\n    check(find)\n\ntest_check()\n", "source_codes": ["\ndef find(n: int, m: int) -> int:\n    if m == 0:\n        raise ValueError(\"Cannot divide by zero.\")\n    quotient = n // m\n    return quotient\n\n\n"], "responses": ["```python\ndef find(n: int, m: int) -> int:\n    if m == 0:\n        raise ValueError(\"Cannot divide by zero.\")\n    quotient = n // m\n    return quotient\n```"], "prompt_tokens": [453], "completion_tokens": [364], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_292_find"}
{"name": "mbpp_293_otherside_rightangle", "language": "Python3", "prompt": "def otherside_rightangle(w: int, h: int) -> float:\n    \"\"\"\n\tWrite a function to find the third side of a right angled triangle.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_293_otherside_rightangle.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "otherside_rightangle", "test": "def check(candidate):\n    \n    assert candidate(3, 4)==5\n    assert candidate(7, 15)==16.55294535724685\n\ndef test_check():\n    check(otherside_rightangle)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef otherside_rightangle(w: int, h: int) -> float:\n    hypotenuse = math.sqrt(w**2 + h**2)\n    return hypotenuse\n\n\n"], "responses": ["```python\nimport math\n\ndef otherside_rightangle(w: int, h: int) -> float:\n    hypotenuse = math.sqrt(w**2 + h**2)\n    return hypotenuse\n```"], "prompt_tokens": [532], "completion_tokens": [445], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_293_otherside_rightangle"}
{"name": "mbpp_294_max_val", "language": "Python3", "prompt": "from typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum value in a given heterogeneous list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_val", "test": "def check(candidate):\n    \n    assert candidate(['Python', 15, 20, 25])==25\n    assert candidate(['Python', 30, 20, 40, 50, 'version'])==50\n\ndef test_check():\n    check(max_val)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    max_value = float('-inf')\n    for item in listval:\n        if isinstance(item, int):\n            if item > max_value:\n                max_value = item\n    if max_value == float('-inf'):\n        raise ValueError(\"List must contain at least one integer\")\n    return max_value\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef max_val(listval: List[Union[str, int]]) -> int:\n    max_value = float('-inf')\n    for item in listval:\n        if isinstance(item, int):\n            if item > max_value:\n                max_value = item\n    if max_value == float('-inf'):\n        raise ValueError(\"List must contain at least one integer\")\n    return max_value\n```"], "prompt_tokens": [623], "completion_tokens": [566], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_294_max_val"}
{"name": "mbpp_295_sum_div", "language": "Python3", "prompt": "def sum_div(number: int) -> int:\n    \"\"\"\n\tWrite a function to return the sum of all divisors of a number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_295_sum_div.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_div", "test": "def check(candidate):\n    \n    assert candidate(12)==16\n    assert candidate(7)==1\n\ndef test_check():\n    check(sum_div)\n\ntest_check()\n", "source_codes": ["\ndef sum_div(number: int) -> int:\n    sum_of_divisors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n\n# Example usage:\nprint(sum_div(6))  # Should return 12\n\n\n"], "responses": ["```python\ndef sum_div(number: int) -> int:\n    sum_of_divisors = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum_of_divisors += i\n    return sum_of_divisors\n\n# Example usage:\nprint(sum_div(6))  # Should return 12\n```"], "prompt_tokens": [488], "completion_tokens": [444], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_295_sum_div"}
{"name": "mbpp_296_get_Inv_Count", "language": "Python3", "prompt": "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to count inversions in an array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_Inv_Count", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 1])==1\n    assert candidate([1, 2, 5, 6, 1])==3\n\ndef test_check():\n    check(get_Inv_Count)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef merge_sort_and_count(arr: List[int], temp: List[int], left: int, right: int) -> int:\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += merge_sort_and_count(arr, temp, left, mid)\n        inv_count += merge_sort_and_count(arr, temp, mid + 1, right)\n        inv_count += merge_and_count(arr, temp, left, mid, right)\n    return inv_count\n\ndef merge_and_count(arr: List[int], temp: List[int], left: int, mid: int, right: int) -> int:\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp[k] = arr[i]\n            k += 1\n            i += 1\n        else:\n            temp[k] = arr[j]\n            inv_count += (mid - i + 1)  # Count the inversions\n            k += 1\n            j += 1\n\n    while i <= mid:\n        temp[k] = arr[i]\n        k += 1\n        i += 1\n\n    while j <= right:\n        temp[k] = arr[j]\n        k += 1\n        j += 1\n\n    for i in range(left, right + 1):\n        arr[i] = temp[i]\n\n    return inv_count\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    temp = [0] * len(arr)\n    return merge_sort_and_count(arr, temp, 0, len(arr) - 1)\n\n# Example usage:\narr = [1, 20, 6, 4, 5]\nprint(f\"Number of inversions are {get_Inv_Count(arr)}\")\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef merge_sort_and_count(arr: List[int], temp: List[int], left: int, right: int) -> int:\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += merge_sort_and_count(arr, temp, left, mid)\n        inv_count += merge_sort_and_count(arr, temp, mid + 1, right)\n        inv_count += merge_and_count(arr, temp, left, mid, right)\n    return inv_count\n\ndef merge_and_count(arr: List[int], temp: List[int], left: int, mid: int, right: int) -> int:\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp[k] = arr[i]\n            k += 1\n            i += 1\n        else:\n            temp[k] = arr[j]\n            inv_count += (mid - i + 1)  # Count the inversions\n            k += 1\n            j += 1\n\n    while i <= mid:\n        temp[k] = arr[i]\n        k += 1\n        i += 1\n\n    while j <= right:\n        temp[k] = arr[j]\n        k += 1\n        j += 1\n\n    for i in range(left, right + 1):\n        arr[i] = temp[i]\n\n    return inv_count\n\ndef get_Inv_Count(arr: List[int]) -> int:\n    temp = [0] * len(arr)\n    return merge_sort_and_count(arr, temp, 0, len(arr) - 1)\n\n# Example usage:\narr = [1, 20, 6, 4, 5]\nprint(f\"Number of inversions are {get_Inv_Count(arr)}\")\n```"], "prompt_tokens": [704], "completion_tokens": [982], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_296_get_Inv_Count"}
{"name": "mbpp_297_flatten_list", "language": "Python3", "prompt": "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List[int]]]) -> List[int]:\n    \"\"\"\n\tWrite a function to flatten a given nested list structure.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_297_flatten_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "flatten_list", "test": "def check(candidate):\n    assert candidate([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    assert candidate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    assert candidate([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n\ndef test_check():\n    check(flatten_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List[int]]]) -> List[int]:\n    flattened = []\n    for item in list1:\n        if isinstance(item, int):\n            flattened.append(item)\n        elif isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            raise ValueError(\"List items must be integers or lists of integers\")\n    return flattened\n\n# Example usage:\nnested_list = [1, [2, [3, 4], 5], 6, [7, 8]]\nflat_list = flatten_list(nested_list)\nprint(flat_list)  # Output: [1, 2, 3, 4, 5, 6, 7, 8]\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List[int]]]) -> List[int]:\n    flattened = []\n    for item in list1:\n        if isinstance(item, int):\n            flattened.append(item)\n        elif isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            raise ValueError(\"List items must be integers or lists of integers\")\n    return flattened\n\n# Example usage:\nnested_list = [1, [2, [3, 4], 5], 6, [7, 8]]\nflat_list = flatten_list(nested_list)\nprint(flat_list)  # Output: [1, 2, 3, 4, 5, 6, 7, 8]\n```"], "prompt_tokens": [506], "completion_tokens": [523], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_297_flatten_list"}
{"name": "mbpp_299_max_aggregate", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    \"\"\"\n\tWrite a function to calculate the maximum aggregate from the list of tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_299_max_aggregate.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_aggregate", "test": "def check(candidate):\n    \n    assert candidate([('Juan Whelan', 50), ('Sabah Colley', 48), ('Peter Nichols', 37), ('Juan Whelan', 22), ('Sabah Colley', 14)])==('Juan Whelan', 72)\n    assert candidate([('Juan Whelan', 10), ('Sabah Colley', 20), ('Peter Nichols', 30), ('Juan Whelan', 40), ('Sabah Colley', 50)])==('Sabah Colley', 70)\n\ndef test_check():\n    check(max_aggregate)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    max_tuple = (\"\", float('-inf'))\n    for data in stdata:\n        if data[1] > max_tuple[1]:\n            max_tuple = data\n    return max_tuple\n\n# Example usage:\nstdata = [(\"Alice\", 90), (\"Bob\", 95), (\"Charlie\", 85)]\nprint(max_aggregate(stdata))  # Output should be (\"Bob\", 95)\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    max_tuple = (\"\", float('-inf'))\n    for data in stdata:\n        if data[1] > max_tuple[1]:\n            max_tuple = data\n    return max_tuple\n\n# Example usage:\nstdata = [(\"Alice\", 90), (\"Bob\", 95), (\"Charlie\", 85)]\nprint(max_aggregate(stdata))  # Output should be (\"Bob\", 95)\n```"], "prompt_tokens": [473], "completion_tokens": [434], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_299_max_aggregate"}
{"name": "mbpp_304_find_Element", "language": "Python3", "prompt": "from typing import List\n\ndef find_Element(arr: List[int], ranges: List[List[int]], rotations: int, index: int) -> int:\n    \"\"\"\n\tWrite a python function to find element at a given index after number of rotations.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_304_find_Element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Element", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2)==3\n    assert candidate([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1)==1\n\ndef test_check():\n    check(find_Element)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_Element(arr: List[int], ranges: List[List[int]], rotations: int, index: int) -> int:\n    for i in range(rotations - 1, -1, -1):\n        left, right = ranges[i]\n        if left <= index <= right:\n            if index == left:\n                index = right\n            else:\n                index -= 1\n    return arr[index]\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nranges = [[0, 2], [0, 3]]\nrotations = 2\nindex = 1\nprint(find_Element(arr, ranges, rotations, index))  # Output should be the element at index 1 after rotations\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_Element(arr: List[int], ranges: List[List[int]], rotations: int, index: int) -> int:\n    for i in range(rotations - 1, -1, -1):\n        left, right = ranges[i]\n        if left <= index <= right:\n            if index == left:\n                index = right\n            else:\n                index -= 1\n    return arr[index]\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nranges = [[0, 2], [0, 3]]\nrotations = 2\nindex = 1\nprint(find_Element(arr, ranges, rotations, index))  # Output should be the element at index 1 after rotations\n```"], "prompt_tokens": [577], "completion_tokens": [577], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_304_find_Element"}
{"name": "mbpp_305_start_withp", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    \"\"\"\n\tWrite a function to return two words from a list of words starting with letter 'p'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_305_start_withp.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "start_withp", "test": "def check(candidate):\n    \n    assert candidate(['Python Programming', 'Java Programming'])==('Python', 'Programming')\n    assert candidate(['Pqrst Pqr', 'qrstuv'])==('Pqrst', 'Pqr')\n\ndef test_check():\n    check(start_withp)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []  # List to store words starting with 'p'\n    \n    for word in words:\n        if word.lower().startswith('p'):  # Check if word starts with 'p'\n            p_words.append(word)  # Add to the list of 'p' words\n            if len(p_words) == 2:  # If we have found two words, stop searching\n                break\n    \n    # If we have found two or more words, return the first two.\n    # If we have found only one word, return it and an empty string.\n    # If no words are found, return two empty strings.\n    return (p_words[0], p_words[1]) if len(p_words) >= 2 else (p_words[0], '') if len(p_words) == 1 else ('', '')\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []  # List to store words starting with 'p'\n    \n    for word in words:\n        if word.lower().startswith('p'):  # Check if word starts with 'p'\n            p_words.append(word)  # Add to the list of 'p' words\n            if len(p_words) == 2:  # If we have found two words, stop searching\n                break\n    \n    # If we have found two or more words, return the first two.\n    # If we have found only one word, return it and an empty string.\n    # If no words are found, return two empty strings.\n    return (p_words[0], p_words[1]) if len(p_words) >= 2 else (p_words[0], '') if len(p_words) == 1 else ('', '')\n```"], "prompt_tokens": [637], "completion_tokens": [684], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_305_start_withp"}
{"name": "mbpp_306_max_sum_increasing_subseq", "language": "Python3", "prompt": "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    \"\"\"\n\tWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sum_increasing_subseq", "test": "def check(candidate):\n    \n    assert candidate([1, 101, 2, 3, 100, 4, 5], 7, 2, 5)==7\n    assert candidate([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)==71\n\ndef test_check():\n    check(max_sum_increasing_subseq)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    dp = a.copy()\n    \n    for i in range(index + 1):\n        for j in range(i):\n            if a[i] > a[j] and a[j] < a[k]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    \n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            max_sum = max(max_sum, dp[i])\n    \n    max_sum += a[k]\n    \n    return max_sum\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    dp = a.copy()\n    \n    for i in range(index + 1):\n        for j in range(i):\n            if a[i] > a[j] and a[j] < a[k]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    \n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            max_sum = max(max_sum, dp[i])\n    \n    max_sum += a[k]\n    \n    return max_sum\n```"], "prompt_tokens": [841], "completion_tokens": [777], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_306_max_sum_increasing_subseq"}
{"name": "mbpp_308_large_product", "language": "Python3", "prompt": "from typing import List\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_308_large_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "large_product", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4)==[60, 54, 50, 48]\n    assert candidate([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5)==[60, 54, 50, 48, 45]\n\ndef test_check():\n    check(large_product)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(products, num1 * num2)\n            if len(products) > N:\n                heapq.heappop(products)\n    return heapq.nlargest(N, products)\n\n# Example usage:\nnums1 = [1, 2, 3]\nnums2 = [4, 5, 6]\nN = 3\nprint(large_product(nums1, nums2, N))  # Output should be the 3 largest products\n\n\n"], "responses": ["```python\nfrom typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(products, num1 * num2)\n            if len(products) > N:\n                heapq.heappop(products)\n    return heapq.nlargest(N, products)\n\n# Example usage:\nnums1 = [1, 2, 3]\nnums2 = [4, 5, 6]\nN = 3\nprint(large_product(nums1, nums2, N))  # Output should be the 3 largest products\n```"], "prompt_tokens": [609], "completion_tokens": [585], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_308_large_product"}
{"name": "mbpp_309_maximum", "language": "Python3", "prompt": "def maximum(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a python function to find the maximum of two numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_309_maximum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "maximum", "test": "def check(candidate):\n    \n    assert candidate(-1, -2)==-1\n    assert candidate(9, 7)==9\n\ndef test_check():\n    check(maximum)\n\ntest_check()\n", "source_codes": ["\ndef maximum(a: int, b: int) -> int:\n    if a > b:\n        return a\n    else:\n        return b\n\n\n"], "responses": ["```python\ndef maximum(a: int, b: int) -> int:\n    if a > b:\n        return a\n    else:\n        return b\n```"], "prompt_tokens": [307], "completion_tokens": [220], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_309_maximum"}
{"name": "mbpp_310_string_to_tuple", "language": "Python3", "prompt": "from typing import List\n\ndef string_to_tuple(str1: str) -> List[str]:\n    \"\"\"\n\tWrite a function to convert a given string to a list of characters.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_310_string_to_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "string_to_tuple", "test": "def check(candidate):\n    \n    assert candidate('item1')==['i', 't', 'e', 'm', '1']\n    assert candidate('15.10')==['1', '5', '.', '1', '0']\n\ndef test_check():\n    check(string_to_tuple)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef string_to_list(str1: str) -> List[str]:\n    return list(str1)\n\n# Example usage:\nmy_string = \"hello\"\nprint(string_to_list(my_string))  # Output: ['h', 'e', 'l', 'l', 'o']\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef string_to_list(str1: str) -> List[str]:\n    return list(str1)\n\n# Example usage:\nmy_string = \"hello\"\nprint(string_to_list(my_string))  # Output: ['h', 'e', 'l', 'l', 'o']\n```"], "prompt_tokens": [477], "completion_tokens": [406], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_310_string_to_tuple"}
{"name": "mbpp_388_highest_Power_of_2", "language": "Python3", "prompt": "def highest_Power_of_2(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the highest power of 2 that is less than or equal to n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_388_highest_Power_of_2.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "highest_Power_of_2", "test": "def check(candidate):\n    \n    assert candidate(19)==16\n    assert candidate(32)==32\n\ndef test_check():\n    check(highest_Power_of_2)\n\ntest_check()\n", "source_codes": ["\ndef highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        return 0\n    power = 1\n    while (power << 1) <= n:\n        power <<= 1\n    return power\n\n# Example usage:\nprint(highest_Power_of_2(10))  # Output: 8\nprint(highest_Power_of_2(17))  # Output: 16\nprint(highest_Power_of_2(32))  # Output: 32\n\n\n"], "responses": ["```python\ndef highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        return 0\n    power = 1\n    while (power << 1) <= n:\n        power <<= 1\n    return power\n\n# Example usage:\nprint(highest_Power_of_2(10))  # Output: 8\nprint(highest_Power_of_2(17))  # Output: 16\nprint(highest_Power_of_2(32))  # Output: 32\n```"], "prompt_tokens": [496], "completion_tokens": [470], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_388_highest_Power_of_2"}
{"name": "mbpp_389_find_lucas", "language": "Python3", "prompt": "def find_lucas(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the n'th lucas number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_lucas", "test": "def check(candidate):\n    \n    assert candidate(4)==7\n    assert candidate(3)==4\n\ndef test_check():\n    check(find_lucas)\n\ntest_check()\n", "source_codes": ["\ndef find_lucas(n: int, memo=None) -> int:\n    if memo is None:\n        memo = {0: 2, 1: 1}\n    if n not in memo:\n        memo[n] = find_lucas(n - 1, memo) + find_lucas(n - 2, memo)\n    return memo[n]\n\n# Example usage:\nprint(find_lucas(5))  # Output: 11\n\n\n"], "responses": ["```python\ndef find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    \n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b\n\n# Example usage:\nprint(find_lucas(5))  # Output: 11\n```\n\n```python\ndef find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n\n# Example usage:\nprint(find_lucas(5))  # Output: 11\n```\n\n```python\ndef find_lucas(n: int, memo=None) -> int:\n    if memo is None:\n        memo = {0: 2, 1: 1}\n    if n not in memo:\n        memo[n] = find_lucas(n - 1, memo) + find_lucas(n - 2, memo)\n    return memo[n]\n\n# Example usage:\nprint(find_lucas(5))  # Output: 11\n```"], "prompt_tokens": [607], "completion_tokens": [760], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_389_find_lucas"}
{"name": "mbpp_390_add_string", "language": "Python3", "prompt": "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    \"\"\"\n\tWrite a function to apply a given format string to all of the elements in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_390_add_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_string", "test": "def check(candidate):\n    \n    assert candidate(['a', 'b', 'c', 'd'], 'python{0}')==['pythona', 'pythonb', 'pythonc', 'pythond']\n    assert candidate([5, 6, 7, 8], 'string{0}')==['string5', 'string6', 'string7', 'string8']\n\ndef test_check():\n    check(add_string)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    formatted_list = []\n    for element in list_:\n        formatted_element = string.format(element)\n        formatted_list.append(formatted_element)\n    return formatted_list\n\n# Example usage:\nmy_list = [1, 2, 3]\nformat_string = \"Number: {}\"\nformatted_my_list = add_string(my_list, format_string)\nprint(formatted_my_list)  # Output: ['Number: 1', 'Number: 2', 'Number: 3']\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    formatted_list = []\n    for element in list_:\n        formatted_element = string.format(element)\n        formatted_list.append(formatted_element)\n    return formatted_list\n\n# Example usage:\nmy_list = [1, 2, 3]\nformat_string = \"Number: {}\"\nformatted_my_list = add_string(my_list, format_string)\nprint(formatted_my_list)  # Output: ['Number: 1', 'Number: 2', 'Number: 3']\n```"], "prompt_tokens": [580], "completion_tokens": [551], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_390_add_string"}
{"name": "mbpp_391_convert_list_dictionary", "language": "Python3", "prompt": "from typing import List, Dict\n\ndef convert_list_dictionary(l1: List[str], l2: List[str], l3: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    \"\"\"\n\tWrite a function to convert more than one list to nested dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_391_convert_list_dictionary.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "convert_list_dictionary", "test": "def check(candidate):\n    assert candidate(['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92])==[{ 'S001': { 'Adina Park': 85 } }, { 'S002': { 'Leyton Marsh': 98 } }, { 'S003': { 'Duncan Boyle': 89 } }, { 'S004': { 'Saim Richards': 92 } }]\n    assert candidate(['abc', 'def', 'ghi', 'jkl'], ['python', 'program', 'language', 'programs'], [100, 200, 300, 400])==[{ 'abc': { 'python': 100 } }, { 'def': { 'program': 200 } }, { 'ghi': { 'language': 300 } }, { 'jkl': { 'programs': 400 } }]\n    assert candidate(['A1', 'A2', 'A3', 'A4'], ['java', 'C', 'C++', 'DBMS'], [10, 20, 30, 40])==[{ 'A1': { 'java': 10 } }, { 'A2': { 'C': 20 } }, { 'A3': { 'C++': 30 } }, { 'A4': { 'DBMS': 40 } }]\n\ndef test_check():\n    check(convert_list_dictionary)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Dict\n\ndef convert_list_dictionary(l1: List[str], l2: List[str], l3: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    if len(l3) != len(l1) * len(l2):\n        raise ValueError(\"The length of l3 must be equal to the product of the lengths of l1 and l2.\")\n\n    nested_dicts = []\n    l3_index = 0\n\n    for key1 in l1:\n        inner_dict = {}\n        for key2 in l2:\n            if l3_index >= len(l3):\n                raise IndexError(\"Index out of range for l3.\")\n            inner_dict[key2] = l3[l3_index]\n            l3_index += 1\n        nested_dicts.append({key1: inner_dict})\n\n    return nested_dicts\n\n\n"], "responses": ["```python\nfrom typing import List, Dict\n\ndef convert_list_dictionary(l1: List[str], l2: List[str], l3: List[int]) -> List[Dict[str, Dict[str, int]]]:\n    if len(l3) != len(l1) * len(l2):\n        raise ValueError(\"The length of l3 must be equal to the product of the lengths of l1 and l2.\")\n\n    nested_dicts = []\n    l3_index = 0\n\n    for key1 in l1:\n        inner_dict = {}\n        for key2 in l2:\n            if l3_index >= len(l3):\n                raise IndexError(\"Index out of range for l3.\")\n            inner_dict[key2] = l3[l3_index]\n            l3_index += 1\n        nested_dicts.append({key1: inner_dict})\n\n    return nested_dicts\n```"], "prompt_tokens": [790], "completion_tokens": [790], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_391_convert_list_dictionary"}
{"name": "mbpp_392_get_max_sum", "language": "Python3", "prompt": "def get_max_sum(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_392_get_max_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_max_sum", "test": "def check(candidate):\n    \n    assert candidate(10)==12\n    assert candidate(2)==2\n\ndef test_check():\n    check(get_max_sum)\n\ntest_check()\n", "source_codes": ["\ndef get_max_sum(n: int, memo=None) -> int:\n    if memo is None:\n        memo = {}\n    if n in memo:\n        return memo[n]\n    if n <= 1:\n        return n\n    max_sum = max(\n        get_max_sum(n // 2, memo) +\n        get_max_sum(n // 3, memo) +\n        get_max_sum(n // 4, memo) +\n        get_max_sum(n // 5, memo),\n        n\n    )\n    memo[n] = max_sum\n    return max_sum\n\n# Example usage:\nprint(get_max_sum(10))  # Should return the maximum sum for n = 10\n\n\n"], "responses": ["```python\ndef get_max_sum(n: int, memo=None) -> int:\n    if memo is None:\n        memo = {}\n    if n in memo:\n        return memo[n]\n    if n <= 1:\n        return n\n    max_sum = max(\n        get_max_sum(n // 2, memo) +\n        get_max_sum(n // 3, memo) +\n        get_max_sum(n // 4, memo) +\n        get_max_sum(n // 5, memo),\n        n\n    )\n    memo[n] = max_sum\n    return max_sum\n\n# Example usage:\nprint(get_max_sum(10))  # Should return the maximum sum for n = 10\n```"], "prompt_tokens": [739], "completion_tokens": [699], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_392_get_max_sum"}
{"name": "mbpp_393_max_length_list", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_length_list(input_list: List[List[int]]) -> Tuple[int, List[int]]:\n    \"\"\"\n\tWrite a function to find the list with maximum length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_393_max_length_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_length_list", "test": "def check(candidate):\n    \n    assert candidate([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])==(5, [1, 2, 3, 4, 5])\n    assert candidate([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]])==(4, [6, 7, 8, 9])\n\ndef test_check():\n    check(max_length_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_length_list(input_list: List[List[int]]) -> Tuple[int, List[int]]:\n    max_len = 0\n    max_list = []\n\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n\n    return max_len, max_list\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_length_list(input_list: List[List[int]]) -> Tuple[int, List[int]]:\n    max_len = 0\n    max_list = []\n\n    for lst in input_list:\n        if len(lst) > max_len:\n            max_len = len(lst)\n            max_list = lst\n\n    return max_len, max_list\n```"], "prompt_tokens": [503], "completion_tokens": [438], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_393_max_length_list"}
{"name": "mbpp_394_check_distinct", "language": "Python3", "prompt": "from typing import List\n\ndef check_distinct(test_tup: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check if given list contains no duplicates.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_394_check_distinct.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_distinct", "test": "def check(candidate):\n    \n    assert candidate([1, 4, 5, 6])==True\n    assert candidate([2, 3, 4, 5, 6])==True\n\ndef test_check():\n    check(check_distinct)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef check_distinct(test_tup: List[int]) -> bool:\n    unique_elements = set(test_tup)\n    return len(unique_elements) == len(test_tup)\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5]\nprint(check_distinct(my_list))  # Output: True\n\nmy_list_with_duplicates = [1, 2, 3, 3, 4, 5]\nprint(check_distinct(my_list_with_duplicates))  # Output: False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_distinct(test_tup: List[int]) -> bool:\n    unique_elements = set(test_tup)\n    return len(unique_elements) == len(test_tup)\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5]\nprint(check_distinct(my_list))  # Output: True\n\nmy_list_with_duplicates = [1, 2, 3, 3, 4, 5]\nprint(check_distinct(my_list_with_duplicates))  # Output: False\n```"], "prompt_tokens": [410], "completion_tokens": [394], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_394_check_distinct"}
{"name": "mbpp_395_first_non_repeating_character", "language": "Python3", "prompt": "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    \"\"\"\n\tWrite a python function to find the first non-repeated character in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "first_non_repeating_character", "test": "def check(candidate):\n    \n    assert candidate('abc')=='a'\n    assert candidate('ababc')=='c'\n\ndef test_check():\n    check(first_non_repeating_character)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n\n# Example usage:\nprint(first_non_repeating_character(\"aabccbd\"))  # Output should be 'd'\nprint(first_non_repeating_character(\"aabbcc\"))   # Output should be None\n\n\n"], "responses": ["```python\nfrom typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    \n    for char in str1:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n\n# Example usage:\nprint(first_non_repeating_character(\"aabccbd\"))  # Output should be 'd'\nprint(first_non_repeating_character(\"aabbcc\"))   # Output should be None\n```"], "prompt_tokens": [460], "completion_tokens": [446], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_395_first_non_repeating_character"}
{"name": "mbpp_396_check_char", "language": "Python3", "prompt": "def check_char(string: str) -> str:\n    \"\"\"\n\tWrite a function to check whether the given string starts and ends with the same character or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_396_check_char.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_char", "test": "def check(candidate):\n    \n    assert candidate('a')=='Valid'\n    assert candidate('abcd')=='Invalid'\n\ndef test_check():\n    check(check_char)\n\ntest_check()\n", "source_codes": ["\ndef check_char(string: str) -> str:\n    if not string:\n        return \"The string is empty.\"\n    first_char = string[0]\n    last_char = string[-1]\n    if first_char == last_char:\n        return \"The string starts and ends with the same character.\"\n    else:\n        return \"The string does not start and end with the same character.\"\n\nprint(check_char(\"hello\"))\nprint(check_char(\"radar\"))\nprint(check_char(\"\"))\n\n\n"], "responses": ["```python\ndef check_char(string: str) -> str:\n    if not string:\n        return \"The string is empty.\"\n    first_char = string[0]\n    last_char = string[-1]\n    if first_char == last_char:\n        return \"The string starts and ends with the same character.\"\n    else:\n        return \"The string does not start and end with the same character.\"\n\nprint(check_char(\"hello\"))\nprint(check_char(\"radar\"))\nprint(check_char(\"\"))\n```"], "prompt_tokens": [487], "completion_tokens": [457], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_396_check_char"}
{"name": "mbpp_397_median_numbers", "language": "Python3", "prompt": "def median_numbers(a: int, b: int, c: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of three numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_397_median_numbers.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "median_numbers", "test": "def check(candidate):\n    \n    assert candidate(20, 10, 30)==20.0\n    assert candidate(15, 45, 75)==45.0\n\ndef test_check():\n    check(median_numbers)\n\ntest_check()\n", "source_codes": ["\ndef median_numbers(a: int, b: int, c: int) -> float:\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median\n\n# Example usage:\nprint(median_numbers(3, 1, 2))  # Output: 2\n\n\n"], "responses": ["```python\ndef median_numbers(a: int, b: int, c: int) -> float:\n    numbers = [a, b, c]\n    numbers.sort()\n    median = numbers[1]\n    return median\n\n# Example usage:\nprint(median_numbers(3, 1, 2))  # Output: 2\n```"], "prompt_tokens": [360], "completion_tokens": [302], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_397_median_numbers"}
{"name": "mbpp_398_sum_of_digits", "language": "Python3", "prompt": "from typing import List, Any\n\ndef sum_of_digits(nums: List[Any]) -> int:\n    \"\"\"\n\tWrite a function to compute the sum of digits of each number of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_of_digits", "test": "def check(candidate):\n    \n    assert candidate([[10, 20, 4, 5, 'b', 70, 'a']])==19\n    assert candidate([10, 20, -4, 5, -70])==19\n\ndef test_check():\n    check(sum_of_digits)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef sum_of_digits(nums: List[Any]) -> int:\n    total_sum = 0\n    for num in nums:\n        if isinstance(num, (int, float)):\n            str_num = str(abs(num))\n            for char in str_num:\n                if char.isdigit():\n                    total_sum += int(char)\n    return total_sum\n\n# Example usage:\nprint(sum_of_digits([123, 456, 78.9]))  # Output: 45\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef sum_of_digits(nums: List[Any]) -> int:\n    total_sum = 0\n    for num in nums:\n        if isinstance(num, (int, float)):\n            str_num = str(abs(num))\n            for char in str_num:\n                if char.isdigit():\n                    total_sum += int(char)\n    return total_sum\n\n# Example usage:\nprint(sum_of_digits([123, 456, 78.9]))  # Output: 45\n```"], "prompt_tokens": [583], "completion_tokens": [544], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_398_sum_of_digits"}
{"name": "mbpp_399_bitwise_xor", "language": "Python3", "prompt": "from typing import Tuple\n\ndef bitwise_xor(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to perform the mathematical bitwise xor operation across the given tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_399_bitwise_xor.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "bitwise_xor", "test": "def check(candidate):\n    \n    assert candidate((11, 5, 7, 10), (6, 3, 4, 4))==(13, 6, 3, 14)\n    assert candidate((12, 6, 8, 11), (7, 4, 5, 6))==(11, 2, 13, 13)\n\ndef test_check():\n    check(bitwise_xor)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef bitwise_xor(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n\n# Example usage:\ntup1 = (1, 2, 3, 4)\ntup2 = (4, 3, 2, 1)\nprint(bitwise_xor(tup1, tup2))  # Output: (5, 1, 1, 5)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef bitwise_xor(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    return tuple(a ^ b for a, b in zip(test_tup1, test_tup2))\n\n# Example usage:\ntup1 = (1, 2, 3, 4)\ntup2 = (4, 3, 2, 1)\nprint(bitwise_xor(tup1, tup2))  # Output: (5, 1, 1, 5)\n```"], "prompt_tokens": [503], "completion_tokens": [445], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_399_bitwise_xor"}
{"name": "mbpp_400_extract_freq", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef extract_freq(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to extract the number of unique tuples in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_400_extract_freq.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_freq", "test": "def check(candidate):\n    \n    assert candidate([(4, 15), (2, 3), (5, 4), (6, 7)])==4\n    assert candidate([(5, 16), (2, 3), (6, 5), (6, 9)])==4\n\ndef test_check():\n    check(extract_freq)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef extract_freq(test_list: List[Tuple[int, int]]) -> int:\n    unique_tuples = set(test_list)\n    return len(unique_tuples)\n\n# Example usage:\ntest_list = [(1, 2), (3, 4), (1, 2), (5, 6), (3, 4), (1, 2)]\nunique_count = extract_freq(test_list)\nprint(f\"The number of unique tuples is: {unique_count}\")\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef extract_freq(test_list: List[Tuple[int, int]]) -> int:\n    unique_tuples = set(test_list)\n    return len(unique_tuples)\n\n# Example usage:\ntest_list = [(1, 2), (3, 4), (1, 2), (5, 6), (3, 4), (1, 2)]\nunique_count = extract_freq(test_list)\nprint(f\"The number of unique tuples is: {unique_count}\")\n```"], "prompt_tokens": [417], "completion_tokens": [375], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_400_extract_freq"}
{"name": "mbpp_401_add_nested_tuples", "language": "Python3", "prompt": "from typing import List\n\ndef add_nested_tuples(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to perform index wise addition of list elements in the given two nested lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_401_add_nested_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_nested_tuples", "test": "def check(candidate):\n    \n    assert candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])==[[9, 12], [9, 16], [5, 12], [10, 15]]\n    assert candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])==[[11, 14], [11, 18], [7, 14], [12, 17]]\n\ndef test_check():\n    check(add_nested_tuples)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef add_nested_tuples(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    result = []\n    for list1, list2 in zip(test_tup1, test_tup2):\n        added_list = [a + b for a, b in zip(list1, list2)]\n        result.append(added_list)\n    return result\n\n# Example usage:\ntest_tup1 = [[1, 2], [3, 4], [5, 6]]\ntest_tup2 = [[7, 8], [9, 10], [11, 12]]\nprint(add_nested_tuples(test_tup1, test_tup2))  # Output: [[8, 10], [12, 14], [16, 18]]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef add_nested_tuples(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    result = []\n    for list1, list2 in zip(test_tup1, test_tup2):\n        added_list = [a + b for a, b in zip(list1, list2)]\n        result.append(added_list)\n    return result\n\n# Example usage:\ntest_tup1 = [[1, 2], [3, 4], [5, 6]]\ntest_tup2 = [[7, 8], [9, 10], [11, 12]]\nprint(add_nested_tuples(test_tup1, test_tup2))  # Output: [[8, 10], [12, 14], [16, 18]]\n```"], "prompt_tokens": [495], "completion_tokens": [500], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_401_add_nested_tuples"}
{"name": "mbpp_404_minimum", "language": "Python3", "prompt": "def minimum(a: int, b: int) -> int:\n    \"\"\"\n\tWrite a python function to find the minimum of two numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_404_minimum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "minimum", "test": "def check(candidate):\n    \n    assert candidate(-5, -4)==-5\n    assert candidate(0, 0)==0\n\ndef test_check():\n    check(minimum)\n\ntest_check()\n", "source_codes": ["\ndef minimum(a: int, b: int) -> int:\n    return min(a, b)\n\n\n"], "responses": ["```python\ndef minimum(a: int, b: int) -> int:\n    return min(a, b)\n```"], "prompt_tokens": [305], "completion_tokens": [208], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_404_minimum"}
{"name": "mbpp_405_check_tuplex", "language": "Python3", "prompt": "from typing import List, Union, Any\n\ndef check_tuplex(tuplex: List[Union[str, int]], tuple1: Any) -> bool:\n    \"\"\"\n\tWrite a function to check whether an element exists within a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_405_check_tuplex.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_tuplex", "test": "def check(candidate):\n    \n    assert candidate(['w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'], '5')==False\n    assert candidate(['w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'], 3)==True\n\ndef test_check():\n    check(check_tuplex)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple, Union, Any\n\ndef check_tuplex(tuplex: Tuple[Union[str, int], ...], element: Any) -> bool:\n    return element in tuplex\n\n# Example usage:\nmy_tuple = (1, \"hello\", 3, \"world\")\nprint(check_tuplex(my_tuple, \"hello\"))  # Output: True\nprint(check_tuplex(my_tuple, 2))        # Output: False\n\n\n"], "responses": ["```python\nfrom typing import Tuple, Union, Any\n\ndef check_tuplex(tuplex: Tuple[Union[str, int], ...], element: Any) -> bool:\n    return element in tuplex\n\n# Example usage:\nmy_tuple = (1, \"hello\", 3, \"world\")\nprint(check_tuplex(my_tuple, \"hello\"))  # Output: True\nprint(check_tuplex(my_tuple, 2))        # Output: False\n```"], "prompt_tokens": [606], "completion_tokens": [541], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_405_check_tuplex"}
{"name": "mbpp_406_find_Parity", "language": "Python3", "prompt": "def find_Parity(x: int) -> bool:\n    \"\"\"\n\tWrite a python function to find whether the parity of a given number is odd.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_406_find_Parity.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Parity", "test": "def check(candidate):\n    \n    assert candidate(7)==True\n    assert candidate(10)==False\n\ndef test_check():\n    check(find_Parity)\n\ntest_check()\n", "source_codes": ["\ndef find_Parity(x: int) -> bool:\n    count = 0\n    while x:\n        count += x & 1\n        x >>= 1\n    return count % 2 != 0\n\n# Example usage:\nnumber = 7\nprint(find_Parity(number))  # Output: True\n\n\n"], "responses": ["```python\ndef find_Parity(x: int) -> bool:\n    count = 0\n    while x:\n        count += x & 1\n        x >>= 1\n    return count % 2 != 0\n\n# Example usage:\nnumber = 7\nprint(find_Parity(number))  # Output: True\n```"], "prompt_tokens": [475], "completion_tokens": [420], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_406_find_Parity"}
{"name": "mbpp_407_rearrange_bigger", "language": "Python3", "prompt": "from typing import Any\n\ndef rearrange_bigger(n: int) -> Any:\n    \"\"\"\n\tWrite a function to create the next bigger number by rearranging the digits of a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rearrange_bigger", "test": "def check(candidate):\n    \n    assert candidate(10)==False\n    assert candidate(102)==120\n\ndef test_check():\n    check(rearrange_bigger)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Any\n\ndef rearrange_bigger(n: int) -> Any:\n    digits = list(str(n))\n    for i in range(len(digits) - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        return -1\n    for j in range(len(digits) - 1, i, -1):\n        if digits[j] > digits[i]:\n            digits[i], digits[j] = digits[j], digits[i]\n            break\n    digits[i + 1:] = sorted(digits[i + 1:])\n    return int(''.join(digits))\n\n\n"], "responses": ["```python\nfrom typing import Any\n\ndef rearrange_bigger(n: int) -> Any:\n    digits = list(str(n))\n    for i in range(len(digits) - 2, -1, -1):\n        if digits[i] < digits[i + 1]:\n            break\n    else:\n        return -1\n    for j in range(len(digits) - 1, i, -1):\n        if digits[j] > digits[i]:\n            digits[i], digits[j] = digits[j], digits[i]\n            break\n    digits[i + 1:] = sorted(digits[i + 1:])\n    return int(''.join(digits))\n```"], "prompt_tokens": [638], "completion_tokens": [630], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_407_rearrange_bigger"}
{"name": "mbpp_408_k_smallest_pairs", "language": "Python3", "prompt": "from typing import List\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_408_k_smallest_pairs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "k_smallest_pairs", "test": "def check(candidate):\n    \n    assert candidate([1, 3, 7], [2, 4, 6], 1)==[[1, 2]]\n    assert candidate([1, 3, 7], [2, 4, 6], 7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n\ndef test_check():\n    check(k_smallest_pairs)\n\ntest_check()\n", "source_codes": ["\nimport heapq\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    if not nums1 or not nums2 or k <= 0:\n        return []\n\n    min_heap = []\n    for i in range(min(k, len(nums2))):\n        heapq.heappush(min_heap, (nums1[0] + nums2[i], 0, i))\n\n    result = []\n    while k > 0 and min_heap:\n        _, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        k -= 1\n        if i + 1 < len(nums1):\n            heapq.heappush(min_heap, (nums1[i + 1] + nums2[j], i + 1, j))\n\n    return result\n\n\n"], "responses": ["```python\nimport heapq\n\ndef k_smallest_pairs(nums1: List[int], nums2: List[int], k: int) -> List[List[int]]:\n    if not nums1 or not nums2 or k <= 0:\n        return []\n\n    min_heap = []\n    for i in range(min(k, len(nums2))):\n        heapq.heappush(min_heap, (nums1[0] + nums2[i], 0, i))\n\n    result = []\n    while k > 0 and min_heap:\n        _, i, j = heapq.heappop(min_heap)\n        result.append([nums1[i], nums2[j]])\n        k -= 1\n        if i + 1 < len(nums1):\n            heapq.heappush(min_heap, (nums1[i + 1] + nums2[j], i + 1, j))\n\n    return result\n```"], "prompt_tokens": [763], "completion_tokens": [756], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_408_k_smallest_pairs"}
{"name": "mbpp_409_min_product_tuple", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the minimum product from the pairs of tuples within a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_409_min_product_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_product_tuple", "test": "def check(candidate):\n    \n    assert candidate([(10, 20), (15, 2), (5, 10)])==30\n    assert candidate([(11, 44), (10, 15), (20, 5), (12, 9)])==100\n\ndef test_check():\n    check(min_product_tuple)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    min_product = None\n    for tuple_pair in list1:\n        product = tuple_pair[0] * tuple_pair[1]\n        if min_product is None or product < min_product:\n            min_product = product\n    if min_product is None:\n        return 0\n    return min_product\n\n# Example usage:\nlist_of_tuples = [(1, 2), (2, -3), (4, 5), (-1, -6)]\nprint(min_product_tuple(list_of_tuples))\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    min_product = None\n    for tuple_pair in list1:\n        product = tuple_pair[0] * tuple_pair[1]\n        if min_product is None or product < min_product:\n            min_product = product\n    if min_product is None:\n        return 0\n    return min_product\n\n# Example usage:\nlist_of_tuples = [(1, 2), (2, -3), (4, 5), (-1, -6)]\nprint(min_product_tuple(list_of_tuples))\n```"], "prompt_tokens": [535], "completion_tokens": [511], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_409_min_product_tuple"}
{"name": "mbpp_410_min_val", "language": "Python3", "prompt": "from typing import List, Union\n\ndef min_val(listval: List[Union[str, int]]) -> int:\n    \"\"\"\n\tWrite a function to find the minimum value in a given heterogeneous list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_410_min_val.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_val", "test": "def check(candidate):\n    \n    assert candidate(['Python', 15, 20, 25])==15\n    assert candidate(['Python', 30, 20, 40, 50, 'version'])==20\n\ndef test_check():\n    check(min_val)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Union\n\ndef min_val(listval: List[Union[str, int]]) -> int:\n    int_values = [val for val in listval if isinstance(val, int)]\n    if not int_values:\n        raise ValueError(\"The list does not contain any integer values.\")\n    return min(int_values)\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef min_val(listval: List[Union[str, int]]) -> int:\n    int_values = [val for val in listval if isinstance(val, int)]\n    if not int_values:\n        raise ValueError(\"The list does not contain any integer values.\")\n    return min(int_values)\n```"], "prompt_tokens": [453], "completion_tokens": [377], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_410_min_val"}
{"name": "mbpp_411_snake_to_camel", "language": "Python3", "prompt": "def snake_to_camel(word: str) -> str:\n    \"\"\"\n\tWrite a function to convert the given snake case string to camel case string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "snake_to_camel", "test": "def check(candidate):\n    \n    assert candidate('google_pixel')=='GooglePixel'\n    assert candidate('apple_watch')=='AppleWatch'\n\ndef test_check():\n    check(snake_to_camel)\n\ntest_check()\n", "source_codes": ["\ndef snake_to_camel(word: str) -> str:\n    words = word.split('_')\n    camel_case_word = words[0] + ''.join(word.capitalize() for word in words[1:])\n    return camel_case_word\n\n# Example usage:\nsnake_str = \"this_is_a_snake_case_string\"\ncamel_str = snake_to_camel(snake_str)\nprint(camel_str)  # Output: \"thisIsASnakeCaseString\"\n\n\n"], "responses": ["```python\ndef snake_to_camel(word: str) -> str:\n    words = word.split('_')\n    camel_case_word = words[0] + ''.join(word.capitalize() for word in words[1:])\n    return camel_case_word\n\n# Example usage:\nsnake_str = \"this_is_a_snake_case_string\"\ncamel_str = snake_to_camel(snake_str)\nprint(camel_str)  # Output: \"thisIsASnakeCaseString\"\n```"], "prompt_tokens": [383], "completion_tokens": [354], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_411_snake_to_camel"}
{"name": "mbpp_412_remove_odd", "language": "Python3", "prompt": "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to remove odd numbers from a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_412_remove_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_odd", "test": "def check(candidate):\n    \n    assert candidate([2, 4, 6])==[2, 4, 6]\n    assert candidate([10, 20, 3])==[10, 20]\n\ndef test_check():\n    check(remove_odd)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    even_numbers = []\n    for number in l:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6]\nprint(remove_odd(my_list))  # Output: [2, 4, 6]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    even_numbers = []\n    for number in l:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6]\nprint(remove_odd(my_list))  # Output: [2, 4, 6]\n```"], "prompt_tokens": [462], "completion_tokens": [428], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_412_remove_odd"}
{"name": "mbpp_413_extract_nth_element", "language": "Python3", "prompt": "from typing import List, Tuple, Any\n\ndef extract_nth_element(list1: List[Tuple[str, int, int]], n: int) -> List[Any]:\n    \"\"\"\n\tWrite a function to extract the nth element from a given list of tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_413_extract_nth_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_nth_element", "test": "def check(candidate):\n    \n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)==[99, 96, 94, 98]\n    assert candidate([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)==[98, 97, 91, 94]\n\ndef test_check():\n    check(extract_nth_element)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple, Any\n\ndef extract_nth_element(list_of_tuples: List[Tuple[Any, ...]], n: int) -> List[Any]:\n    nth_elements = []\n    for a_tuple in list_of_tuples:\n        if n < len(a_tuple):\n            nth_elements.append(a_tuple[n])\n        else:\n            raise IndexError(f\"Index {n} is out of range for tuple {a_tuple}\")\n    return nth_elements\n\n# Example usage:\nlist_of_tuples = [(\"apple\", 2, 3), (\"banana\", 5, 1), (\"cherry\", 7, 9)]\nn = 1\nprint(extract_nth_element(list_of_tuples, n))  # Output: [2, 5, 7]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple, Any\n\ndef extract_nth_element(list_of_tuples: List[Tuple[Any, ...]], n: int) -> List[Any]:\n    nth_elements = []\n    for a_tuple in list_of_tuples:\n        if n < len(a_tuple):\n            nth_elements.append(a_tuple[n])\n        else:\n            raise IndexError(f\"Index {n} is out of range for tuple {a_tuple}\")\n    return nth_elements\n\n# Example usage:\nlist_of_tuples = [(\"apple\", 2, 3), (\"banana\", 5, 1), (\"cherry\", 7, 9)]\nn = 1\nprint(extract_nth_element(list_of_tuples, n))  # Output: [2, 5, 7]\n```"], "prompt_tokens": [596], "completion_tokens": [587], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_413_extract_nth_element"}
{"name": "mbpp_414_overlapping", "language": "Python3", "prompt": "from typing import List\n\ndef overlapping(list1: List[int], list2: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether any value in a sequence exists in a sequence or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_414_overlapping.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "overlapping", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3], [4, 5, 6])==False\n    assert candidate([1, 4, 5], [1, 4, 5])==True\n\ndef test_check():\n    check(overlapping)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef overlapping(list1: List[int], list2: List[int]) -> bool:\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 6, 7, 8, 9]\nprint(overlapping(list1, list2))  # Output: True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef overlapping(list1: List[int], list2: List[int]) -> bool:\n    return bool(set(list1) & set(list2))\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 6, 7, 8, 9]\nprint(overlapping(list1, list2))  # Output: True\n```\n\n```python\nfrom typing import List\n\ndef overlapping(list1: List[int], list2: List[int]) -> bool:\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n\n# Example usage:\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [5, 6, 7, 8, 9]\nprint(overlapping(list1, list2))  # Output: True\n```"], "prompt_tokens": [561], "completion_tokens": [607], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_414_overlapping"}
{"name": "mbpp_415_max_Product", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"\n\tWrite a python function to find a pair with highest product from a given array of integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_415_max_Product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_Product", "test": "def check(candidate):\n    \n    assert candidate([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\n    assert candidate([1, 2, 3])==(2, 3)\n\ndef test_check():\n    check(max_Product)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    arr.sort()\n    product1 = arr[-1] * arr[-2]\n    product2 = arr[0] * arr[1]\n    if product1 > product2:\n        return (arr[-1], arr[-2])\n    else:\n        return (arr[0], arr[1])\n\n# Example usage:\narr = [1, 10, 3, 5, 6, -20, -100]\nprint(max_Product(arr))\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    arr.sort()\n    product1 = arr[-1] * arr[-2]\n    product2 = arr[0] * arr[1]\n    if product1 > product2:\n        return (arr[-1], arr[-2])\n    else:\n        return (arr[0], arr[1])\n\n# Example usage:\narr = [1, 10, 3, 5, 6, -20, -100]\nprint(max_Product(arr))\n```"], "prompt_tokens": [620], "completion_tokens": [591], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_415_max_Product"}
{"name": "mbpp_417_group_tuples", "language": "Python3", "prompt": "from typing import List\n\ndef group_tuples(Input: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to find common first element in given list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_417_group_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "group_tuples", "test": "def check(candidate):\n    \n    assert candidate([['a', 'b'], ['a', 'c'], ['d', 'e']])==[['a', 'b', 'c'], ['d', 'e']]\n    assert candidate([['f', 'g'], ['f', 'g'], ['h', 'i']])==[['f', 'g', 'g'], ['h', 'i']]\n\ndef test_check():\n    check(group_tuples)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef group_tuples(input_list: List[List[str]]) -> List[List[str]]:\n    groups = {}\n    for item in input_list:\n        if item[0] in groups:\n            groups[item[0]].append(item)\n        else:\n            groups[item[0]] = [item]\n    \n    grouped_lists = list(groups.values())\n    return grouped_lists\n\n# Example usage:\ninput_data = [['a', '1'], ['b', '2'], ['a', '3'], ['b', '4'], ['c', '5']]\ngrouped_data = group_tuples(input_data)\nprint(grouped_data)  # Output: [[['a', '1'], ['a', '3']], [['b', '2'], ['b', '4']], [['c', '5']]]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef group_tuples(input_list: List[List[str]]) -> List[List[str]]:\n    groups = {}\n    for item in input_list:\n        if item[0] in groups:\n            groups[item[0]].append(item)\n        else:\n            groups[item[0]] = [item]\n    \n    grouped_lists = list(groups.values())\n    return grouped_lists\n\n# Example usage:\ninput_data = [['a', '1'], ['b', '2'], ['a', '3'], ['b', '4'], ['c', '5']]\ngrouped_data = group_tuples(input_data)\nprint(grouped_data)  # Output: [[['a', '1'], ['a', '3']], [['b', '2'], ['b', '4']], [['c', '5']]]\n```"], "prompt_tokens": [554], "completion_tokens": [583], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_417_group_tuples"}
{"name": "mbpp_418_Find_Max", "language": "Python3", "prompt": "from typing import List, Any\n\ndef Find_Max(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n\tWrite a python function to find the element of a list having maximum length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Max", "test": "def check(candidate):\n    \n    assert candidate([[1], [1, 2], [1, 2, 3]])==[1, 2, 3]\n    assert candidate([[1, 1], [1, 2, 3], [1, 5, 6, 1]])==[1, 5, 6, 1]\n\ndef test_check():\n    check(Find_Max)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef Find_Max(lst: List[List[Any]]) -> List[Any]:\n    max_length = 0\n    max_element = []\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nprint(Find_Max(list_of_lists))  # Output: [6, 7, 8, 9]\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef Find_Max(lst: List[List[Any]]) -> List[Any]:\n    max_length = 0\n    max_element = []\n\n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element\n\n# Example usage:\nlist_of_lists = [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]]\nprint(Find_Max(list_of_lists))  # Output: [6, 7, 8, 9]\n```"], "prompt_tokens": [460], "completion_tokens": [450], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_418_Find_Max"}
{"name": "mbpp_419_round_and_sum", "language": "Python3", "prompt": "from typing import List, Union\n\ndef round_and_sum(list1: List[Union[float, int]]) -> int:\n    \"\"\"\n\tWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_419_round_and_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "round_and_sum", "test": "def check(candidate):\n    \n    assert candidate([5, 2, 9, 24.3, 29])==345\n    assert candidate([25.0, 56.7, 89.2])==513\n\ndef test_check():\n    check(round_and_sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Union\n\ndef round_and_sum(list1: List[Union[float, int]]) -> int:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(list1)\n    return result\n\n# Example usage:\nnumbers = [1.2, 2.5, 3.7, 4.1]\nprint(round_and_sum(numbers))\n\n\n"], "responses": ["```python\nfrom typing import List, Union\n\ndef round_and_sum(list1: List[Union[float, int]]) -> int:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(list1)\n    return result\n\n# Example usage:\nnumbers = [1.2, 2.5, 3.7, 4.1]\nprint(round_and_sum(numbers))\n```"], "prompt_tokens": [488], "completion_tokens": [414], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_419_round_and_sum"}
{"name": "mbpp_420_cube_Sum", "language": "Python3", "prompt": "def cube_Sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the cube sum of first n even natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_420_cube_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cube_Sum", "test": "def check(candidate):\n    \n    assert candidate(3)==288\n    assert candidate(4)==800\n\ndef test_check():\n    check(cube_Sum)\n\ntest_check()\n", "source_codes": ["\ndef cube_sum(n: int) -> int:\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        even_number = 2 * i\n        sum_of_cubes += even_number ** 3\n    return sum_of_cubes\n\n# Example usage:\nn = 3\nprint(cube_sum(n))\n\n\n"], "responses": ["```python\ndef cube_sum(n: int) -> int:\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        even_number = 2 * i\n        sum_of_cubes += even_number ** 3\n    return sum_of_cubes\n\n# Example usage:\nn = 3\nprint(cube_sum(n))\n```"], "prompt_tokens": [392], "completion_tokens": [344], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_420_cube_Sum"}
{"name": "mbpp_421_concatenate_tuple", "language": "Python3", "prompt": "from typing import Tuple\n\ndef concatenate_tuple(test_tup: Tuple[str, str, int, str]) -> str:\n    \"\"\"\n\tWrite a function to concatenate each element of tuple by the delimiter.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_421_concatenate_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "concatenate_tuple", "test": "def check(candidate):\n    \n    assert candidate(('QWE', 'is', 4, 'RTY'))=='QWE-is-4-RTY'\n    assert candidate(('ZEN', 'is', 4, 'OP'))=='ZEN-is-4-OP'\n\ndef test_check():\n    check(concatenate_tuple)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef concatenate_tuple(test_tup: Tuple[str, str, int, str], delimiter: str = '') -> str:\n    str_elements = (str(element) for element in test_tup)\n    concatenated_string = delimiter.join(str_elements)\n    return concatenated_string\n\n# Example usage:\ntest_tup = (\"Hello\", \"World\", 123, \"Python\")\nprint(concatenate_tuple(test_tup, delimiter='-'))  # Output: \"Hello-World-123-Python\"\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef concatenate_tuple(test_tup: Tuple[str, str, int, str], delimiter: str = '') -> str:\n    str_elements = (str(element) for element in test_tup)\n    concatenated_string = delimiter.join(str_elements)\n    return concatenated_string\n\n# Example usage:\ntest_tup = (\"Hello\", \"World\", 123, \"Python\")\nprint(concatenate_tuple(test_tup, delimiter='-'))  # Output: \"Hello-World-123-Python\"\n```"], "prompt_tokens": [467], "completion_tokens": [428], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_421_concatenate_tuple"}
{"name": "mbpp_422_find_Average_Of_Cube", "language": "Python3", "prompt": "def find_Average_Of_Cube(n: int) -> float:\n    \"\"\"\n\tWrite a python function to find the average of cubes of first n natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_422_find_Average_Of_Cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Average_Of_Cube", "test": "def check(candidate):\n    \n    assert candidate(3)==12\n    assert candidate(1)==1\n\ndef test_check():\n    check(find_Average_Of_Cube)\n\ntest_check()\n", "source_codes": ["\ndef find_Average_Of_Cube(n: int) -> float:\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    average = sum_of_cubes / n\n    return average\n\nn = 4\naverage = find_Average_Of_Cube(n)\nprint(f\"The average of the cubes of the first {n} natural numbers is {average}\")\n\n\n"], "responses": ["```python\ndef find_Average_Of_Cube(n: int) -> float:\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    average = sum_of_cubes / n\n    return average\n\nn = 4\naverage = find_Average_Of_Cube(n)\nprint(f\"The average of the cubes of the first {n} natural numbers is {average}\")\n```"], "prompt_tokens": [412], "completion_tokens": [370], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_422_find_Average_Of_Cube"}
{"name": "mbpp_424_extract_rear", "language": "Python3", "prompt": "from typing import Tuple, List\n\ndef extract_rear(test_tuple: Tuple[str, str, str]) -> List[str]:\n    \"\"\"\n\tWrite a function to extract only the rear index element of each string in the given tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_424_extract_rear.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_rear", "test": "def check(candidate):\n    \n    assert candidate(('Avenge', 'for', 'People'))==['e', 'r', 'e']\n    assert candidate(('Gotta', 'get', 'go'))==['a', 't', 'o']\n\ndef test_check():\n    check(extract_rear)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple, List\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [item[-1] for item in test_tuple]\n\n# Example usage:\nmy_tuple = (\"hello\", \"world\", \"python\", \"code\")\nprint(extract_rear(my_tuple))  # Output should be ['o', 'd', 'n', 'e']\n\n\n"], "responses": ["```python\nfrom typing import Tuple, List\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [item[-1] for item in test_tuple]\n\n# Example usage:\nmy_tuple = (\"hello\", \"world\", \"python\", \"code\")\nprint(extract_rear(my_tuple))  # Output should be ['o', 'd', 'n', 'e']\n```"], "prompt_tokens": [518], "completion_tokens": [445], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_424_extract_rear"}
{"name": "mbpp_425_count_element_in_list", "language": "Python3", "prompt": "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    \"\"\"\n\tWrite a function to count the number of sublists containing a particular element.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_425_count_element_in_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_element_in_list", "test": "def check(candidate):\n    \n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'A')==3\n    assert candidate([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'E')==1\n\ndef test_check():\n    check(count_element_in_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n\n# Example usage:\nnested_list = [[1, 2, 3], [4, 5, 6], [1, 7, 8], [9, 10]]\nelement_to_count = 1\nprint(count_element_in_list(nested_list, element_to_count))  # Output: 2\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n\n# Example usage:\nnested_list = [[1, 2, 3], [4, 5, 6], [1, 7, 8], [9, 10]]\nelement_to_count = 1\nprint(count_element_in_list(nested_list, element_to_count))  # Output: 2\n```"], "prompt_tokens": [465], "completion_tokens": [438], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_425_count_element_in_list"}
{"name": "mbpp_426_filter_oddnumbers", "language": "Python3", "prompt": "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to filter odd numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_426_filter_oddnumbers.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "filter_oddnumbers", "test": "def check(candidate):\n    \n    assert candidate([10, 20, 45, 67, 84, 93])==[45, 67, 93]\n    assert candidate([5, 7, 9, 8, 6, 4, 3])==[5, 7, 9, 3]\n\ndef test_check():\n    check(filter_oddnumbers)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    odd_numbers = [num for num in nums if num % 2 == 1]\n    return odd_numbers\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nodd_numbers = filter_oddnumbers(numbers)\nprint(odd_numbers)  # Output: [1, 3, 5, 7, 9]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    odd_numbers = [num for num in nums if num % 2 == 1]\n    return odd_numbers\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nodd_numbers = filter_oddnumbers(numbers)\nprint(odd_numbers)  # Output: [1, 3, 5, 7, 9]\n```"], "prompt_tokens": [424], "completion_tokens": [415], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_426_filter_oddnumbers"}
{"name": "mbpp_427_change_date_format", "language": "Python3", "prompt": "def change_date_format(dt: str) -> str:\n    \"\"\"\n\tWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_427_change_date_format.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "change_date_format", "test": "def check(candidate):\n    \n    assert candidate('2020-11-13')=='13-11-2020'\n    assert candidate('2021-04-26')=='26-04-2021'\n\ndef test_check():\n    check(change_date_format)\n\ntest_check()\n", "source_codes": ["\ndef change_date_format(dt: str) -> str:\n    parts = dt.split('-')\n    new_format = parts[2] + '-' + parts[1] + '-' + parts[0]\n    return new_format\n\n# Example usage:\ndate = \"2023-04-01\"\nprint(change_date_format(date))  # Output: \"01-04-2023\"\n\n\n"], "responses": ["```python\ndef change_date_format(dt: str) -> str:\n    parts = dt.split('-')\n    new_format = parts[2] + '-' + parts[1] + '-' + parts[0]\n    return new_format\n\n# Example usage:\ndate = \"2023-04-01\"\nprint(change_date_format(date))  # Output: \"01-04-2023\"\n```"], "prompt_tokens": [425], "completion_tokens": [377], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_427_change_date_format"}
{"name": "mbpp_428_shell_sort", "language": "Python3", "prompt": "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort the given array by using shell sort.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_428_shell_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "shell_sort", "test": "def check(candidate):\n    \n    assert candidate([24, 22, 39, 34, 87, 73, 68])==[22, 24, 34, 39, 68, 73, 87]\n    assert candidate([32, 30, 16, 96, 82, 83, 74])==[16, 30, 32, 74, 82, 83, 96]\n\ndef test_check():\n    check(shell_sort)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n\n    return my_list\n```"], "prompt_tokens": [690], "completion_tokens": [674], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_428_shell_sort"}
{"name": "mbpp_429_and_tuples", "language": "Python3", "prompt": "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to extract the elementwise and tuples from the given two tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_429_and_tuples.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "and_tuples", "test": "def check(candidate):\n    \n    assert candidate((1, 2, 3, 4), (5, 6, 7, 8))==(1, 2, 3, 0)\n    assert candidate((8, 9, 11, 12), (7, 13, 14, 17))==(0, 9, 10, 0)\n\ndef test_check():\n    check(and_tuples)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    result = tuple(a & b for a, b in zip(test_tup1, test_tup2))\n    return result\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    result = tuple(a & b for a, b in zip(test_tup1, test_tup2))\n    return result\n```"], "prompt_tokens": [536], "completion_tokens": [418], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_429_and_tuples"}
{"name": "mbpp_430_parabola_directrix", "language": "Python3", "prompt": "def parabola_directrix(a: int, b: int, c: int) -> int:\n    \"\"\"\n\tWrite a function to find the directrix of a parabola.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_430_parabola_directrix.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "parabola_directrix", "test": "def check(candidate):\n    \n    assert candidate(9, 8, 4)==-2336\n    assert candidate(2, 4, 6)==-130\n\ndef test_check():\n    check(parabola_directrix)\n\ntest_check()\n", "source_codes": ["\ndef parabola_directrix(a: int, b: int, c: int) -> float:\n    h = -b / (2 * a)\n    k = c - (b ** 2) / (4 * a)\n    directrix = k - 1 / (4 * a)\n    return directrix\n\n# Example usage:\na, b, c = 1, 0, 0  # y = x^2\nprint(parabola_directrix(a, b, c))  # Output should be -0.25\n\n\n"], "responses": ["```python\ndef parabola_directrix(a: int, b: int, c: int) -> float:\n    h = -b / (2 * a)\n    k = c - (b ** 2) / (4 * a)\n    directrix = k - 1 / (4 * a)\n    return directrix\n\n# Example usage:\na, b, c = 1, 0, 0  # y = x^2\nprint(parabola_directrix(a, b, c))  # Output should be -0.25\n```"], "prompt_tokens": [661], "completion_tokens": [640], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_430_parabola_directrix"}
{"name": "mbpp_431_common_element", "language": "Python3", "prompt": "from typing import List, Any, Optional\n\ndef common_element(list1: List[Any], list2: List[Any]) -> Optional[bool]:\n    \"\"\"\n\tWrite a function that takes two lists and returns true if they have at least one common element.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_431_common_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "common_element", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5], [6, 7, 8, 9])==None\n    assert candidate(['a', 'b', 'c'], ['d', 'b', 'e'])==True\n\ndef test_check():\n    check(common_element)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef common_element(list1: List[Any], list2: List[Any]) -> bool:\n    set1 = set(list1)\n    for element in list2:\n        if element in set1:\n            return True\n    return False\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef common_element(list1: List[Any], list2: List[Any]) -> bool:\n    set1 = set(list1)\n    for element in list2:\n        if element in set1:\n            return True\n    return False\n```"], "prompt_tokens": [600], "completion_tokens": [492], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_431_common_element"}
{"name": "mbpp_432_median_trapezium", "language": "Python3", "prompt": "def median_trapezium(base1: int, base2: int, height: int) -> float:\n    \"\"\"\n\tWrite a function to find the median length of a trapezium.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_432_median_trapezium.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "median_trapezium", "test": "def check(candidate):\n    \n    assert candidate(10, 20, 30)==15\n    assert candidate(6, 9, 4)==7.5\n\ndef test_check():\n    check(median_trapezium)\n\ntest_check()\n", "source_codes": ["\ndef median_trapezium(base1: int, base2: int, height: int) -> float:\n    median_length = (base1 + base2) / 2\n    return median_length\n\n# Example usage:\nbase1 = 10\nbase2 = 6\nheight = 5\nprint(median_trapezium(base1, base2, height))  # Output should be 8.0\n\n\n"], "responses": ["```python\ndef median_trapezium(base1: int, base2: int, height: int) -> float:\n    median_length = (base1 + base2) / 2\n    return median_length\n\n# Example usage:\nbase1 = 10\nbase2 = 6\nheight = 5\nprint(median_trapezium(base1, base2, height))  # Output should be 8.0\n```"], "prompt_tokens": [444], "completion_tokens": [390], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_432_median_trapezium"}
{"name": "mbpp_433_check_greater", "language": "Python3", "prompt": "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the entered number is greater than the elements of the given array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_433_check_greater.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_greater", "test": "def check(candidate):\n    \n    assert candidate([2, 3, 4, 5, 6], 8)==True\n    assert candidate([9, 7, 4, 8, 6, 1], 11)==True\n\ndef test_check():\n    check(check_greater)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    for element in arr:\n        if element >= number:\n            return False\n    return True\n\n# Example usage:\nmy_array = [1, 2, 3, 4, 5]\nmy_number = 6\nprint(check_greater(my_array, my_number))  # Output should be True\n\nmy_number = 3\nprint(check_greater(my_array, my_number))  # Output should be False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    for element in arr:\n        if element >= number:\n            return False\n    return True\n\n# Example usage:\nmy_array = [1, 2, 3, 4, 5]\nmy_number = 6\nprint(check_greater(my_array, my_number))  # Output should be True\n\nmy_number = 3\nprint(check_greater(my_array, my_number))  # Output should be False\n```"], "prompt_tokens": [484], "completion_tokens": [445], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_433_check_greater"}
{"name": "mbpp_434_text_match_one", "language": "Python3", "prompt": "def text_match_one(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an a followed by one or more b's.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_434_text_match_one.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_one", "test": "def check(candidate):\n    \n    assert candidate('dc')==False\n    assert candidate('abba')==True\n\ndef test_check():\n    check(text_match_one)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef text_match_one(text: str) -> bool:\n    pattern = 'ab+'\n    return bool(re.search(pattern, text))\n\n# Example usage:\nprint(text_match_one(\"ab\")) # True\nprint(text_match_one(\"aabbb\")) # True\nprint(text_match_one(\"aac\")) # False\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_one(text: str) -> bool:\n    pattern = 'ab+'\n    return bool(re.search(pattern, text))\n\n# Example usage:\nprint(text_match_one(\"ab\")) # True\nprint(text_match_one(\"aabbb\")) # True\nprint(text_match_one(\"aac\")) # False\n```"], "prompt_tokens": [519], "completion_tokens": [457], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_434_text_match_one"}
{"name": "mbpp_435_last_Digit", "language": "Python3", "prompt": "def last_Digit(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the last digit of a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_435_last_Digit.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "last_Digit", "test": "def check(candidate):\n    \n    assert candidate(25)==5\n    assert candidate(30)==0\n\ndef test_check():\n    check(last_Digit)\n\ntest_check()\n", "source_codes": ["\ndef last_digit(n: int) -> int:\n    return abs(n) % 10\n\n\n"], "responses": ["```python\ndef last_digit(n: int) -> int:\n    return abs(n) % 10\n```"], "prompt_tokens": [305], "completion_tokens": [207], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_435_last_Digit"}
{"name": "mbpp_436_neg_nos", "language": "Python3", "prompt": "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to return the negative numbers in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "neg_nos", "test": "def check(candidate):\n    \n    assert candidate([-1, -2, 3, 4])==[-1, -2]\n    assert candidate([-7, -6, 8, 9])==[-7, -6]\n\ndef test_check():\n    check(neg_nos)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    negative_numbers = []\n    for number in list1:\n        if number < 0:\n            negative_numbers.append(number)\n    return negative_numbers\n\n# Example usage:\nmy_list = [1, -2, 3, -4, 5, -6]\nprint(neg_nos(my_list))  # Output: [-2, -4, -6]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    negative_numbers = []\n    for number in list1:\n        if number < 0:\n            negative_numbers.append(number)\n    return negative_numbers\n\n# Example usage:\nmy_list = [1, -2, 3, -4, 5, -6]\nprint(neg_nos(my_list))  # Output: [-2, -4, -6]\n```"], "prompt_tokens": [416], "completion_tokens": [380], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_436_neg_nos"}
{"name": "mbpp_437_remove_odd", "language": "Python3", "prompt": "def remove_odd(str1: str) -> str:\n    \"\"\"\n\tWrite a function to remove odd characters in a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_437_remove_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_odd", "test": "def check(candidate):\n    \n    assert candidate('program')=='rga'\n    assert candidate('language')=='agae'\n\ndef test_check():\n    check(remove_odd)\n\ntest_check()\n", "source_codes": ["\ndef remove_odd(str1: str) -> str:\n    result = \"\"\n    for index, char in enumerate(str1):\n        if index % 2 == 0:\n            result += char\n    return result\n\nprint(remove_odd(\"Hello, World!\"))\n\n\n"], "responses": ["```python\ndef remove_odd(str1: str) -> str:\n    result = \"\"\n    for index, char in enumerate(str1):\n        if index % 2 == 0:\n            result += char\n    return result\n\nprint(remove_odd(\"Hello, World!\"))\n```"], "prompt_tokens": [405], "completion_tokens": [347], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_437_remove_odd"}
{"name": "mbpp_438_count_bidirectional", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> int:\n    \"\"\"\n\tWrite a function to count bidirectional tuple pairs.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_438_count_bidirectional.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_bidirectional", "test": "def check(candidate):\n    \n    assert candidate([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)])==2\n    assert candidate([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)])==4\n\ndef test_check():\n    check(count_bidirectional)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> int:\n    seen = set()\n    bidirectional_count = 0\n\n    for tup in test_list:\n        reverse_tup = (tup[1], tup[0])\n        if reverse_tup in seen:\n            bidirectional_count += 1\n        seen.add(tup)\n\n    return bidirectional_count\n\n# Example usage:\ntest_list = [(1, 2), (2, 1), (3, 4), (4, 3), (5, 6)]\nprint(count_bidirectional(test_list))  # Output: 2\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef count_bidirectional(test_list: List[Tuple[int, int]]) -> int:\n    seen = set()\n    bidirectional_count = 0\n\n    for tup in test_list:\n        reverse_tup = (tup[1], tup[0])\n        if reverse_tup in seen:\n            bidirectional_count += 1\n        seen.add(tup)\n\n    return bidirectional_count\n\n# Example usage:\ntest_list = [(1, 2), (2, 1), (3, 4), (4, 3), (5, 6)]\nprint(count_bidirectional(test_list))  # Output: 2\n```"], "prompt_tokens": [507], "completion_tokens": [510], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_438_count_bidirectional"}
{"name": "mbpp_439_multiple_to_single", "language": "Python3", "prompt": "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    \"\"\"\n\tWrite a function to join a list of multiple integers into a single integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_439_multiple_to_single.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "multiple_to_single", "test": "def check(candidate):\n    \n    assert candidate([-1, 2, 3, 4, 5, 6])==-123456\n    assert candidate([10, 15, 20, 25])==10152025\n\ndef test_check():\n    check(multiple_to_single)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    concatenated_string = ''.join(map(str, L))\n    single_integer = int(concatenated_string)\n    return single_integer\n\n# Example usage:\nnumbers = [1, 23, 456, 7890]\nresult = multiple_to_single(numbers)\nprint(result)  # Output: 1234567890\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    concatenated_string = ''.join(map(str, L))\n    single_integer = int(concatenated_string)\n    return single_integer\n\n# Example usage:\nnumbers = [1, 23, 456, 7890]\nresult = multiple_to_single(numbers)\nprint(result)  # Output: 1234567890\n```"], "prompt_tokens": [395], "completion_tokens": [346], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_439_multiple_to_single"}
{"name": "mbpp_440_find_adverb_position", "language": "Python3", "prompt": "from typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    \"\"\"\n\tWrite a function to find the first adverb and their positions in a given sentence.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_440_find_adverb_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_adverb_position", "test": "def check(candidate):\n    \n    assert candidate('seriously!! there are many roses')==(0, 9, 'seriously')\n    assert candidate('unfortunately!! sita is going to home')==(0, 13, 'unfortunately')\n\ndef test_check():\n    check(find_adverb_position)\n\ntest_check()\n", "source_codes": ["\nimport nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk import pos_tag\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    words = word_tokenize(text)\n    tagged_words = pos_tag(words)\n    \n    for i, (word, tag) in enumerate(tagged_words):\n        if tag in ('RB', 'RBR', 'RBS'):\n            start_position = text.find(word)\n            end_position = start_position + len(word) - 1\n            return (start_position, end_position, word)\n    \n    return (-1, -1, \"\")\n\n# Example usage:\ntext = \"He quickly ran to the store.\"\nprint(find_adverb_position(text))\n\n\n"], "responses": ["```python\nimport nltk\nfrom nltk.tokenize import word_tokenize\nfrom nltk import pos_tag\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    words = word_tokenize(text)\n    tagged_words = pos_tag(words)\n    \n    for i, (word, tag) in enumerate(tagged_words):\n        if tag in ('RB', 'RBR', 'RBS'):\n            start_position = text.find(word)\n            end_position = start_position + len(word) - 1\n            return (start_position, end_position, word)\n    \n    return (-1, -1, \"\")\n\n# Example usage:\ntext = \"He quickly ran to the store.\"\nprint(find_adverb_position(text))\n```"], "prompt_tokens": [657], "completion_tokens": [660], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_440_find_adverb_position"}
{"name": "mbpp_441_surfacearea_cube", "language": "Python3", "prompt": "def surfacearea_cube(l: int) -> int:\n    \"\"\"\n\tWrite a function to find the surface area of a cube of a given size.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_441_surfacearea_cube.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "surfacearea_cube", "test": "def check(candidate):\n    \n    assert candidate(3)==54\n    assert candidate(10)==600\n\ndef test_check():\n    check(surfacearea_cube)\n\ntest_check()\n", "source_codes": ["\ndef surfacearea_cube(l: int) -> int:\n    face_area = l ** 2\n    total_surface_area = 6 * face_area\n    return total_surface_area\n\n# Example usage:\nside_length = 5\nprint(surfacearea_cube(side_length))  # Output will be 150 if side_length is 5\n\n\n"], "responses": ["```python\ndef surfacearea_cube(l: int) -> int:\n    face_area = l ** 2\n    total_surface_area = 6 * face_area\n    return total_surface_area\n\n# Example usage:\nside_length = 5\nprint(surfacearea_cube(side_length))  # Output will be 150 if side_length is 5\n```"], "prompt_tokens": [393], "completion_tokens": [340], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_441_surfacearea_cube"}
{"name": "mbpp_442_positive_count", "language": "Python3", "prompt": "from typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    \"\"\"\n\tWrite a function to find the ration of positive numbers in an array of integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "positive_count", "test": "def check(candidate):\n    \n    assert candidate([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56\n\ndef test_check():\n    check(positive_count)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    positive_counter = 0\n    for num in nums:\n        if num > 0:\n            positive_counter += 1\n    ratio = positive_counter / len(nums) if nums else 0\n    return ratio\n\n# Example usage:\nnumbers = [1, -2, 3, 4, -5, 6]\nprint(positive_count(numbers))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef positive_count(nums: List[int]) -> float:\n    positive_counter = 0\n    for num in nums:\n        if num > 0:\n            positive_counter += 1\n    ratio = positive_counter / len(nums) if nums else 0\n    return ratio\n\n# Example usage:\nnumbers = [1, -2, 3, 4, -5, 6]\nprint(positive_count(numbers))\n```"], "prompt_tokens": [507], "completion_tokens": [468], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_442_positive_count"}
{"name": "mbpp_443_largest_neg", "language": "Python3", "prompt": "from typing import List\n\ndef largest_neg(list1: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the largest negative number from the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "largest_neg", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, -8, -9])==-9\n    assert candidate([1, 2, 3, 4, -1])==-1\n\ndef test_check():\n    check(largest_neg)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef largest_neg(list1: List[int]) -> int:\n    largest_negative = -float('inf')\n\n    for num in list1:\n        if num < 0 and num > largest_negative:\n            largest_negative = num\n\n    if largest_negative == -float('inf'):\n        return None\n\n    return largest_negative\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef largest_neg(list1: List[int]) -> int:\n    largest_negative = -float('inf')\n\n    for num in list1:\n        if num < 0 and num > largest_negative:\n            largest_negative = num\n\n    if largest_negative == -float('inf'):\n        return None\n\n    return largest_negative\n```"], "prompt_tokens": [581], "completion_tokens": [520], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_443_largest_neg"}
{"name": "mbpp_444_trim_tuple", "language": "Python3", "prompt": "from typing import List\n\ndef trim_tuple(test_list: List[List[int]], K: int) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to trim each list by k in the given lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_444_trim_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "trim_tuple", "test": "def check(candidate):\n    \n    assert candidate([[5, 3, 2, 1, 4], [3, 4, 9, 2, 1], [9, 1, 2, 3, 5], [4, 8, 2, 1, 7]], 1)==[[3, 2, 1], [4, 9, 2], [1, 2, 3], [8, 2, 1]]\n    assert candidate([[7, 8, 4, 9], [11, 8, 12, 4], [4, 1, 7, 8], [3, 6, 9, 7]], 1)==[[8, 4], [8, 12], [1, 7], [6, 9]]\n\ndef test_check():\n    check(trim_tuple)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef trim_tuple(test_list: List[List[int]], K: int) -> List[List[int]]:\n    trimmed_list = [sublist[K:-K] if len(sublist) > 2*K else [] for sublist in test_list]\n    return trimmed_list\n\n# Example usage:\ntest_list = [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10], [11, 12]]\nK = 1\nprint(trim_tuple(test_list, K))  # Output: [[2, 3, 4, 5], [8, 9], []]\n\nK = 2\nprint(trim_tuple(test_list, K))  # Output: [[3, 4], [], []]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef trim_tuple(test_list: List[List[int]], K: int) -> List[List[int]]:\n    trimmed_list = [sublist[K:-K] if len(sublist) > 2*K else [] for sublist in test_list]\n    return trimmed_list\n\n# Example usage:\ntest_list = [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10], [11, 12]]\nK = 1\nprint(trim_tuple(test_list, K))  # Output: [[2, 3, 4, 5], [8, 9], []]\n\nK = 2\nprint(trim_tuple(test_list, K))  # Output: [[3, 4], [], []]\n```"], "prompt_tokens": [536], "completion_tokens": [556], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_444_trim_tuple"}
{"name": "mbpp_445_index_multiplication", "language": "Python3", "prompt": "from typing import List\n\ndef index_multiplication(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to perform index wise multiplication of list elements in the given two lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_445_index_multiplication.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "index_multiplication", "test": "def check(candidate):\n    \n    assert candidate([[2, 4], [5, 6], [3, 10], [2, 11]], [[7, 8], [4, 10], [2, 2], [8, 4]])==[[14, 32], [20, 60], [6, 20], [16, 44]]\n    assert candidate([[3, 5], [6, 7], [4, 11], [3, 12]], [[8, 9], [5, 11], [3, 3], [9, 5]])==[[24, 45], [30, 77], [12, 33], [27, 60]]\n\ndef test_check():\n    check(index_multiplication)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef index_multiplication(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both lists must contain the same number of sublists\")\n    \n    result = []\n    \n    for sublist1, sublist2 in zip(test_tup1, test_tup2):\n        if len(sublist1) != len(sublist2):\n            raise ValueError(\"All corresponding sublists must have the same length\")\n        \n        multiplied_sublist = [a * b for a, b in zip(sublist1, sublist2)]\n        result.append(multiplied_sublist)\n    \n    return result\n\n# Example usage:\ntest_tup1 = [[1, 2, 3], [4, 5, 6]]\ntest_tup2 = [[7, 8, 9], [10, 11, 12]]\nprint(index_multiplication(test_tup1, test_tup2))  # Output: [[7, 16, 27], [40, 55, 72]]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef index_multiplication(test_tup1: List[List[int]], test_tup2: List[List[int]]) -> List[List[int]]:\n    if len(test_tup1) != len(test_tup2):\n        raise ValueError(\"Both lists must contain the same number of sublists\")\n    \n    result = []\n    \n    for sublist1, sublist2 in zip(test_tup1, test_tup2):\n        if len(sublist1) != len(sublist2):\n            raise ValueError(\"All corresponding sublists must have the same length\")\n        \n        multiplied_sublist = [a * b for a, b in zip(sublist1, sublist2)]\n        result.append(multiplied_sublist)\n    \n    return result\n\n# Example usage:\ntest_tup1 = [[1, 2, 3], [4, 5, 6]]\ntest_tup2 = [[7, 8, 9], [10, 11, 12]]\nprint(index_multiplication(test_tup1, test_tup2))  # Output: [[7, 16, 27], [40, 55, 72]]\n```"], "prompt_tokens": [607], "completion_tokens": [679], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_445_index_multiplication"}
{"name": "mbpp_446_count_Occurrence", "language": "Python3", "prompt": "from typing import Any, List\n\ndef count_Occurrence(tup: Any, lst: List[Any]) -> int:\n    \"\"\"\n\tWrite a python function to count the occurence of all elements of list in a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Occurrence", "test": "def check(candidate):\n    \n    assert candidate((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7])==6\n    assert candidate((1, 2, 3, 4, 5, 6), [1, 2])==2\n\ndef test_check():\n    check(count_Occurrence)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Any, List\n\ndef count_occurrence(tup: Any, lst: List[Any]) -> int:\n    count = 0\n    for item in lst:\n        count += tup.count(item)\n    return count\n\n# Example usage:\nmy_tuple = (1, 2, 3, 4, 2, 3, 2, 1, 4, 3)\nmy_list = [2, 3]\n\nprint(count_occurrence(my_tuple, my_list))  # Output should be 6\n\n\n"], "responses": ["```python\nfrom typing import Any, List\n\ndef count_occurrence(tup: Any, lst: List[Any]) -> int:\n    count = 0\n    for item in lst:\n        count += tup.count(item)\n    return count\n\n# Example usage:\nmy_tuple = (1, 2, 3, 4, 2, 3, 2, 1, 4, 3)\nmy_list = [2, 3]\n\nprint(count_occurrence(my_tuple, my_list))  # Output should be 6\n```"], "prompt_tokens": [407], "completion_tokens": [365], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_446_count_Occurrence"}
{"name": "mbpp_447_cube_nums", "language": "Python3", "prompt": "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find cubes of individual elements in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_447_cube_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cube_nums", "test": "def check(candidate):\n    \n    assert candidate([10, 20, 30])==[1000, 8000, 27000]\n    assert candidate([12, 15])==[1728, 3375]\n\ndef test_check():\n    check(cube_nums)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\ncubed_numbers = cube_nums(numbers)\nprint(cubed_numbers)  # Output: [1, 8, 27, 64, 125]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\ncubed_numbers = cube_nums(numbers)\nprint(cubed_numbers)  # Output: [1, 8, 27, 64, 125]\n```"], "prompt_tokens": [404], "completion_tokens": [371], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_447_cube_nums"}
{"name": "mbpp_448_cal_sum", "language": "Python3", "prompt": "def cal_sum(n: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the sum of perrin numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_448_cal_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cal_sum", "test": "def check(candidate):\n    \n    assert candidate(10)==66\n    assert candidate(11)==88\n\ndef test_check():\n    check(cal_sum)\n\ntest_check()\n", "source_codes": ["\ndef cal_sum(n: int) -> int:\n    if n == 0:\n        return 3\n    if n == 1:\n        return 3\n    if n == 2:\n        return 5\n    \n    p0, p1, p2 = 3, 0, 2\n    sum_perrin = p0 + p1 + p2\n    \n    for i in range(3, n):\n        p_next = p0 + p1\n        sum_perrin += p_next\n        p0, p1, p2 = p1, p2, p_next\n    \n    return sum_perrin\n\nprint(cal_sum(10))\n\n\n"], "responses": ["```python\ndef cal_sum(n: int) -> int:\n    if n == 0:\n        return 3\n    if n == 1:\n        return 3\n    if n == 2:\n        return 5\n    \n    p0, p1, p2 = 3, 0, 2\n    sum_perrin = p0 + p1 + p2\n    \n    for i in range(3, n):\n        p_next = p0 + p1\n        sum_perrin += p_next\n        p0, p1, p2 = p1, p2, p_next\n    \n    return sum_perrin\n\nprint(cal_sum(10))\n```"], "prompt_tokens": [509], "completion_tokens": [537], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_448_cal_sum"}
{"name": "mbpp_450_extract_string", "language": "Python3", "prompt": "from typing import List\n\ndef extract_string(str: List[str], l: int) -> List[str]:\n    \"\"\"\n\tWrite a function to extract specified size of strings from a given list of string values.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_string", "test": "def check(candidate):\n    \n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'], 6)==['Python']\n    assert candidate(['Python', 'list', 'exercises', 'practice', 'solution'], 9)==['exercises']\n\ndef test_check():\n    check(extract_string)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef extract_string(strings: List[str], size: int) -> List[str]:\n    extracted_strings = []\n    for string in strings:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings\n\n# Example usage:\nstring_list = [\"hello\", \"world\", \"python\", \"code\", \"list\", \"examples\"]\nsize = 5\nprint(extract_string(string_list, size))  # Output: ['hello', 'world']\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef extract_string(strings: List[str], size: int) -> List[str]:\n    extracted_strings = []\n    for string in strings:\n        if len(string) == size:\n            extracted_strings.append(string)\n    return extracted_strings\n\n# Example usage:\nstring_list = [\"hello\", \"world\", \"python\", \"code\", \"list\", \"examples\"]\nsize = 5\nprint(extract_string(string_list, size))  # Output: ['hello', 'world']\n```"], "prompt_tokens": [459], "completion_tokens": [416], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_450_extract_string"}
{"name": "mbpp_451_remove_whitespaces", "language": "Python3", "prompt": "def remove_whitespaces(text1: str) -> str:\n    \"\"\"\n\tWrite a function to remove all whitespaces from the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_451_remove_whitespaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_whitespaces", "test": "def check(candidate):\n    \n    assert candidate(' Google    Dart ')=='GoogleDart'\n    assert candidate(' iOS    Swift ')=='iOSSwift'\n\ndef test_check():\n    check(remove_whitespaces)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef remove_whitespaces(text1: str) -> str:\n    no_whitespaces = re.sub(r'\\s+', '', text1)\n    return no_whitespaces\n\n# Example usage:\ntext = \"  This is a text with    whitespaces \\t and \\n new lines.  \"\nclean_text = remove_whitespaces(text)\nprint(clean_text)  # Output: \"Thisisatextwithwhitespacesandnewlines.\"\n\n\n"], "responses": ["```python\nimport re\n\ndef remove_whitespaces(text1: str) -> str:\n    no_whitespaces = re.sub(r'\\s+', '', text1)\n    return no_whitespaces\n\n# Example usage:\ntext = \"  This is a text with    whitespaces \\t and \\n new lines.  \"\nclean_text = remove_whitespaces(text)\nprint(clean_text)  # Output: \"Thisisatextwithwhitespacesandnewlines.\"\n```"], "prompt_tokens": [450], "completion_tokens": [426], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_451_remove_whitespaces"}
{"name": "mbpp_452_loss_amount", "language": "Python3", "prompt": "def loss_amount(actual_cost: int, sale_amount: int) -> int:\n    \"\"\"\n\tWrite a function that gives loss amount on a sale if the given amount has loss else return 0.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_452_loss_amount.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "loss_amount", "test": "def check(candidate):\n    \n    assert candidate(100, 200)==100\n    assert candidate(2000, 5000)==3000\n\ndef test_check():\n    check(loss_amount)\n\ntest_check()\n", "source_codes": ["\ndef loss_amount(actual_cost: int, sale_amount: int) -> int:\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n# Example usage:\nactual_cost = 100\nsale_amount = 80\nprint(loss_amount(actual_cost, sale_amount))  # Output: 20\n\nactual_cost = 100\nsale_amount = 100\nprint(loss_amount(actual_cost, sale_amount))  # Output: 0\n\nactual_cost = 100\nsale_amount = 120\nprint(loss_amount(actual_cost, sale_amount))  # Output: 0\n\n\n"], "responses": ["```python\ndef loss_amount(actual_cost: int, sale_amount: int) -> int:\n    if sale_amount < actual_cost:\n        return actual_cost - sale_amount\n    else:\n        return 0\n\n# Example usage:\nactual_cost = 100\nsale_amount = 80\nprint(loss_amount(actual_cost, sale_amount))  # Output: 20\n\nactual_cost = 100\nsale_amount = 100\nprint(loss_amount(actual_cost, sale_amount))  # Output: 0\n\nactual_cost = 100\nsale_amount = 120\nprint(loss_amount(actual_cost, sale_amount))  # Output: 0\n```"], "prompt_tokens": [494], "completion_tokens": [481], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_452_loss_amount"}
{"name": "mbpp_453_sumofFactors", "language": "Python3", "prompt": "def sumofFactors(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of even factors of a number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_453_sumofFactors.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sumofFactors", "test": "def check(candidate):\n    \n    assert candidate(30)==48\n    assert candidate(6)==8\n\ndef test_check():\n    check(sumofFactors)\n\ntest_check()\n", "source_codes": ["\ndef sumofFactors(n: int) -> int:\n    sum_even_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors\n\n# Example usage:\nprint(sumofFactors(10))  # Should return 12\nprint(sumofFactors(18))  # Should return 26\n\n\n"], "responses": ["```python\ndef sumofFactors(n: int) -> int:\n    sum_even_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_even_factors += i\n    return sum_even_factors\n\n# Example usage:\nprint(sumofFactors(10))  # Should return 12\nprint(sumofFactors(18))  # Should return 26\n```"], "prompt_tokens": [537], "completion_tokens": [512], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_453_sumofFactors"}
{"name": "mbpp_454_text_match_wordz", "language": "Python3", "prompt": "def text_match_wordz(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a word containing 'z'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_wordz", "test": "def check(candidate):\n    \n    assert candidate('xyz.')==True\n    assert candidate('  lang  .')==False\n\ndef test_check():\n    check(text_match_wordz)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef text_match_wordz(text: str) -> bool:\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))\n\n# Example usage:\nprint(text_match_wordz(\"The zebra is a wild animal.\"))  # Should return True\nprint(text_match_wordz(\"The horse is a farm animal.\"))  # Should return False\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_wordz(text: str) -> bool:\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))\n\n# Example usage:\nprint(text_match_wordz(\"The zebra is a wild animal.\"))  # Should return True\nprint(text_match_wordz(\"The horse is a farm animal.\"))  # Should return False\n```"], "prompt_tokens": [445], "completion_tokens": [415], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_454_text_match_wordz"}
{"name": "mbpp_455_check_monthnumb_number", "language": "Python3", "prompt": "def check_monthnumb_number(monthnum2: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given month number contains 31 days or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_455_check_monthnumb_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_monthnumb_number", "test": "def check(candidate):\n    \n    assert candidate(2)==False\n    assert candidate(6)==False\n\ndef test_check():\n    check(check_monthnumb_number)\n\ntest_check()\n", "source_codes": ["\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return monthnum2 in months_with_31_days\n\n# Example usage:\nprint(check_monthnumb_number(1))  # True\nprint(check_monthnumb_number(4))  # False\n\n\n"], "responses": ["```python\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return monthnum2 in months_with_31_days\n\n# Example usage:\nprint(check_monthnumb_number(1))  # True\nprint(check_monthnumb_number(4))  # False\n```"], "prompt_tokens": [448], "completion_tokens": [402], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_455_check_monthnumb_number"}
{"name": "mbpp_456_reverse_string_list", "language": "Python3", "prompt": "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    \"\"\"\n\tWrite a function to reverse each string in a given list of string values.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_456_reverse_string_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "reverse_string_list", "test": "def check(candidate):\n    \n    assert candidate(['john', 'amal', 'joel', 'george'])==['nhoj', 'lama', 'leoj', 'egroeg']\n    assert candidate(['jack', 'john', 'mary'])==['kcaj', 'nhoj', 'yram']\n\ndef test_check():\n    check(reverse_string_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]\n\n# Example usage:\nmy_strings = [\"hello\", \"world\", \"python\"]\nprint(reverse_string_list(my_strings))  # Output: ['olleh', 'dlrow', 'nohtyp']\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]\n\n# Example usage:\nmy_strings = [\"hello\", \"world\", \"python\"]\nprint(reverse_string_list(my_strings))  # Output: ['olleh', 'dlrow', 'nohtyp']\n```"], "prompt_tokens": [406], "completion_tokens": [343], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_456_reverse_string_list"}
{"name": "mbpp_457_Find_Min", "language": "Python3", "prompt": "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n\tWrite a python function to find the sublist having minimum length.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_457_Find_Min.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Min", "test": "def check(candidate):\n    \n    assert candidate([[1, 1], [1, 1, 1], [1, 2, 7, 8]])==[1, 1]\n    assert candidate([['x'], ['x', 'y'], ['x', 'y', 'z']])==['x']\n\ndef test_check():\n    check(Find_Min)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    min_length = float('inf')\n    min_sublist = None\n    \n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist\n```"], "prompt_tokens": [573], "completion_tokens": [514], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_457_Find_Min"}
{"name": "mbpp_458_rectangle_area", "language": "Python3", "prompt": "def rectangle_area(l: int, b: int) -> int:\n    \"\"\"\n\tWrite a function to find the area of a rectangle.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_458_rectangle_area.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rectangle_area", "test": "def check(candidate):\n    \n    assert candidate(10, 5)==50\n    assert candidate(4, 2)==8\n\ndef test_check():\n    check(rectangle_area)\n\ntest_check()\n", "source_codes": ["\ndef rectangle_area(l: int, b: int) -> int:\n    return l * b\n\n# Example usage:\nlength = 5\nbreadth = 10\narea = rectangle_area(length, breadth)\nprint(f\"The area of the rectangle is: {area}\")\n\n\n"], "responses": ["```python\ndef rectangle_area(l: int, b: int) -> int:\n    return l * b\n\n# Example usage:\nlength = 5\nbreadth = 10\narea = rectangle_area(length, breadth)\nprint(f\"The area of the rectangle is: {area}\")\n```"], "prompt_tokens": [379], "completion_tokens": [317], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_458_rectangle_area"}
{"name": "mbpp_459_remove_uppercase", "language": "Python3", "prompt": "def remove_uppercase(str1: str) -> str:\n    \"\"\"\n\tWrite a function to remove uppercase substrings from a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_uppercase", "test": "def check(candidate):\n    \n    assert candidate('wAtchTheinTernEtrAdIo')=='wtchheinerntrdo'\n    assert candidate('VoicESeaRchAndreComMendaTionS')=='oiceachndreomendaion'\n\ndef test_check():\n    check(remove_uppercase)\n\ntest_check()\n", "source_codes": ["\ndef remove_uppercase(str1: str) -> str:\n    result = \"\"\n    for char in str1:\n        if not char.isupper():\n            result += char\n    return result\n\nprint(remove_uppercase(\"Hello World!\"))  # Output: \"ello orld!\"\n\n\n"], "responses": ["```python\ndef remove_uppercase(str1: str) -> str:\n    result = \"\"\n    for char in str1:\n        if not char.isupper():\n            result += char\n    return result\n\nprint(remove_uppercase(\"Hello World!\"))  # Output: \"ello orld!\"\n```"], "prompt_tokens": [319], "completion_tokens": [259], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_459_remove_uppercase"}
{"name": "mbpp_460_Extract", "language": "Python3", "prompt": "from typing import List\n\ndef Extract(lst: List[List[int]]) -> List[int]:\n    \"\"\"\n\tWrite a python function to get the first element of each sublist.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_460_Extract.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Extract", "test": "def check(candidate):\n    \n    assert candidate([[1, 2, 3], [4, 5]])==[1, 4]\n    assert candidate([[9, 8, 1], [1, 2]])==[9, 1]\n\ndef test_check():\n    check(Extract)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef Extract(lst: List[List[int]]) -> List[int]:\n    return [sublist[0] for sublist in lst if sublist]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Extract(lst: List[List[int]]) -> List[int]:\n    return [sublist[0] for sublist in lst if sublist]\n```"], "prompt_tokens": [482], "completion_tokens": [387], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_460_Extract"}
{"name": "mbpp_461_upper_ctr", "language": "Python3", "prompt": "def upper_ctr(str: str) -> int:\n    \"\"\"\n\tWrite a python function to count the upper case characters in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "upper_ctr", "test": "def check(candidate):\n    \n    assert candidate('BigData')==1\n    assert candidate('program')==0\n\ndef test_check():\n    check(upper_ctr)\n\ntest_check()\n", "source_codes": ["\ndef upper_ctr(input_str: str) -> int:\n    uppercase_count = 0\n    for char in input_str:\n        if char.isupper():\n            uppercase_count += 1\n    return uppercase_count\n\n# Example usage:\nexample_string = \"Hello World!\"\nprint(upper_ctr(example_string))  # Output: 2\n\n\n"], "responses": ["```python\ndef upper_ctr(input_str: str) -> int:\n    uppercase_count = 0\n    for char in input_str:\n        if char.isupper():\n            uppercase_count += 1\n    return uppercase_count\n\n# Example usage:\nexample_string = \"Hello World!\"\nprint(upper_ctr(example_string))  # Output: 2\n```"], "prompt_tokens": [429], "completion_tokens": [380], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_461_upper_ctr"}
{"name": "mbpp_462_combinations_list", "language": "Python3", "prompt": "from typing import List, Union\n\ndef combinations_list(list1: List[str]) -> List[Union[List[None], List[str]]]:\n    \"\"\"\n\tWrite a function to find all possible combinations of the elements of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_462_combinations_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "combinations_list", "test": "def check(candidate):\n    \n    assert candidate(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    assert candidate(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n\ndef test_check():\n    check(combinations_list)\n\ntest_check()\n", "source_codes": ["\nfrom itertools import combinations\nfrom typing import List, Union\n\ndef combinations_list(list1: List[str]) -> List[Union[List[None], List[str]]]:\n    result = []\n    for r in range(len(list1) + 1):\n        for combo in combinations(list1, r):\n            result.append(list(combo))\n    return result\n\n# Example usage:\n# my_list = ['a', 'b', 'c']\n# print(combinations_list(my_list))\n\n\n"], "responses": ["```python\nfrom itertools import combinations\nfrom typing import List, Union\n\ndef combinations_list(list1: List[str]) -> List[Union[List[None], List[str]]]:\n    result = []\n    for r in range(len(list1) + 1):\n        for combo in combinations(list1, r):\n            result.append(list(combo))\n    return result\n\n# Example usage:\n# my_list = ['a', 'b', 'c']\n# print(combinations_list(my_list))\n```"], "prompt_tokens": [469], "completion_tokens": [410], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_462_combinations_list"}
{"name": "mbpp_463_max_subarray_product", "language": "Python3", "prompt": "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum product subarray of the given array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_463_max_subarray_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_subarray_product", "test": "def check(candidate):\n    \n    assert candidate([6, -3, -10, 0, 2])==180\n    assert candidate([-2, -40, 0, -2, -3])==80\n\ndef test_check():\n    check(max_subarray_product)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n\n    max_so_far = max_ending_here = min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] == 0:\n            max_ending_here = min_ending_here = 0\n        else:\n            temp_max = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n            min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n            max_ending_here = temp_max\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n        if max_ending_here == 0:\n            max_ending_here = 1\n\n    return max_so_far\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n\n    max_so_far = max_ending_here = min_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] == 0:\n            max_ending_here = min_ending_here = 0\n        else:\n            temp_max = max(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n            min_ending_here = min(arr[i], max_ending_here * arr[i], min_ending_here * arr[i])\n            max_ending_here = temp_max\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n        if max_ending_here == 0:\n            max_ending_here = 1\n\n    return max_so_far\n```"], "prompt_tokens": [750], "completion_tokens": [800], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_463_max_subarray_product"}
{"name": "mbpp_464_check_value", "language": "Python3", "prompt": "from typing import Dict\n\ndef check_value(dict: Dict[str, int], n: int) -> bool:\n    \"\"\"\n\tWrite a function to check if all values are same in a dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_464_check_value.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_value", "test": "def check(candidate):\n    \n    assert candidate({ 'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12 }, 12)==True\n    assert candidate({ 'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12 }, 5)==False\n\ndef test_check():\n    check(check_value)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Dict\n\ndef check_value(d: Dict[str, int]) -> bool:\n    if not d:\n        return True\n    first_value = next(iter(d.values()))\n    return all(value == first_value for value in d.values())\n\n# Example usage:\nmy_dict = {'a': 1, 'b': 1, 'c': 1}\nprint(check_value(my_dict))  # Output: True\n\nmy_dict = {'a': 1, 'b': 2, 'c': 1}\nprint(check_value(my_dict))  # Output: False\n\n\n"], "responses": ["```python\nfrom typing import Dict\n\ndef check_value(d: Dict[str, int]) -> bool:\n    if not d:\n        return True\n    first_value = next(iter(d.values()))\n    return all(value == first_value for value in d.values())\n\n# Example usage:\nmy_dict = {'a': 1, 'b': 1, 'c': 1}\nprint(check_value(my_dict))  # Output: True\n\nmy_dict = {'a': 1, 'b': 2, 'c': 1}\nprint(check_value(my_dict))  # Output: False\n```"], "prompt_tokens": [543], "completion_tokens": [523], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_464_check_value"}
{"name": "mbpp_465_drop_empty", "language": "Python3", "prompt": "from typing import Dict, Optional\n\ndef drop_empty(dict1: Dict[str, Optional[str]]) -> Dict[str, str]:\n    \"\"\"\n\tWrite a function to drop empty items from a given dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_465_drop_empty.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "drop_empty", "test": "def check(candidate):\n    \n    assert candidate({ 'c1': 'Red', 'c2': None, 'c3': None })=={ 'c1': 'Red' }\n    assert candidate({ 'c1': None, 'c2': 'Green', 'c3': None })=={ 'c2': 'Green' }\n\ndef test_check():\n    check(drop_empty)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Dict, Optional\n\ndef drop_empty(dict1: Dict[str, Optional[str]]) -> Dict[str, str]:\n    non_empty_dict = {key: value for key, value in dict1.items() if value is not None and value != \"\"}\n    return non_empty_dict\n\n# Example usage:\noriginal_dict = {\n    \"a\": \"apple\",\n    \"b\": None,\n    \"c\": \"cherry\",\n    \"d\": \"\"\n}\n\nresult_dict = drop_empty(original_dict)\nprint(result_dict)\n\n\n"], "responses": ["```python\nfrom typing import Dict, Optional\n\ndef drop_empty(dict1: Dict[str, Optional[str]]) -> Dict[str, str]:\n    non_empty_dict = {key: value for key, value in dict1.items() if value is not None and value != \"\"}\n    return non_empty_dict\n\n# Example usage:\noriginal_dict = {\n    \"a\": \"apple\",\n    \"b\": None,\n    \"c\": \"cherry\",\n    \"d\": \"\"\n}\n\nresult_dict = drop_empty(original_dict)\nprint(result_dict)\n```"], "prompt_tokens": [541], "completion_tokens": [505], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_465_drop_empty"}
{"name": "mbpp_468_max_product", "language": "Python3", "prompt": "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_468_max_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_product", "test": "def check(candidate):\n    \n    assert candidate([4, 42, 55, 68, 80])==50265600\n    assert candidate([10, 22, 9, 33, 21, 50, 41, 60])==2460\n\ndef test_check():\n    check(max_product)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n\n    dp = arr.copy()\n\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)\n\n# Example usage:\narr = [3, 6, 7, 8, 10]\nprint(max_product(arr))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n\n    dp = arr.copy()\n\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)\n\n# Example usage:\narr = [3, 6, 7, 8, 10]\nprint(max_product(arr))\n```"], "prompt_tokens": [672], "completion_tokens": [637], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_468_max_product"}
{"name": "mbpp_470_add_pairwise", "language": "Python3", "prompt": "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_470_add_pairwise.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_pairwise", "test": "def check(candidate):\n    \n    assert candidate((2, 6, 8, 9, 11))==(8, 14, 17, 20)\n    assert candidate((3, 7, 9, 10, 12))==(10, 16, 19, 22)\n\ndef test_check():\n    check(add_pairwise)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, int, int, int, int]) -> Tuple[int, int, int, int]:\n    result = []\n    for i in range(len(test_tup) - 1):\n        pair_sum = test_tup[i] + test_tup[i + 1]\n        result.append(pair_sum)\n    return tuple(result)\n\n# Example usage:\ntest_tup = (1, 2, 3, 4, 5)\nprint(add_pairwise(test_tup))  # Output: (3, 5, 7, 9)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, int, int, int, int]) -> Tuple[int, int, int, int]:\n    result = []\n    for i in range(len(test_tup) - 1):\n        pair_sum = test_tup[i] + test_tup[i + 1]\n        result.append(pair_sum)\n    return tuple(result)\n\n# Example usage:\ntest_tup = (1, 2, 3, 4, 5)\nprint(add_pairwise(test_tup))  # Output: (3, 5, 7, 9)\n```"], "prompt_tokens": [494], "completion_tokens": [453], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_470_add_pairwise"}
{"name": "mbpp_471_find_remainder", "language": "Python3", "prompt": "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the product of the array multiplication modulo n.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_471_find_remainder.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_remainder", "test": "def check(candidate):\n    \n    assert candidate([1, 1, 1], 1)==0\n    assert candidate([1, 2, 1], 2)==0\n\ndef test_check():\n    check(find_remainder)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nn = 7\nprint(find_remainder(arr, n))  # Output: 1\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nn = 7\nprint(find_remainder(arr, n))  # Output: 1\n```"], "prompt_tokens": [427], "completion_tokens": [377], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_471_find_remainder"}
{"name": "mbpp_472_check_Consecutive", "language": "Python3", "prompt": "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given list contains consecutive numbers or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_Consecutive", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 5, 6])==False\n    assert candidate([1, 2, 1])==False\n\ndef test_check():\n    check(check_Consecutive)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    sorted_list = sorted(l)\n    for i in range(1, len(sorted_list)):\n        if sorted_list[i] != sorted_list[i - 1] + 1:\n            return False\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    sorted_list = sorted(l)\n    for i in range(1, len(sorted_list)):\n        if sorted_list[i] != sorted_list[i - 1] + 1:\n            return False\n    return True\n```"], "prompt_tokens": [489], "completion_tokens": [418], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_472_check_Consecutive"}
{"name": "mbpp_474_replace_char", "language": "Python3", "prompt": "def replace_char(str1: str, ch: str, newch: str) -> str:\n    \"\"\"\n\tWrite a function to replace characters in a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_474_replace_char.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_char", "test": "def check(candidate):\n    \n    assert candidate('character', 'c', 'a')=='aharaater'\n    assert candidate('python', 'l', 'a')=='python'\n\ndef test_check():\n    check(replace_char)\n\ntest_check()\n", "source_codes": ["\ndef replace_char(str1: str, ch: str, newch: str) -> str:\n    if not isinstance(str1, str) or not isinstance(ch, str) or not isinstance(newch, str):\n        raise ValueError(\"Invalid input: str1, ch, and newch must be strings\")\n    if len(ch) != 1 or len(newch) != 1:\n        raise ValueError(\"Invalid input: ch and newch must be single characters\")\n\n    new_str = []\n\n    for char in str1:\n        if char == ch:\n            new_str.append(newch)\n        else:\n            new_str.append(char)\n\n    return ''.join(new_str)\n\n# Example usage:\nprint(replace_char(\"hello world\", \"o\", \"0\"))  # Output: hell0 w0rld\n\n\n"], "responses": ["```python\ndef replace_char(str1: str, ch: str, newch: str) -> str:\n    if not isinstance(str1, str) or not isinstance(ch, str) or not isinstance(newch, str):\n        raise ValueError(\"Invalid input: str1, ch, and newch must be strings\")\n    if len(ch) != 1 or len(newch) != 1:\n        raise ValueError(\"Invalid input: ch and newch must be single characters\")\n\n    new_str = []\n\n    for char in str1:\n        if char == ch:\n            new_str.append(newch)\n        else:\n            new_str.append(char)\n\n    return ''.join(new_str)\n\n# Example usage:\nprint(replace_char(\"hello world\", \"o\", \"0\"))  # Output: hell0 w0rld\n```"], "prompt_tokens": [578], "completion_tokens": [617], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_474_replace_char"}
{"name": "mbpp_475_sort_counter", "language": "Python3", "prompt": "from typing import Dict, List, Tuple\n\ndef sort_counter(dict1: Dict[str, int]) -> List[Tuple[str, int]]:\n    \"\"\"\n\tWrite a function to sort a dictionary by value.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_475_sort_counter.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_counter", "test": "def check(candidate):\n    \n    assert candidate({ 'Math': 400, 'Physics': 300, 'Chemistry': 250 })==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    assert candidate({ 'Math': 900, 'Physics': 1000, 'Chemistry': 1250 })==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n\ndef test_check():\n    check(sort_counter)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Dict, List, Tuple\n\ndef sort_counter(dict1: Dict[str, int]) -> List[Tuple[str, int]]:\n    sorted_items = sorted(dict1.items(), key=lambda item: item[1])\n    return sorted_items\n\n\n"], "responses": ["```python\nfrom typing import Dict, List, Tuple\n\ndef sort_counter(dict1: Dict[str, int]) -> List[Tuple[str, int]]:\n    sorted_items = sorted(dict1.items(), key=lambda item: item[1])\n    return sorted_items\n```"], "prompt_tokens": [508], "completion_tokens": [415], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_475_sort_counter"}
{"name": "mbpp_476_big_sum", "language": "Python3", "prompt": "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of the largest and smallest value in a given array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_476_big_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "big_sum", "test": "def check(candidate):\n    \n    assert candidate([-1, 2, 3, 4])==3\n    assert candidate([2, 3, 6])==8\n\ndef test_check():\n    check(big_sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    smallest = min(nums)\n    largest = max(nums)\n    result = smallest + largest\n    return result\n\n# Example usage:\nnumbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nprint(big_sum(numbers))  # Output should be 10 (1 + 9)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    smallest = min(nums)\n    largest = max(nums)\n    result = smallest + largest\n    return result\n\n# Example usage:\nnumbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nprint(big_sum(numbers))  # Output should be 10 (1 + 9)\n```"], "prompt_tokens": [448], "completion_tokens": [417], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_476_big_sum"}
{"name": "mbpp_477_is_lower", "language": "Python3", "prompt": "def is_lower(string: str) -> str:\n    \"\"\"\n\tWrite a python function to convert the given string to lower case.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_477_is_lower.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_lower", "test": "def check(candidate):\n    \n    assert candidate('TruE')=='true'\n    assert candidate('SenTenCE')=='sentence'\n\ndef test_check():\n    check(is_lower)\n\ntest_check()\n", "source_codes": ["\ndef is_lower(string: str) -> str:\n    lower_case_string = string.lower()\n    return lower_case_string\n\n# Example usage:\noriginal_string = \"Hello, World!\"\nlowercase_string = is_lower(original_string)\nprint(lowercase_string)  # Output: \"hello, world!\"\n\n\n"], "responses": ["```python\ndef is_lower(string: str) -> str:\n    lower_case_string = string.lower()\n    return lower_case_string\n\n# Example usage:\noriginal_string = \"Hello, World!\"\nlowercase_string = is_lower(original_string)\nprint(lowercase_string)  # Output: \"hello, world!\"\n```"], "prompt_tokens": [302], "completion_tokens": [248], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_477_is_lower"}
{"name": "mbpp_478_remove_lowercase", "language": "Python3", "prompt": "def remove_lowercase(str1: str) -> str:\n    \"\"\"\n\tWrite a function to remove lowercase substrings from a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_478_remove_lowercase.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_lowercase", "test": "def check(candidate):\n    \n    assert candidate('FInD')=='FID'\n    assert candidate('STRinG')=='STRG'\n\ndef test_check():\n    check(remove_lowercase)\n\ntest_check()\n", "source_codes": ["\ndef remove_lowercase(str1: str) -> str:\n    result = \"\"\n    for char in str1:\n        if not char.islower():\n            result += char\n    return result\n\n# Example usage:\nprint(remove_lowercase(\"Hello World!\"))  # Output: \"H W!\"\n\n\n"], "responses": ["```python\ndef remove_lowercase(str1: str) -> str:\n    result = \"\"\n    for char in str1:\n        if not char.islower():\n            result += char\n    return result\n\n# Example usage:\nprint(remove_lowercase(\"Hello World!\"))  # Output: \"H W!\"\n```"], "prompt_tokens": [362], "completion_tokens": [305], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_478_remove_lowercase"}
{"name": "mbpp_479_first_Digit", "language": "Python3", "prompt": "def first_Digit(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the first digit of a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "first_Digit", "test": "def check(candidate):\n    \n    assert candidate(456)==4\n    assert candidate(12)==1\n\ndef test_check():\n    check(first_Digit)\n\ntest_check()\n", "source_codes": ["\ndef first_digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n\n\n\n"], "responses": ["```python\ndef first_digit(n: int) -> int:\n    while n >= 10:\n        n //= 10\n    return n\n```"], "prompt_tokens": [359], "completion_tokens": [269], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_479_first_Digit"}
{"name": "mbpp_554_Split", "language": "Python3", "prompt": "from typing import List\n\ndef Split(list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function which takes a list of integers and only returns the odd ones.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_554_Split.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Split", "test": "def check(candidate):\n    \n    assert candidate([10, 11, 12, 13])==[11, 13]\n    assert candidate([7, 8, 9, 1])==[7, 9, 1]\n\ndef test_check():\n    check(Split)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef split_odds(numbers: List[int]) -> List[int]:\n    odd_numbers = []\n    for number in numbers:\n        if number % 2 != 0:\n            odd_numbers.append(number)\n    return odd_numbers\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nodd_numbers = split_odds(my_list)\nprint(odd_numbers)  # Output: [1, 3, 5, 7, 9]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef split_odds(numbers: List[int]) -> List[int]:\n    odd_numbers = []\n    for number in numbers:\n        if number % 2 != 0:\n            odd_numbers.append(number)\n    return odd_numbers\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nodd_numbers = split_odds(my_list)\nprint(odd_numbers)  # Output: [1, 3, 5, 7, 9]\n```"], "prompt_tokens": [490], "completion_tokens": [477], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_554_Split"}
{"name": "mbpp_555_difference", "language": "Python3", "prompt": "def difference(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_555_difference.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "difference", "test": "def check(candidate):\n    \n    assert candidate(5)==210\n    assert candidate(2)==6\n\ndef test_check():\n    check(difference)\n\ntest_check()\n", "source_codes": ["\ndef difference(n: int) -> int:\n    sum_of_naturals = n * (n + 1) // 2\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    diff = sum_of_cubes - sum_of_naturals\n    return diff\n\nprint(difference(5))\n\n\n"], "responses": ["```python\ndef difference(n: int) -> int:\n    sum_of_naturals = n * (n + 1) // 2\n    sum_of_cubes = (n * (n + 1) // 2) ** 2\n    diff = sum_of_cubes - sum_of_naturals\n    return diff\n\nprint(difference(5))\n```"], "prompt_tokens": [509], "completion_tokens": [441], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_555_difference"}
{"name": "mbpp_556_find_Odd_Pair", "language": "Python3", "prompt": "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of pairs whose xor value is odd.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_556_find_Odd_Pair.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Odd_Pair", "test": "def check(candidate):\n    \n    assert candidate([7, 2, 8, 1, 0, 5, 11], 7)==12\n    assert candidate([1, 2, 3], 3)==2\n\ndef test_check():\n    check(find_Odd_Pair)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    even_count = 0\n    odd_count = 0\n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    odd_xor_pairs = even_count * odd_count\n    return odd_xor_pairs\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    even_count = 0\n    odd_count = 0\n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    odd_xor_pairs = even_count * odd_count\n    return odd_xor_pairs\n```"], "prompt_tokens": [536], "completion_tokens": [478], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_556_find_Odd_Pair"}
{"name": "mbpp_557_toggle_string", "language": "Python3", "prompt": "def toggle_string(string: str) -> str:\n    \"\"\"\n\tWrite a function to toggle the case of all characters in a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_557_toggle_string.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "toggle_string", "test": "def check(candidate):\n    \n    assert candidate('Pangram')=='pANGRAM'\n    assert candidate('LIttLE')=='liTTle'\n\ndef test_check():\n    check(toggle_string)\n\ntest_check()\n", "source_codes": ["\ndef toggle_string(string: str) -> str:\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n\n# Example usage:\nprint(toggle_string(\"Hello World!\"))  # Output: \"hELLO wORLD!\"\n\n\n"], "responses": ["```python\ndef toggle_string(string: str) -> str:\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        elif char.isupper():\n            result += char.lower()\n        else:\n            result += char\n    return result\n\n# Example usage:\nprint(toggle_string(\"Hello World!\"))  # Output: \"hELLO wORLD!\"\n```"], "prompt_tokens": [472], "completion_tokens": [437], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_557_toggle_string"}
{"name": "mbpp_558_digit_distance_nums", "language": "Python3", "prompt": "def digit_distance_nums(n1: int, n2: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of the per-digit difference between two integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_558_digit_distance_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "digit_distance_nums", "test": "def check(candidate):\n    \n    assert candidate(23, 56)==6\n    assert candidate(123, 256)==7\n\ndef test_check():\n    check(digit_distance_nums)\n\ntest_check()\n", "source_codes": ["\ndef digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    sum_of_differences = 0\n    for digit1, digit2 in zip(str_n1, str_n2):\n        sum_of_differences += abs(int(digit1) - int(digit2))\n    return sum_of_differences\n\nresult = digit_distance_nums(123, 256)\nprint(result)\n\n\n"], "responses": ["```python\ndef digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    sum_of_differences = 0\n    for digit1, digit2 in zip(str_n1, str_n2):\n        sum_of_differences += abs(int(digit1) - int(digit2))\n    return sum_of_differences\n\nresult = digit_distance_nums(123, 256)\nprint(result)\n```"], "prompt_tokens": [502], "completion_tokens": [508], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_558_digit_distance_nums"}
{"name": "mbpp_559_max_sub_array_sum", "language": "Python3", "prompt": "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    \"\"\"\n\tWrite a function to find the sum of the largest contiguous sublist in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_559_max_sub_array_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sub_array_sum", "test": "def check(candidate):\n    \n    assert candidate([-3, -4, 5, -2, -3, 2, 6, -4], 8)==8\n    assert candidate([-4, -5, 6, -3, -4, 3, 7, -5], 8)==10\n\ndef test_check():\n    check(max_sub_array_sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    max_ending_here = a[0]\n\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n```"], "prompt_tokens": [613], "completion_tokens": [558], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_559_max_sub_array_sum"}
{"name": "mbpp_560_union_elements", "language": "Python3", "prompt": "from typing import List\n\ndef union_elements(test_tup1: List[int], test_tup2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to find the union of the elements of two given lists and output them in sorted order.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_560_union_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "union_elements", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4], [3, 4, 5, 6])==[1, 2, 3, 4, 5, 6]\n    assert candidate([11, 12, 13, 14], [13, 15, 16, 17])==[11, 12, 13, 14, 15, 16, 17]\n\ndef test_check():\n    check(union_elements)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef union_elements(test_list1: List[int], test_list2: List[int]) -> List[int]:\n    combined_list = test_list1 + test_list2\n    unique_elements = set(combined_list)\n    sorted_union = sorted(unique_elements)\n    return sorted_union\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef union_elements(test_list1: List[int], test_list2: List[int]) -> List[int]:\n    combined_list = test_list1 + test_list2\n    unique_elements = set(combined_list)\n    sorted_union = sorted(unique_elements)\n    return sorted_union\n```"], "prompt_tokens": [482], "completion_tokens": [377], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_560_union_elements"}
{"name": "mbpp_562_Find_Max_Length", "language": "Python3", "prompt": "from typing import List\n\ndef Find_Max_Length(lst: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a python function to find the length of the longest sublists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Find_Max_Length", "test": "def check(candidate):\n    \n    assert candidate([[0, 1], [2, 2], [3, 2, 1]])==3\n    assert candidate([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]])==5\n\ndef test_check():\n    check(Find_Max_Length)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_max_length(lst: List[List[int]]) -> int:\n    max_length = 0\n    for sublist in lst:\n        max_length = max(max_length, len(sublist))\n    return max_length\n\n# Example usage:\nsublists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nprint(find_max_length(sublists))  # Output: 4\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_max_length(lst: List[List[int]]) -> int:\n    max_length = 0\n    for sublist in lst:\n        max_length = max(max_length, len(sublist))\n    return max_length\n\n# Example usage:\nsublists = [[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]\nprint(find_max_length(sublists))  # Output: 4\n```"], "prompt_tokens": [423], "completion_tokens": [391], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_562_Find_Max_Length"}
{"name": "mbpp_563_extract_values", "language": "Python3", "prompt": "from typing import List\n\ndef extract_values(text: str) -> List[str]:\n    \"\"\"\n\tWrite a function to extract values between quotation marks from a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_563_extract_values.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_values", "test": "def check(candidate):\n    \n    assert candidate('\"python\",\"program\",\"language\"')==['python', 'program', 'language']\n    assert candidate('\"red\",\"blue\",\"green\",\"yellow\"')==['red', 'blue', 'green', 'yellow']\n\ndef test_check():\n    check(extract_values)\n\ntest_check()\n", "source_codes": ["\nimport re\nfrom typing import List\n\ndef extract_values(text: str) -> List[str]:\n    pattern = r'\"(.*?)\"|\\'(.*?)\\''\n    matches = re.findall(pattern, text)\n    values = [match[0] or match[1] for match in matches]\n    return values\n\n\n"], "responses": ["```python\nimport re\nfrom typing import List\n\ndef extract_values(text: str) -> List[str]:\n    pattern = r'\"(.*?)\"|\\'(.*?)\\''\n    matches = re.findall(pattern, text)\n    values = [match[0] or match[1] for match in matches]\n    return values\n```"], "prompt_tokens": [584], "completion_tokens": [524], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_563_extract_values"}
{"name": "mbpp_564_count_Pairs", "language": "Python3", "prompt": "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_564_count_Pairs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_Pairs", "test": "def check(candidate):\n    \n    assert candidate([1, 1, 1, 1], 4)==0\n    assert candidate([1, 2, 3, 4, 5], 5)==10\n\ndef test_check():\n    check(count_Pairs)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef count_Pairs(arr: List[int]) -> int:\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nprint(count_Pairs(arr))  # Output should be 10\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_Pairs(arr: List[int]) -> int:\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nprint(count_Pairs(arr))  # Output should be 10\n```"], "prompt_tokens": [588], "completion_tokens": [532], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_564_count_Pairs"}
{"name": "mbpp_565_split", "language": "Python3", "prompt": "from typing import List\n\ndef split(word: str) -> List[str]:\n    \"\"\"\n\tWrite a python function to split a string into characters.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_565_split.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "split", "test": "def check(candidate):\n    \n    assert candidate('Name')==['N', 'a', 'm', 'e']\n    assert candidate('program')==['p', 'r', 'o', 'g', 'r', 'a', 'm']\n\ndef test_check():\n    check(split)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)\n```"], "prompt_tokens": [294], "completion_tokens": [195], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_565_split"}
{"name": "mbpp_566_sum_digits", "language": "Python3", "prompt": "def sum_digits(n: int) -> int:\n    \"\"\"\n\tWrite a function to get the sum of the digits of a non-negative integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_digits", "test": "def check(candidate):\n    \n    assert candidate(12)==3\n    assert candidate(97)==16\n\ndef test_check():\n    check(sum_digits)\n\ntest_check()\n", "source_codes": ["\ndef sum_digits(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    n_str = str(n)\n    total_sum = 0\n    for digit in n_str:\n        total_sum += int(digit)\n    return total_sum\n\n# Example usage:\nprint(sum_digits(123))  # Output: 6 (1 + 2 + 3)\n\n\n"], "responses": ["```python\ndef sum_digits(n: int) -> int:\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n    n_str = str(n)\n    total_sum = 0\n    for digit in n_str:\n        total_sum += int(digit)\n    return total_sum\n\n# Example usage:\nprint(sum_digits(123))  # Output: 6 (1 + 2 + 3)\n```"], "prompt_tokens": [424], "completion_tokens": [393], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_566_sum_digits"}
{"name": "mbpp_567_issort_list", "language": "Python3", "prompt": "from typing import List\n\ndef issort_list(list1: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check whether a specified list is sorted or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_567_issort_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "issort_list", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\n    assert candidate([1, 2, 4, 6, 8, 10, 15, 14, 20])==False\n\ndef test_check():\n    check(issort_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef issort_list(list1: List[int]) -> bool:\n    if len(list1) <= 1:\n        return True\n    \n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    \n    return True\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5]\nprint(issort_list(my_list))  # Output: True\n\nmy_list = [1, 3, 2, 4, 5]\nprint(issort_list(my_list))  # Output: False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef issort_list(list1: List[int]) -> bool:\n    if len(list1) <= 1:\n        return True\n    \n    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    \n    return True\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5]\nprint(issort_list(my_list))  # Output: True\n\nmy_list = [1, 3, 2, 4, 5]\nprint(issort_list(my_list))  # Output: False\n```"], "prompt_tokens": [488], "completion_tokens": [492], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_567_issort_list"}
{"name": "mbpp_568_empty_list", "language": "Python3", "prompt": "from typing import List, Dict\n\ndef empty_list(length: int) -> List[Dict[None, None]]:\n    \"\"\"\n\tWrite a function to create a list of N empty dictionaries.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_568_empty_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "empty_list", "test": "def check(candidate):\n    \n    assert candidate(6)==[{  }, {  }, {  }, {  }, {  }, {  }]\n    assert candidate(7)==[{  }, {  }, {  }, {  }, {  }, {  }, {  }]\n\ndef test_check():\n    check(empty_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Dict\n\ndef empty_list(length: int) -> List[Dict]:\n    return [{} for _ in range(length)]\n\n\n"], "responses": ["```python\nfrom typing import List, Dict\n\ndef empty_list(length: int) -> List[Dict]:\n    return [{} for _ in range(length)]\n```"], "prompt_tokens": [506], "completion_tokens": [397], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_568_empty_list"}
{"name": "mbpp_569_sort_sublists", "language": "Python3", "prompt": "from typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    \"\"\"\n\tWrite a function to sort each sublist of strings in a given list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_sublists", "test": "def check(candidate):\n    \n    assert candidate([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\n    assert candidate([['a', 'b'], ['d', 'c'], ['g', 'h'], ['f', 'e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]\n\ndef test_check():\n    check(sort_sublists)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list1]\n\n# Example usage:\nlist_of_lists = [[\"banana\", \"apple\", \"cherry\"], [\"dog\", \"elephant\", \"cat\"]]\nsorted_list_of_lists = sort_sublists(list_of_lists)\nprint(sorted_list_of_lists)  # Output: [['apple', 'banana', 'cherry'], ['cat', 'dog', 'elephant']]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sort_sublists(list1: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list1]\n\n# Example usage:\nlist_of_lists = [[\"banana\", \"apple\", \"cherry\"], [\"dog\", \"elephant\", \"cat\"]]\nsorted_list_of_lists = sort_sublists(list_of_lists)\nprint(sorted_list_of_lists)  # Output: [['apple', 'banana', 'cherry'], ['cat', 'dog', 'elephant']]\n```"], "prompt_tokens": [537], "completion_tokens": [500], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_569_sort_sublists"}
{"name": "mbpp_572_two_unique_nums", "language": "Python3", "prompt": "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to remove duplicate numbers from a given number of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "two_unique_nums", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 2, 4, 5])==[1, 3, 4, 5]\n    assert candidate([1, 2, 3, 4, 5])==[1, 2, 3, 4, 5]\n\ndef test_check():\n    check(two_unique_nums)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef remove_duplicates(nums: List[int]) -> List[int]:\n    unique_nums = list(set(nums))\n    return unique_nums\n\ndef remove_duplicates_ordered(nums: List[int]) -> List[int]:\n    unique_nums = []\n    seen = set()\n    for num in nums:\n        if num not in seen:\n            unique_nums.append(num)\n            seen.add(num)\n    return unique_nums\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef remove_duplicates(nums: List[int]) -> List[int]:\n    unique_nums = list(set(nums))\n    return unique_nums\n\ndef remove_duplicates_ordered(nums: List[int]) -> List[int]:\n    unique_nums = []\n    seen = set()\n    for num in nums:\n        if num not in seen:\n            unique_nums.append(num)\n            seen.add(num)\n    return unique_nums\n```"], "prompt_tokens": [554], "completion_tokens": [503], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_572_two_unique_nums"}
{"name": "mbpp_573_unique_product", "language": "Python3", "prompt": "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to calculate the product of the unique numbers in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_573_unique_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "unique_product", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 1])==6\n    assert candidate([7, 8, 9, 0, 1, 1])==0\n\ndef test_check():\n    check(unique_product)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_elements = set(list_data)\n    product = 1\n    for num in unique_elements:\n        product *= num\n    return product\n\n# Example usage:\nmy_list = [1, 2, 3, 2, 4]\nprint(unique_product(my_list))  # Output should be 24\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_elements = set(list_data)\n    product = 1\n    for num in unique_elements:\n        product *= num\n    return product\n\n# Example usage:\nmy_list = [1, 2, 3, 2, 4]\nprint(unique_product(my_list))  # Output should be 24\n```"], "prompt_tokens": [402], "completion_tokens": [350], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_573_unique_product"}
{"name": "mbpp_574_surfacearea_cylinder", "language": "Python3", "prompt": "def surfacearea_cylinder(r: int, h: int) -> float:\n    \"\"\"\n\tWrite a function to find the surface area of a cylinder.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_574_surfacearea_cylinder.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "surfacearea_cylinder", "test": "def check(candidate):\n    \n    assert candidate(4, 5)==226.18800000000002\n    assert candidate(4, 10)==351.848\n\ndef test_check():\n    check(surfacearea_cylinder)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef surfacearea_cylinder(r: int, h: int) -> float:\n    base_area = 2 * math.pi * r**2\n    lateral_surface_area = 2 * math.pi * r * h\n    total_surface_area = base_area + lateral_surface_area\n    return total_surface_area\n\n# Example usage:\nradius = 5\nheight = 10\nsurface_area = surfacearea_cylinder(radius, height)\nprint(f\"The surface area of the cylinder is: {surface_area:.2f} square units\")\n\n\n"], "responses": ["```python\nimport math\n\ndef surfacearea_cylinder(r: int, h: int) -> float:\n    base_area = 2 * math.pi * r**2\n    lateral_surface_area = 2 * math.pi * r * h\n    total_surface_area = base_area + lateral_surface_area\n    return total_surface_area\n\n# Example usage:\nradius = 5\nheight = 10\nsurface_area = surfacearea_cylinder(radius, height)\nprint(f\"The surface area of the cylinder is: {surface_area:.2f} square units\")\n```"], "prompt_tokens": [460], "completion_tokens": [448], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_574_surfacearea_cylinder"}
{"name": "mbpp_576_is_Sub_Array", "language": "Python3", "prompt": "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether a list is sublist of another or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_576_is_Sub_Array.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Sub_Array", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 1], [1, 2, 1])==True\n    assert candidate([1, 0, 2, 2], [2, 2, 0])==False\n\ndef test_check():\n    check(is_Sub_Array)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i+len(B)] == B:\n            return True\n    return False\n```"], "prompt_tokens": [599], "completion_tokens": [535], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_576_is_Sub_Array"}
{"name": "mbpp_577_last_Digit_Factorial", "language": "Python3", "prompt": "def last_Digit_Factorial(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the last digit in factorial of a given number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "last_Digit_Factorial", "test": "def check(candidate):\n    \n    assert candidate(21)==0\n    assert candidate(30)==0\n\ndef test_check():\n    check(last_Digit_Factorial)\n\ntest_check()\n", "source_codes": ["\ndef last_Digit_Factorial(n: int) -> int:\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n\n# Test cases\nprint(last_Digit_Factorial(1))  # Output: 1\nprint(last_Digit_Factorial(2))  # Output: 2\nprint(last_Digit_Factorial(3))  # Output: 6\nprint(last_Digit_Factorial(4))  # Output: 4\nprint(last_Digit_Factorial(5))  # Output: 0\nprint(last_Digit_Factorial(10)) # Output: 0\n\n\n"], "responses": ["```python\ndef last_Digit_Factorial(n: int) -> int:\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n    return factorial % 10\n\n# Test cases\nprint(last_Digit_Factorial(1))  # Output: 1\nprint(last_Digit_Factorial(2))  # Output: 2\nprint(last_Digit_Factorial(3))  # Output: 6\nprint(last_Digit_Factorial(4))  # Output: 4\nprint(last_Digit_Factorial(5))  # Output: 0\nprint(last_Digit_Factorial(10)) # Output: 0\n```"], "prompt_tokens": [638], "completion_tokens": [673], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_577_last_Digit_Factorial"}
{"name": "mbpp_578_interleave_lists", "language": "Python3", "prompt": "from typing import List\n\ndef interleave_lists(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to interleave 3 lists of the same length into a single flat list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_578_interleave_lists.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "interleave_lists", "test": "def check(candidate):\n    \n    assert candidate([10, 20], [15, 2], [5, 10])==[10, 15, 5, 20, 2, 10]\n    assert candidate([11, 44], [10, 15], [20, 5])==[11, 10, 20, 44, 15, 5]\n\ndef test_check():\n    check(interleave_lists)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef interleave_lists(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    if not (len(list1) == len(list2) == len(list3)):\n        raise ValueError(\"All lists must be of the same length\")\n\n    interleaved_list = []\n\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list\n\n# Example usage:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nlist3 = [7, 8, 9]\n\ninterleaved = interleave_lists(list1, list2, list3)\nprint(interleaved)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef interleave_lists(list1: List[int], list2: List[int], list3: List[int]) -> List[int]:\n    if not (len(list1) == len(list2) == len(list3)):\n        raise ValueError(\"All lists must be of the same length\")\n\n    interleaved_list = []\n\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list\n\n# Example usage:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nlist3 = [7, 8, 9]\n\ninterleaved = interleave_lists(list1, list2, list3)\nprint(interleaved)\n```"], "prompt_tokens": [546], "completion_tokens": [550], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_578_interleave_lists"}
{"name": "mbpp_579_find_dissimilar", "language": "Python3", "prompt": "from typing import Tuple\n\ndef find_dissimilar(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to find the dissimilar elements in the given two tuples.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_579_find_dissimilar.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_dissimilar", "test": "def check(candidate):\n    \n    assert candidate((1, 2, 3, 4), (7, 2, 3, 9))==(1, 4, 7, 9)\n    assert candidate((21, 11, 25, 26), (26, 34, 21, 36))==(34, 36, 11, 25)\n\ndef test_check():\n    check(find_dissimilar)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef find_dissimilar(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    dissimilar_elements = []\n    for a, b in zip(test_tup1, test_tup2):\n        if a != b:\n            dissimilar_elements.append(a)\n            dissimilar_elements.append(b)\n    return tuple(dissimilar_elements)\n\n# Example usage:\ntup1 = (1, 2, 3, 4)\ntup2 = (1, 3, 2, 4)\nprint(find_dissimilar(tup1, tup2))  # Output will be (2, 3, 3, 2)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef find_dissimilar(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    dissimilar_elements = []\n    for a, b in zip(test_tup1, test_tup2):\n        if a != b:\n            dissimilar_elements.append(a)\n            dissimilar_elements.append(b)\n    return tuple(dissimilar_elements)\n\n# Example usage:\ntup1 = (1, 2, 3, 4)\ntup2 = (1, 3, 2, 4)\nprint(find_dissimilar(tup1, tup2))  # Output will be (2, 3, 3, 2)\n```"], "prompt_tokens": [568], "completion_tokens": [539], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_579_find_dissimilar"}
{"name": "mbpp_580_extract_even", "language": "Python3", "prompt": "from typing import Tuple, Any\n\ndef extract_even(test_tuple: Tuple[int, int, Tuple[int, int, Tuple[int, int]], int, int]) -> Any:\n    \"\"\"\n\tWrite a function to remove uneven elements in the nested mixed tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_580_extract_even.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_even", "test": "def check(candidate):\n    \n    assert candidate((5, 6, (8, 7, (4, 8)), 7, 9))==(6, (8, (4, 8)))\n    assert candidate((5, 6, (9, 8, (4, 6)), 8, 10))==(6, (8, (4, 6)), 8, 10)\n\ndef test_check():\n    check(extract_even)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple, Any\n\ndef extract_even(test_tuple: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    def is_even(num):\n        return num % 2 == 0\n\n    def remove_odd_elements(tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n        new_tuple = ()\n        for element in tup:\n            if isinstance(element, tuple):\n                new_tuple += (remove_odd_elements(element),)\n            elif isinstance(element, int) and is_even(element):\n                new_tuple += (element,)\n        return new_tuple\n\n    return remove_odd_elements(test_tuple)\n\n# Example usage:\nnested_tuple = (1, 2, (3, 4, (5, 6)), 7, 8)\nprint(extract_even(nested_tuple))  # Output should be (2, (4, (6,)), 8)\n\n\n"], "responses": ["```python\nfrom typing import Tuple, Any\n\ndef extract_even(test_tuple: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    def is_even(num):\n        return num % 2 == 0\n\n    def remove_odd_elements(tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n        new_tuple = ()\n        for element in tup:\n            if isinstance(element, tuple):\n                new_tuple += (remove_odd_elements(element),)\n            elif isinstance(element, int) and is_even(element):\n                new_tuple += (element,)\n        return new_tuple\n\n    return remove_odd_elements(test_tuple)\n\n# Example usage:\nnested_tuple = (1, 2, (3, 4, (5, 6)), 7, 8)\nprint(extract_even(nested_tuple))  # Output should be (2, (4, (6,)), 8)\n```"], "prompt_tokens": [643], "completion_tokens": [657], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_580_extract_even"}
{"name": "mbpp_581_surface_Area", "language": "Python3", "prompt": "def surface_Area(b: int, s: int) -> int:\n    \"\"\"\n\tWrite a python function to find the surface area of a square pyramid with a given base edge and height.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_581_surface_Area.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "surface_Area", "test": "def check(candidate):\n    \n    assert candidate(4, 5)==56\n    assert candidate(1, 2)==5\n\ndef test_check():\n    check(surface_Area)\n\ntest_check()\n", "source_codes": ["\ndef surface_area(b: int, s: int) -> int:\n    base_area = b ** 2\n    total_triangular_face_area = 2 * b * s\n    total_surface_area = base_area + total_triangular_face_area\n    return total_surface_area\n\n# Example usage:\nbase_edge = 5\nslant_height = 7\nprint(surface_area(base_edge, slant_height))\n\n\n"], "responses": ["```python\ndef surface_area(b: int, s: int) -> int:\n    base_area = b ** 2\n    total_triangular_face_area = 2 * b * s\n    total_surface_area = base_area + total_triangular_face_area\n    return total_surface_area\n\n# Example usage:\nbase_edge = 5\nslant_height = 7\nprint(surface_area(base_edge, slant_height))\n```"], "prompt_tokens": [667], "completion_tokens": [612], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_581_surface_Area"}
{"name": "mbpp_583_catalan_number", "language": "Python3", "prompt": "def catalan_number(num: int) -> int:\n    \"\"\"\n\tWrite a function which returns nth catalan number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_583_catalan_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "catalan_number", "test": "def check(candidate):\n    \n    assert candidate(9)==4862\n    assert candidate(7)==429\n\ndef test_check():\n    check(catalan_number)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef catalan_number(num: int) -> int:\n    return math.factorial(2 * num) // (math.factorial(num + 1) * math.factorial(num))\n\n# Example usage:\nn = 5\nprint(f\"The {n}th Catalan number is: {catalan_number(n)}\")\n\n\n"], "responses": ["```python\nimport math\n\ndef catalan_number(num: int) -> int:\n    return math.factorial(2 * num) // (math.factorial(num + 1) * math.factorial(num))\n\n# Example usage:\nn = 5\nprint(f\"The {n}th Catalan number is: {catalan_number(n)}\")\n```"], "prompt_tokens": [369], "completion_tokens": [328], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_583_catalan_number"}
{"name": "mbpp_584_find_adverbs", "language": "Python3", "prompt": "def find_adverbs(text: str) -> str:\n    \"\"\"\n\tWrite a function to find the first adverb ending with ly and its positions in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_584_find_adverbs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_adverbs", "test": "def check(candidate):\n    \n    assert candidate('Please handle the situation carefuly')=='28-36: carefuly'\n    assert candidate('Complete the task quickly')=='18-25: quickly'\n\ndef test_check():\n    check(find_adverbs)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef find_adverbs(text: str) -> str:\n    matches = re.finditer(r'\\b\\w+ly\\b', text)\n    match = next(matches, None)\n    if match:\n        adverb = match.group(0)\n        start_pos = match.start()\n        end_pos = match.end()\n        return f\"The first adverb ending with 'ly' is '{adverb}' at positions {start_pos}-{end_pos}\"\n    else:\n        return \"No adverb ending with 'ly' found.\"\n\n# Example usage:\ntext = \"He quickly realized that the slowly moving object was actually a turtle.\"\nresult = find_adverbs(text)\nprint(result)\n\n\n"], "responses": ["```python\nimport re\n\ndef find_adverbs(text: str) -> str:\n    matches = re.finditer(r'\\b\\w+ly\\b', text)\n    match = next(matches, None)\n    if match:\n        adverb = match.group(0)\n        start_pos = match.start()\n        end_pos = match.end()\n        return f\"The first adverb ending with 'ly' is '{adverb}' at positions {start_pos}-{end_pos}\"\n    else:\n        return \"No adverb ending with 'ly' found.\"\n\n# Example usage:\ntext = \"He quickly realized that the slowly moving object was actually a turtle.\"\nresult = find_adverbs(text)\nprint(result)\n```"], "prompt_tokens": [506], "completion_tokens": [515], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_584_find_adverbs"}
{"name": "mbpp_585_expensive_items", "language": "Python3", "prompt": "from typing import List, Dict, Union\n\ndef expensive_items(items: List[Dict[str, Union[str, float]]], n: int) -> List[Dict[str, Union[str, float]]]:\n    \"\"\"\n\tWrite a function to find the n most expensive items in a given dataset.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_585_expensive_items.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "expensive_items", "test": "def check(candidate):\n    \n    assert candidate([{ 'name': 'Item-1', 'price': 101.1 }, { 'name': 'Item-2', 'price': 555.22 }, { 'name': 'Item-3', 'price': 45.09 }], 2)==[{ 'name': 'Item-2', 'price': 555.22 }, { 'name': 'Item-1', 'price': 101.1 }]\n    assert candidate([{ 'name': 'Item-1', 'price': 101.1 }, { 'name': 'Item-2', 'price': 555.22 }, { 'name': 'Item-3', 'price': 45.09 }, { 'name': 'Item-4', 'price': 22.75 }], 1)==[{ 'name': 'Item-2', 'price': 555.22 }]\n\ndef test_check():\n    check(expensive_items)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Dict, Union\n\ndef expensive_items(items: List[Dict[str, Union[str, float]]], n: int) -> List[Dict[str, Union[str, float]]]:\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    top_n_items = sorted_items[:n]\n    return top_n_items\n\n# Example usage:\nitems = [\n    {\"name\": \"Laptop\", \"price\": 999.99},\n    {\"name\": \"Smartphone\", \"price\": 499.99},\n    {\"name\": \"Headphones\", \"price\": 199.99},\n    {\"name\": \"Monitor\", \"price\": 299.99},\n    {\"name\": \"Keyboard\", \"price\": 89.99}\n]\n\nprint(expensive_items(items, 3))\n\n\n"], "responses": ["```python\nfrom typing import List, Dict, Union\n\ndef expensive_items(items: List[Dict[str, Union[str, float]]], n: int) -> List[Dict[str, Union[str, float]]]:\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    top_n_items = sorted_items[:n]\n    return top_n_items\n\n# Example usage:\nitems = [\n    {\"name\": \"Laptop\", \"price\": 999.99},\n    {\"name\": \"Smartphone\", \"price\": 499.99},\n    {\"name\": \"Headphones\", \"price\": 199.99},\n    {\"name\": \"Monitor\", \"price\": 299.99},\n    {\"name\": \"Keyboard\", \"price\": 89.99}\n]\n\nprint(expensive_items(items, 3))\n```"], "prompt_tokens": [580], "completion_tokens": [570], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_585_expensive_items"}
{"name": "mbpp_586_split_Arr", "language": "Python3", "prompt": "from typing import List\n\ndef split_Arr(l: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a python function to split a list at the nth eelment and add the first part to the end.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_586_split_Arr.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "split_Arr", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4], 1)==[2, 3, 4, 1]\n    assert candidate([0, 1, 2, 3, 4, 5, 6, 7], 3)==[3, 4, 5, 6, 7, 0, 1, 2]\n\ndef test_check():\n    check(split_Arr)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef split_Arr(l: List[int], n: int) -> List[int]:\n    if n < 0 or n > len(l):\n        return l\n    \n    first_part = l[:n]\n    second_part = l[n:]\n    \n    return second_part + first_part\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6]\nn = 3\nprint(split_Arr(my_list, n))  # Output: [4, 5, 6, 1, 2, 3]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef split_Arr(l: List[int], n: int) -> List[int]:\n    if n < 0 or n > len(l):\n        return l\n    \n    first_part = l[:n]\n    second_part = l[n:]\n    \n    return second_part + first_part\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6]\nn = 3\nprint(split_Arr(my_list, n))  # Output: [4, 5, 6, 1, 2, 3]\n```"], "prompt_tokens": [470], "completion_tokens": [436], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_586_split_Arr"}
{"name": "mbpp_587_list_tuple", "language": "Python3", "prompt": "from typing import List, Any\n\ndef list_tuple(listx: List[int]) -> Any:\n    \"\"\"\n\tWrite a function to convert a list to a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_587_list_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "list_tuple", "test": "def check(candidate):\n    \n    assert candidate([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\n    assert candidate([58, 44, 56])==(58, 44, 56)\n\ndef test_check():\n    check(list_tuple)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef list_tuple(listx: List[int]) -> Tuple[int, ...]:\n    return tuple(listx)\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef list_tuple(listx: List[int]) -> Tuple[int, ...]:\n    return tuple(listx)\n```"], "prompt_tokens": [464], "completion_tokens": [365], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_587_list_tuple"}
{"name": "mbpp_588_big_diff", "language": "Python3", "prompt": "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the difference between largest and smallest value in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_588_big_diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "big_diff", "test": "def check(candidate):\n    \n    assert candidate([4, 5, 12])==8\n    assert candidate([9, 2, 3])==7\n\ndef test_check():\n    check(big_diff)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError(\"The list is empty\")\n    \n    max_value = max(nums)\n    min_value = min(nums)\n    difference = max_value - min_value\n    \n    return difference\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError(\"The list is empty\")\n    \n    max_value = max(nums)\n    min_value = min(nums)\n    difference = max_value - min_value\n    \n    return difference\n```"], "prompt_tokens": [425], "completion_tokens": [348], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_588_big_diff"}
{"name": "mbpp_589_perfect_squares", "language": "Python3", "prompt": "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find perfect squares between two given numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_589_perfect_squares.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "perfect_squares", "test": "def check(candidate):\n    \n    assert candidate(50, 100)==[64, 81, 100]\n    assert candidate(100, 200)==[100, 121, 144, 169, 196]\n\ndef test_check():\n    check(perfect_squares)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    perfect_squares_list = [i**2 for i in range(start, end + 1)]\n    return perfect_squares_list\n\n\n"], "responses": ["```python\nfrom typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    perfect_squares_list = [i**2 for i in range(start, end + 1)]\n    return perfect_squares_list\n```"], "prompt_tokens": [517], "completion_tokens": [454], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_589_perfect_squares"}
{"name": "mbpp_591_swap_List", "language": "Python3", "prompt": "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to interchange the first and last elements in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_591_swap_List.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "swap_List", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3])==[3, 2, 1]\n    assert candidate([4, 5, 6])==[6, 5, 4]\n\ndef test_check():\n    check(swap_List)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef swap_list(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef swap_list(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n```"], "prompt_tokens": [426], "completion_tokens": [343], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_591_swap_List"}
{"name": "mbpp_592_sum_Of_product", "language": "Python3", "prompt": "def sum_Of_product(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of the product of consecutive binomial co-efficients.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_592_sum_Of_product.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_Of_product", "test": "def check(candidate):\n    \n    assert candidate(4)==56\n    assert candidate(1)==1\n\ndef test_check():\n    check(sum_Of_product)\n\ntest_check()\n", "source_codes": ["\nfrom math import factorial\n\ndef binomial_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef sum_of_product_of_consecutive_binomial_coefficients(n):\n    sum_of_products = 0\n    for k in range(n):\n        sum_of_products += binomial_coefficient(n, k) * binomial_coefficient(n, k + 1)\n    return sum_of_products\n\n# Example usage:\nn = 5\nprint(sum_of_product_of_consecutive_binomial_coefficients(n))  # Output for n=5 should be 70\n\n\n"], "responses": ["```python\nfrom math import factorial\n\ndef binomial_coefficient(n, k):\n    return factorial(n) // (factorial(k) * factorial(n - k))\n\ndef sum_of_product_of_consecutive_binomial_coefficients(n):\n    sum_of_products = 0\n    for k in range(n):\n        sum_of_products += binomial_coefficient(n, k) * binomial_coefficient(n, k + 1)\n    return sum_of_products\n\n# Example usage:\nn = 5\nprint(sum_of_product_of_consecutive_binomial_coefficients(n))  # Output for n=5 should be 70\n```"], "prompt_tokens": [598], "completion_tokens": [595], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_592_sum_Of_product"}
{"name": "mbpp_593_removezero_ip", "language": "Python3", "prompt": "def removezero_ip(ip: str) -> str:\n    \"\"\"\n\tWrite a function to remove leading zeroes from an ip address.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_593_removezero_ip.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "removezero_ip", "test": "def check(candidate):\n    \n    assert candidate('12.01.024')=='12.1.24'\n    assert candidate('216.08.094.0196')=='216.8.94.196'\n\ndef test_check():\n    check(removezero_ip)\n\ntest_check()\n", "source_codes": ["\ndef removezero_ip(ip: str) -> str:\n    octets = ip.split('.')\n    stripped_octets = [str(int(octet)) for octet in octets]\n    new_ip = '.'.join(stripped_octets)\n    return new_ip\n\n\n"], "responses": ["```python\ndef removezero_ip(ip: str) -> str:\n    octets = ip.split('.')\n    stripped_octets = [str(int(octet)) for octet in octets]\n    new_ip = '.'.join(stripped_octets)\n    return new_ip\n```"], "prompt_tokens": [402], "completion_tokens": [344], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_593_removezero_ip"}
{"name": "mbpp_594_diff_even_odd", "language": "Python3", "prompt": "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the difference of the first even and first odd number of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "diff_even_odd", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==1\n    assert candidate([1, 5, 7, 9, 10])==9\n\ndef test_check():\n    check(diff_even_odd)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return 0\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        elif first_odd is None and num % 2 != 0:\n            first_odd = num\n        \n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return 0\n```"], "prompt_tokens": [579], "completion_tokens": [562], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_594_diff_even_odd"}
{"name": "mbpp_595_min_Swaps", "language": "Python3", "prompt": "from typing import Any\n\ndef min_Swaps(str1: str, str2: str) -> Any:\n    \"\"\"\n\tWrite a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_Swaps", "test": "def check(candidate):\n    \n    assert candidate('111', '000')=='Not Possible'\n    assert candidate('111', '110')=='Not Possible'\n\ndef test_check():\n    check(min_Swaps)\n\ntest_check()\n", "source_codes": ["\ndef min_Swaps(str1: str, str2: str) -> int:\n    if len(str1) != len(str2):\n        return \"The strings are not of the same length, so swaps are not possible.\"\n\n    swap_count = 0\n\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            swap_count += 1\n\n    min_swaps = swap_count // 2\n\n    return min_swaps\n\n# Example usage:\nstr1 = \"1100\"\nstr2 = \"1001\"\nprint(min_Swaps(str1, str2))  # Output should be 1\n\n\n"], "responses": ["```python\ndef min_Swaps(str1: str, str2: str) -> int:\n    if len(str1) != len(str2):\n        return \"The strings are not of the same length, so swaps are not possible.\"\n\n    swap_count = 0\n\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            swap_count += 1\n\n    min_swaps = swap_count // 2\n\n    return min_swaps\n\n# Example usage:\nstr1 = \"1100\"\nstr2 = \"1001\"\nprint(min_Swaps(str1, str2))  # Output should be 1\n```"], "prompt_tokens": [645], "completion_tokens": [621], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_595_min_Swaps"}
{"name": "mbpp_597_find_kth", "language": "Python3", "prompt": "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    \"\"\"\n\tWrite a function to find kth element from the given two sorted arrays.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_597_find_kth.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_kth", "test": "def check(candidate):\n    \n    assert candidate([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7)==256\n    assert candidate([3, 4, 7, 8, 10], [2, 5, 9, 11], 6)==8\n\ndef test_check():\n    check(find_kth)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    index1, index2 = 0, 0\n    while True:\n        if index1 == len(arr1):\n            return arr2[index2 + k - 1]\n        if index2 == len(arr2):\n            return arr1[index1 + k - 1]\n        if k == 1:\n            return min(arr1[index1], arr2[index2])\n        \n        mid = k // 2\n        new_index1 = min(index1 + mid, len(arr1)) - 1\n        new_index2 = min(index2 + mid, len(arr2)) - 1\n        pivot1, pivot2 = arr1[new_index1], arr2[new_index2]\n        \n        if pivot1 <= pivot2:\n            k -= new_index1 - index1 + 1\n            index1 = new_index1 + 1\n        else:\n            k -= new_index2 - index2 + 1\n            index2 = new_index2 + 1\n\n# Example usage:\narr1 = [1, 3, 5]\narr2 = [2, 4, 6]\nk = 4\nprint(find_kth(arr1, arr2, k))  # Output should be 4\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    index1, index2 = 0, 0\n    while True:\n        if index1 == len(arr1):\n            return arr2[index2 + k - 1]\n        if index2 == len(arr2):\n            return arr1[index1 + k - 1]\n        if k == 1:\n            return min(arr1[index1], arr2[index2])\n        \n        mid = k // 2\n        new_index1 = min(index1 + mid, len(arr1)) - 1\n        new_index2 = min(index2 + mid, len(arr2)) - 1\n        pivot1, pivot2 = arr1[new_index1], arr2[new_index2]\n        \n        if pivot1 <= pivot2:\n            k -= new_index1 - index1 + 1\n            index1 = new_index1 + 1\n        else:\n            k -= new_index2 - index2 + 1\n            index2 = new_index2 + 1\n\n# Example usage:\narr1 = [1, 3, 5]\narr2 = [2, 4, 6]\nk = 4\nprint(find_kth(arr1, arr2, k))  # Output should be 4\n```"], "prompt_tokens": [695], "completion_tokens": [828], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_597_find_kth"}
{"name": "mbpp_598_armstrong_number", "language": "Python3", "prompt": "def armstrong_number(number: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is armstrong or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "armstrong_number", "test": "def check(candidate):\n    \n    assert candidate(259)==False\n    assert candidate(4458)==False\n\ndef test_check():\n    check(armstrong_number)\n\ntest_check()\n", "source_codes": ["\ndef armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    num_digits = len(num_str)\n    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)\n    return sum_of_powers == number\n\n# Example usage:\nprint(armstrong_number(153))  # Output: True\nprint(armstrong_number(123))  # Output: False\n\n\n"], "responses": ["```python\ndef armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    num_digits = len(num_str)\n    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)\n    return sum_of_powers == number\n\n# Example usage:\nprint(armstrong_number(153))  # Output: True\nprint(armstrong_number(123))  # Output: False\n```"], "prompt_tokens": [472], "completion_tokens": [440], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_598_armstrong_number"}
{"name": "mbpp_599_sum_average", "language": "Python3", "prompt": "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    \"\"\"\n\tWrite a function to find sum and average of first n natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_599_sum_average.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_average", "test": "def check(candidate):\n    \n    assert candidate(15)==(120, 8.0)\n    assert candidate(20)==(210, 10.5)\n\ndef test_check():\n    check(sum_average)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    sum_n = number * (number + 1) // 2\n    average_n = sum_n / number\n    return sum_n, average_n\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    sum_n = number * (number + 1) // 2\n    average_n = sum_n / number\n    return sum_n, average_n\n```"], "prompt_tokens": [492], "completion_tokens": [412], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_599_sum_average"}
{"name": "mbpp_600_is_Even", "language": "Python3", "prompt": "def is_Even(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the given number is even or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_600_is_Even.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_Even", "test": "def check(candidate):\n    \n    assert candidate(2)==True\n    assert candidate(3)==False\n\ndef test_check():\n    check(is_Even)\n\ntest_check()\n", "source_codes": ["\ndef is_Even(n: int) -> bool:\n    return n % 2 == 0\n\n# Example usage:\nprint(is_Even(4))  # Should return True, because 4 is even.\nprint(is_Even(5))  # Should return False, because 5 is not even.\n\n\n"], "responses": ["```python\ndef is_Even(n: int) -> bool:\n    return n % 2 == 0\n\n# Example usage:\nprint(is_Even(4))  # Should return True, because 4 is even.\nprint(is_Even(5))  # Should return False, because 5 is not even.\n```"], "prompt_tokens": [401], "completion_tokens": [346], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_600_is_Even"}
{"name": "mbpp_602_first_repeated_char", "language": "Python3", "prompt": "from typing import Optional\n\ndef first_repeated_char(str1: str) -> Optional[str]:\n    \"\"\"\n\tWrite a python function to find the first repeated character in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_602_first_repeated_char.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "first_repeated_char", "test": "def check(candidate):\n    \n    assert candidate('abc')==None\n    assert candidate('123123')=='1'\n\ndef test_check():\n    check(first_repeated_char)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Optional\n\ndef first_repeated_char(str1: str) -> Optional[str]:\n    seen_chars = set()\n    for char in str1:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n    return None\n\n# Example usage:\nprint(first_repeated_char(\"abca\"))  # Output: 'a'\nprint(first_repeated_char(\"abc\"))   # Output: None\n\n\n"], "responses": ["```python\nfrom typing import Optional\n\ndef first_repeated_char(str1: str) -> Optional[str]:\n    seen_chars = set()\n    for char in str1:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n    return None\n\n# Example usage:\nprint(first_repeated_char(\"abca\"))  # Output: 'a'\nprint(first_repeated_char(\"abc\"))   # Output: None\n```"], "prompt_tokens": [365], "completion_tokens": [317], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_602_first_repeated_char"}
{"name": "mbpp_603_get_ludic", "language": "Python3", "prompt": "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    \"\"\"\n\tWrite a function to get all lucid numbers smaller than or equal to a given integer.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_603_get_ludic.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_ludic", "test": "def check(candidate):\n    \n    assert candidate(25)==[1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\n    assert candidate(45)==[1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]\n\ndef test_check():\n    check(get_ludic)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n\n    while numbers:\n        ludic = numbers[0]\n        ludic_numbers.append(ludic)\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % ludic != 0]\n    \n    return ludic_numbers\n\n# Example usage:\nprint(get_ludic(25))  # This will print ludic numbers up to 25\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n\n    while numbers:\n        ludic = numbers[0]\n        ludic_numbers.append(ludic)\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % ludic != 0]\n    \n    return ludic_numbers\n\n# Example usage:\nprint(get_ludic(25))  # This will print ludic numbers up to 25\n```"], "prompt_tokens": [566], "completion_tokens": [544], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_603_get_ludic"}
{"name": "mbpp_604_reverse_words", "language": "Python3", "prompt": "def reverse_words(s: str) -> str:\n    \"\"\"\n\tWrite a function to reverse words seperated by spaces in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_604_reverse_words.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "reverse_words", "test": "def check(candidate):\n    \n    assert candidate('java language')=='language java'\n    assert candidate('indian man')=='man indian'\n\ndef test_check():\n    check(reverse_words)\n\ntest_check()\n", "source_codes": ["\ndef reverse_words(s: str) -> str:\n    words = s.split(' ')\n    words.reverse()\n    reversed_s = ' '.join(words)\n    return reversed_s\n\n# Example usage:\ninput_string = \"Hello World\"\nprint(reverse_words(input_string))  # Output: \"World Hello\"\n\n\n"], "responses": ["```python\ndef reverse_words(s: str) -> str:\n    words = s.split(' ')\n    words.reverse()\n    reversed_s = ' '.join(words)\n    return reversed_s\n\n# Example usage:\ninput_string = \"Hello World\"\nprint(reverse_words(input_string))  # Output: \"World Hello\"\n```"], "prompt_tokens": [342], "completion_tokens": [285], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_604_reverse_words"}
{"name": "mbpp_605_prime_num", "language": "Python3", "prompt": "def prime_num(num: int) -> bool:\n    \"\"\"\n\tWrite a function to check if the given integer is a prime number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_605_prime_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "prime_num", "test": "def check(candidate):\n    \n    assert candidate(7)==True\n    assert candidate(-1010)==False\n\ndef test_check():\n    check(prime_num)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef prime_num(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Example usage:\nprint(prime_num(29))  # Should return True\nprint(prime_num(10))  # Should return False\n\n\n"], "responses": ["```python\nimport math\n\ndef prime_num(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n# Example usage:\nprint(prime_num(29))  # Should return True\nprint(prime_num(10))  # Should return False\n```"], "prompt_tokens": [497], "completion_tokens": [470], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_605_prime_num"}
{"name": "mbpp_606_radian_degree", "language": "Python3", "prompt": "def radian_degree(degree: int) -> float:\n    \"\"\"\n\tWrite a function to convert degrees to radians.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_606_radian_degree.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "radian_degree", "test": "def check(candidate):\n    \n    assert candidate(60)==1.0471975511965976\n    assert candidate(120)==2.0943951023931953\n\ndef test_check():\n    check(radian_degree)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef radian_degree(degree: int) -> float:\n    radians = degree * (math.pi / 180)\n    return radians\n\n# Example usage:\ndegree_value = 90\nradian_value = radian_degree(degree_value)\nprint(f\"{degree_value} degrees is equal to {radian_value} radians.\")\n\n\n"], "responses": ["```python\nimport math\n\ndef radian_degree(degree: int) -> float:\n    radians = degree * (math.pi / 180)\n    return radians\n\n# Example usage:\ndegree_value = 90\nradian_value = radian_degree(degree_value)\nprint(f\"{degree_value} degrees is equal to {radian_value} radians.\")\n```"], "prompt_tokens": [276], "completion_tokens": [236], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_606_radian_degree"}
{"name": "mbpp_607_find_literals", "language": "Python3", "prompt": "from typing import Tuple\n\ndef find_literals(text: str, pattern: str) -> Tuple[str, int, int]:\n    \"\"\"\n\tWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_607_find_literals.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_literals", "test": "def check(candidate):\n    \n    assert candidate('Its been a very crazy procedure right', 'crazy')==('crazy', 16, 21)\n    assert candidate('Hardest choices required strongest will', 'will')==('will', 35, 39)\n\ndef test_check():\n    check(find_literals)\n\ntest_check()\n", "source_codes": ["\nimport re\nfrom typing import Tuple, Optional\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None\n\n\n"], "responses": ["```python\nimport re\nfrom typing import Tuple, Optional\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None\n```"], "prompt_tokens": [578], "completion_tokens": [469], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_607_find_literals"}
{"name": "mbpp_608_bell_Number", "language": "Python3", "prompt": "def bell_Number(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find nth bell number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_608_bell_Number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "bell_Number", "test": "def check(candidate):\n    \n    assert candidate(3)==5\n    assert candidate(4)==15\n\ndef test_check():\n    check(bell_Number)\n\ntest_check()\n", "source_codes": ["\ndef bell_number(n: int) -> int:\n    bell_triangle = [[1]]\n    \n    for i in range(1, n+1):\n        row = [bell_triangle[i-1][-1]]\n        for j in range(1, i+1):\n            row.append(row[j-1] + bell_triangle[i-1][j-1])\n        bell_triangle.append(row)\n    \n    return bell_triangle[n][0]\n\n# Example usage:\nprint(bell_number(5))  # Output: 52\n\n\n"], "responses": ["```python\ndef bell_number(n: int) -> int:\n    bell_triangle = [[1]]\n    \n    for i in range(1, n+1):\n        row = [bell_triangle[i-1][-1]]\n        for j in range(1, i+1):\n            row.append(row[j-1] + bell_triangle[i-1][j-1])\n        bell_triangle.append(row)\n    \n    return bell_triangle[n][0]\n\n# Example usage:\nprint(bell_number(5))  # Output: 52\n```"], "prompt_tokens": [575], "completion_tokens": [574], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_608_bell_Number"}
{"name": "mbpp_610_remove_kth_element", "language": "Python3", "prompt": "from typing import List\n\ndef remove_kth_element(list1: List[int], L: int) -> List[int]:\n    \"\"\"\n\tWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_610_remove_kth_element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_kth_element", "test": "def check(candidate):\n    \n    assert candidate([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5)==[10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]\n\ndef test_check():\n    check(remove_kth_element)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if 0 <= k < len(list1):\n        del list1[k]\n    else:\n        print(f\"Index {k} is out of bounds for the list.\")\n    return list1\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5]\nk = 2\nnew_list = remove_kth_element(my_list, k)\nprint(new_list)\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if 0 <= k < len(list1):\n        del list1[k]\n    else:\n        print(f\"Index {k} is out of bounds for the list.\")\n    return list1\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5]\nk = 2\nnew_list = remove_kth_element(my_list, k)\nprint(new_list)\n```"], "prompt_tokens": [564], "completion_tokens": [507], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_610_remove_kth_element"}
{"name": "mbpp_611_max_of_nth", "language": "Python3", "prompt": "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    \"\"\"\n\tWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_611_max_of_nth.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_of_nth", "test": "def check(candidate):\n    \n    assert candidate([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1)==10\n    assert candidate([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1)==11\n\ndef test_check():\n    check(max_of_nth)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list or N < 0 or N >= len(test_list[0]):\n        raise ValueError(\"Invalid column index\")\n    max_value = max(row[N] for row in test_list if len(row) > N)\n    return max_value\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nN = 2\nprint(max_of_nth(matrix, N))  # Output should be 9\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list or N < 0 or N >= len(test_list[0]):\n        raise ValueError(\"Invalid column index\")\n    max_value = max(row[N] for row in test_list if len(row) > N)\n    return max_value\n\n# Example usage:\nmatrix = [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n]\n\nN = 2\nprint(max_of_nth(matrix, N))  # Output should be 9\n```"], "prompt_tokens": [571], "completion_tokens": [546], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_611_max_of_nth"}
{"name": "mbpp_612_merge", "language": "Python3", "prompt": "from typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    \"\"\"\n\tWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_612_merge.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "merge", "test": "def check(candidate):\n    \n    assert candidate([[1, 2], [3, 4], [5, 6], [7, 8]])==[[1, 3, 5, 7], [2, 4, 6, 8]]\n    assert candidate([['x', 'y', 'z'], ['a', 'b', 'c'], ['m', 'n', 'o']])==[['x', 'a', 'm'], ['y', 'b', 'n'], ['z', 'c', 'o']]\n\ndef test_check():\n    check(merge)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    first_elements = []\n    second_elements = []\n    \n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    \n    merged_list = [first_elements, second_elements]\n    \n    return merged_list\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    first_elements = []\n    second_elements = []\n    \n    for sublist in lst:\n        first_elements.append(sublist[0])\n        second_elements.append(sublist[1])\n    \n    merged_list = [first_elements, second_elements]\n    \n    return merged_list\n```"], "prompt_tokens": [501], "completion_tokens": [379], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_612_merge"}
{"name": "mbpp_614_cummulative_sum", "language": "Python3", "prompt": "from typing import List\n\ndef cummulative_sum(test_list: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a function to find the cumulative sum of all the values that are present in the given list of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_614_cummulative_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "cummulative_sum", "test": "def check(candidate):\n    \n    assert candidate([[2, 4], [6, 7, 8], [3, 7]])==37\n    assert candidate([[3, 5], [7, 8, 9], [4, 8]])==44\n\ndef test_check():\n    check(cummulative_sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef cumulative_sum(test_list: List[List[int]]) -> int:\n    total_sum = 0\n    for inner_list in test_list:\n        for num in inner_list:\n            total_sum += num\n    return total_sum\n\n# Example usage:\nnested_list = [[1, 2, 3], [4, 5], [6]]\nprint(cumulative_sum(nested_list))  # Output should be 21\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef cumulative_sum(test_list: List[List[int]]) -> int:\n    total_sum = 0\n    for inner_list in test_list:\n        for num in inner_list:\n            total_sum += num\n    return total_sum\n\n# Example usage:\nnested_list = [[1, 2, 3], [4, 5], [6]]\nprint(cumulative_sum(nested_list))  # Output should be 21\n```"], "prompt_tokens": [435], "completion_tokens": [377], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_614_cummulative_sum"}
{"name": "mbpp_615_average_tuple", "language": "Python3", "prompt": "from typing import List\n\ndef average_tuple(nums: List[List[int]]) -> List[float]:\n    \"\"\"\n\tWrite a function which takes a lists of lists and returns the average value for each sublist as a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_615_average_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "average_tuple", "test": "def check(candidate):\n    \n    assert candidate([[1, 1, -5], [30, -15, 56], [81, -60, -39], [-10, 2, 3]])==[25.5, -18.0, 3.75]\n    assert candidate([[100, 100, 100, 120], [300, 450, 560, 450], [810, 800, 390, 320], [10, 20, 30, 40]])==[305.0, 342.5, 270.0, 232.5]\n\ndef test_check():\n    check(average_tuple)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef average_tuple(nums: List[List[int]]) -> List[float]:\n    averages = []\n    for sublist in nums:\n        if len(sublist) == 0:\n            averages.append(0.0)\n        else:\n            sublist_average = sum(sublist) / len(sublist)\n            averages.append(sublist_average)\n    return averages\n\n# Example usage:\nsublists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(average_tuple(sublists))  # Output: [2.0, 5.0, 8.0]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef average_tuple(nums: List[List[int]]) -> List[float]:\n    averages = []\n    for sublist in nums:\n        if len(sublist) == 0:\n            averages.append(0.0)\n        else:\n            sublist_average = sum(sublist) / len(sublist)\n            averages.append(sublist_average)\n    return averages\n\n# Example usage:\nsublists = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(average_tuple(sublists))  # Output: [2.0, 5.0, 8.0]\n```"], "prompt_tokens": [570], "completion_tokens": [558], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_615_average_tuple"}
{"name": "mbpp_616_tuple_modulo", "language": "Python3", "prompt": "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function which takes two tuples of the same length and performs the element wise modulo.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_616_tuple_modulo.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tuple_modulo", "test": "def check(candidate):\n    \n    assert candidate((11, 5, 6, 7), (6, 7, 8, 6))==(5, 5, 6, 1)\n    assert candidate((12, 6, 7, 8), (7, 8, 9, 7))==(5, 6, 7, 1)\n\ndef test_check():\n    check(tuple_modulo)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    result = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n    return result\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, int, int, int], test_tup2: Tuple[int, int, int, int]) -> Tuple[int, int, int, int]:\n    result = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n    return result\n```"], "prompt_tokens": [493], "completion_tokens": [370], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_616_tuple_modulo"}
{"name": "mbpp_617_min_Jumps", "language": "Python3", "prompt": "from typing import Tuple\n\ndef min_Jumps(steps: Tuple[int, int], d: int) -> float:\n    \"\"\"\n\tWrite a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_617_min_Jumps.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_Jumps", "test": "def check(candidate):\n    \n    assert candidate((3, 4), 0)==0\n    assert candidate((11, 14), 11)==1\n\ndef test_check():\n    check(min_Jumps)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\nfrom math import gcd\n\ndef min_Jumps(steps: Tuple[int, int], d: int) -> int:\n    step1, step2 = steps\n    g = gcd(step1, step2)\n    if d % g != 0:\n        return -1\n    max_step2 = d // step2\n    for step2_count in range(max_step2, -1, -1):\n        remaining_distance = d - (step2_count * step2)\n        if remaining_distance % step1 == 0:\n            step1_count = remaining_distance // step1\n            return step1_count + step2_count\n    return -1\n\n# Example usage:\nprint(min_Jumps((3, 5), 11))  # Should return 3\n\n\n"], "responses": ["```python\nfrom typing import Tuple\nfrom math import gcd\n\ndef min_Jumps(steps: Tuple[int, int], d: int) -> int:\n    step1, step2 = steps\n    g = gcd(step1, step2)\n    if d % g != 0:\n        return -1\n    max_step2 = d // step2\n    for step2_count in range(max_step2, -1, -1):\n        remaining_distance = d - (step2_count * step2)\n        if remaining_distance % step1 == 0:\n            step1_count = remaining_distance // step1\n            return step1_count + step2_count\n    return -1\n\n# Example usage:\nprint(min_Jumps((3, 5), 11))  # Should return 3\n```"], "prompt_tokens": [773], "completion_tokens": [753], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_617_min_Jumps"}
{"name": "mbpp_618_div_list", "language": "Python3", "prompt": "from typing import List\n\ndef div_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    \"\"\"\n\tWrite a function to divide two lists element wise.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "div_list", "test": "def check(candidate):\n    \n    assert candidate([3, 2], [1, 4])==[3.0, 0.5]\n    assert candidate([90, 120], [50, 70])==[1.8, 1.7142857142857142]\n\ndef test_check():\n    check(div_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef div_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must be of the same length.\")\n    \n    if 0 in nums2:\n        raise ValueError(\"The second list cannot contain zeros.\")\n    \n    result = [num1 / num2 for num1, num2 in zip(nums1, nums2)]\n    \n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef div_list(nums1: List[int], nums2: List[int]) -> List[float]:\n    if len(nums1) != len(nums2):\n        raise ValueError(\"Both lists must be of the same length.\")\n    \n    if 0 in nums2:\n        raise ValueError(\"The second list cannot contain zeros.\")\n    \n    result = [num1 / num2 for num1, num2 in zip(nums1, nums2)]\n    \n    return result\n```"], "prompt_tokens": [544], "completion_tokens": [506], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_618_div_list"}
{"name": "mbpp_619_move_num", "language": "Python3", "prompt": "def move_num(test_str: str) -> str:\n    \"\"\"\n\tWrite a function to move all the numbers to the end of the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_619_move_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "move_num", "test": "def check(candidate):\n    \n    assert candidate('Avengers124Assemble')=='AvengersAssemble124'\n    assert candidate('Its11our12path13to14see15things16do17things')=='Itsourpathtoseethingsdothings11121314151617'\n\ndef test_check():\n    check(move_num)\n\ntest_check()\n", "source_codes": ["\ndef move_num(test_str: str) -> str:\n    digits = \"\"\n    non_digits = \"\"\n    for char in test_str:\n        if char.isdigit():\n            digits += char\n        else:\n            non_digits += char\n    result = non_digits + digits\n    return result\n\n# Example usage:\ntest_str = \"Hello123World456\"\nresult = move_num(test_str)\nprint(result)  # Output: HelloWorld123456\n\n\n"], "responses": ["```python\ndef move_num(test_str: str) -> str:\n    digits = \"\"\n    non_digits = \"\"\n    for char in test_str:\n        if char.isdigit():\n            digits += char\n        else:\n            non_digits += char\n    result = non_digits + digits\n    return result\n\n# Example usage:\ntest_str = \"Hello123World456\"\nresult = move_num(test_str)\nprint(result)  # Output: HelloWorld123456\n```"], "prompt_tokens": [442], "completion_tokens": [410], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_619_move_num"}
{"name": "mbpp_622_get_median", "language": "Python3", "prompt": "from typing import List\n\ndef get_median(arr1: List[int], arr2: List[int], n: int) -> float:\n    \"\"\"\n\tWrite a function to find the median of two sorted lists of same size.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_median", "test": "def check(candidate):\n    \n    assert candidate([2, 4, 8, 9], [7, 13, 19, 28], 4)==8.5\n    assert candidate([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6)==25.0\n\ndef test_check():\n    check(get_median)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef findMedianSortedArrays(nums1: List[int], nums2: List[int]) -> float:\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    \n    x, y = len(nums1), len(nums2)\n    low, high = 0, x\n    \n    while low <= high:\n        partitionX = (low + high) // 2\n        partitionY = (x + y + 1) // 2 - partitionX\n        \n        maxX = float('-inf') if partitionX == 0 else nums1[partitionX - 1]\n        minX = float('inf') if partitionX == x else nums1[partitionX]\n        \n        maxY = float('-inf') if partitionY == 0 else nums2[partitionY - 1]\n        minY = float('inf') if partitionY == y else nums2[partitionY]\n        \n        if maxX <= minY and maxY <= minX:\n            if (x + y) % 2 == 0:\n                return (max(maxX, maxY) + min(minX, minY)) / 2\n            else:\n                return max(maxX, maxY)\n        elif maxX > minY:\n            high = partitionX - 1\n        else:\n            low = partitionX + 1\n    \n    raise ValueError(\"Input arrays are not sorted or not of the same size\")\n\n# Example usage:\narr1 = [1, 3, 5]\narr2 = [2, 4, 6]\nmedian = findMedianSortedArrays(arr1, arr2)\nprint(median)  # Output: 3.5\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef findMedianSortedArrays(nums1: List[int], nums2: List[int]) -> float:\n    if len(nums1) > len(nums2):\n        nums1, nums2 = nums2, nums1\n    \n    x, y = len(nums1), len(nums2)\n    low, high = 0, x\n    \n    while low <= high:\n        partitionX = (low + high) // 2\n        partitionY = (x + y + 1) // 2 - partitionX\n        \n        maxX = float('-inf') if partitionX == 0 else nums1[partitionX - 1]\n        minX = float('inf') if partitionX == x else nums1[partitionX]\n        \n        maxY = float('-inf') if partitionY == 0 else nums2[partitionY - 1]\n        minY = float('inf') if partitionY == y else nums2[partitionY]\n        \n        if maxX <= minY and maxY <= minX:\n            if (x + y) % 2 == 0:\n                return (max(maxX, maxY) + min(minX, minY)) / 2\n            else:\n                return max(maxX, maxY)\n        elif maxX > minY:\n            high = partitionX - 1\n        else:\n            low = partitionX + 1\n    \n    raise ValueError(\"Input arrays are not sorted or not of the same size\")\n\n# Example usage:\narr1 = [1, 3, 5]\narr2 = [2, 4, 6]\nmedian = findMedianSortedArrays(arr1, arr2)\nprint(median)  # Output: 3.5\n```"], "prompt_tokens": [829], "completion_tokens": [1025], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_622_get_median"}
{"name": "mbpp_623_nth_nums", "language": "Python3", "prompt": "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    \"\"\"\n\tWrite a function to compute the n-th power of each number in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_623_nth_nums.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "nth_nums", "test": "def check(candidate):\n    \n    assert candidate([10, 20, 30], 3)==[1000, 8000, 27000]\n    assert candidate([12, 15], 5)==[248832, 759375]\n\ndef test_check():\n    check(nth_nums)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [num ** n for num in nums]\n\n# Example usage:\nmy_nums = [2, 3, 4]\nn = 2\nprint(nth_nums(my_nums, n))  # Output: [4, 9, 16]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [num ** n for num in nums]\n\n# Example usage:\nmy_nums = [2, 3, 4]\nn = 2\nprint(nth_nums(my_nums, n))  # Output: [4, 9, 16]\n```"], "prompt_tokens": [540], "completion_tokens": [474], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_623_nth_nums"}
{"name": "mbpp_624_is_upper", "language": "Python3", "prompt": "def is_upper(string: str) -> str:\n    \"\"\"\n\tWrite a python function to convert a given string to uppercase.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_624_is_upper.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_upper", "test": "def check(candidate):\n    \n    assert candidate('final')=='FINAL'\n    assert candidate('Valid')=='VALID'\n\ndef test_check():\n    check(is_upper)\n\ntest_check()\n", "source_codes": ["\ndef is_upper(string: str) -> str:\n    return string.upper()\n\n\n"], "responses": ["```python\ndef is_upper(string: str) -> str:\n    return string.upper()\n```"], "prompt_tokens": [311], "completion_tokens": [215], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_624_is_upper"}
{"name": "mbpp_625_swap_List", "language": "Python3", "prompt": "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to interchange the first and last element in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_625_swap_List.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "swap_List", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 4])==[4, 2, 3, 4, 1]\n    assert candidate([4, 5, 6])==[6, 5, 4]\n\ndef test_check():\n    check(swap_List)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n```"], "prompt_tokens": [422], "completion_tokens": [337], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_625_swap_List"}
{"name": "mbpp_626_triangle_area", "language": "Python3", "prompt": "from typing import Optional\n\ndef triangle_area(r: int) -> Optional[int]:\n    \"\"\"\n\tWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_626_triangle_area.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "triangle_area", "test": "def check(candidate):\n    \n    assert candidate(0)==0\n    assert candidate(2)==4\n\ndef test_check():\n    check(triangle_area)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Optional\n\ndef triangle_area(r: int) -> Optional[int]:\n    if r <= 0:\n        return None\n    return r * r\n\n# Example usage:\nprint(triangle_area(5))\n\n\n"], "responses": ["```python\nfrom typing import Optional\n\ndef triangle_area(r: int) -> Optional[int]:\n    if r <= 0:\n        return None\n    return r * r\n\n# Example usage:\nprint(triangle_area(5))\n```"], "prompt_tokens": [570], "completion_tokens": [461], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_626_triangle_area"}
{"name": "mbpp_627_find_First_Missing", "language": "Python3", "prompt": "from typing import List\n\ndef find_First_Missing(array: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the smallest missing number from a sorted list of natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_627_find_First_Missing.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_First_Missing", "test": "def check(candidate):\n    \n    assert candidate([0, 1, 2, 6, 9])==3\n    assert candidate([2, 3, 5, 8, 9])==0\n\ndef test_check():\n    check(find_First_Missing)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_First_Missing(array: List[int]) -> int:\n    for i in range(len(array)):\n        if array[i] != i + 1:\n            return i + 1\n    return len(array) + 1\n\n# Example usage:\nsorted_list = [1, 2, 3, 5, 6, 7]\nprint(find_First_Missing(sorted_list))  # Output should be 4\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_First_Missing(array: List[int]) -> int:\n    for i in range(len(array)):\n        if array[i] != i + 1:\n            return i + 1\n    return len(array) + 1\n\n# Example usage:\nsorted_list = [1, 2, 3, 5, 6, 7]\nprint(find_First_Missing(sorted_list))  # Output should be 4\n```"], "prompt_tokens": [479], "completion_tokens": [434], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_627_find_First_Missing"}
{"name": "mbpp_628_replace_spaces", "language": "Python3", "prompt": "def replace_spaces(string: str) -> str:\n    \"\"\"\n\tWrite a function to replace all spaces in the given string with '%20'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_628_replace_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_spaces", "test": "def check(candidate):\n    \n    assert candidate('I am a Programmer')=='I%20am%20a%20Programmer'\n    assert candidate('I love Coding')=='I%20love%20Coding'\n\ndef test_check():\n    check(replace_spaces)\n\ntest_check()\n", "source_codes": ["\ndef replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')\n\n# Example usage:\ninput_string = \"Hello World!\"\noutput_string = replace_spaces(input_string)\nprint(output_string)  # Output: \"Hello%20World!\"\n\n\n"], "responses": ["```python\ndef replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')\n\n# Example usage:\ninput_string = \"Hello World!\"\noutput_string = replace_spaces(input_string)\nprint(output_string)  # Output: \"Hello%20World!\"\n```"], "prompt_tokens": [489], "completion_tokens": [424], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_628_replace_spaces"}
{"name": "mbpp_629_Split", "language": "Python3", "prompt": "from typing import List\n\ndef Split(list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to find even numbers from a list of numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Split", "test": "def check(candidate):\n    \n    assert candidate([4, 5, 6, 7, 8, 0, 1])==[4, 6, 8, 0]\n    assert candidate([8, 12, 15, 19])==[8, 12]\n\ndef test_check():\n    check(Split)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef Split(numbers: List[int]) -> List[int]:\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = Split(my_list)\nprint(even_numbers)  # Output: [2, 4, 6, 8, 10]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef Split(numbers: List[int]) -> List[int]:\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\neven_numbers = Split(my_list)\nprint(even_numbers)  # Output: [2, 4, 6, 8, 10]\n```"], "prompt_tokens": [424], "completion_tokens": [413], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_629_Split"}
{"name": "mbpp_630_get_coordinates", "language": "Python3", "prompt": "from typing import Tuple, List\n\ndef get_coordinates(test_tup: Tuple[int, int]) -> List[List[int]]:\n    \"\"\"\n\tWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_630_get_coordinates.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_coordinates", "test": "def check(candidate):\n    \n    assert candidate((4, 5))==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\n    assert candidate((5, 6))==[[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]\n\ndef test_check():\n    check(get_coordinates)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple, List\n\ndef get_coordinates(test_tup: Tuple[int, int]) -> List[List[int]]:\n    x, y = test_tup\n    directions = [(0, -1), (-1, 0), (1, 0), (0, 1)]\n    adjacent_coords = [[x + dx, y + dy] for dx, dy in directions]\n    return adjacent_coords\n\n# Example usage:\ncoordinate = (3, 3)\nprint(get_coordinates(coordinate))\n\n\n"], "responses": ["```python\nfrom typing import Tuple, List\n\ndef get_coordinates(test_tup: Tuple[int, int]) -> List[List[int]]:\n    x, y = test_tup\n    directions = [(0, -1), (-1, 0), (1, 0), (0, 1)]\n    adjacent_coords = [[x + dx, y + dy] for dx, dy in directions]\n    return adjacent_coords\n\n# Example usage:\ncoordinate = (3, 3)\nprint(get_coordinates(coordinate))\n```"], "prompt_tokens": [607], "completion_tokens": [565], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_630_get_coordinates"}
{"name": "mbpp_631_replace_spaces", "language": "Python3", "prompt": "def replace_spaces(text: str) -> str:\n    \"\"\"\n\tWrite a function to replace whitespaces with an underscore and vice versa in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_631_replace_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_spaces", "test": "def check(candidate):\n    \n    assert candidate('The_Avengers')=='The Avengers'\n    assert candidate('Fast and Furious')=='Fast_and_Furious'\n\ndef test_check():\n    check(replace_spaces)\n\ntest_check()\n", "source_codes": ["\ndef replace_spaces(text: str) -> str:\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"_\":\n            result += \" \"\n        else:\n            result += char\n    return result\n\n# Example usage:\noriginal_text = \"Hello World_This is an example\"\nmodified_text = replace_spaces(original_text)\nprint(modified_text)  # Output: \"Hello_World This_is_an_example\"\n\n\n"], "responses": ["```python\ndef replace_spaces(text: str) -> str:\n    result = \"\"\n    for char in text:\n        if char == \" \":\n            result += \"_\"\n        elif char == \"_\":\n            result += \" \"\n        else:\n            result += char\n    return result\n\n# Example usage:\noriginal_text = \"Hello World_This is an example\"\nmodified_text = replace_spaces(original_text)\nprint(modified_text)  # Output: \"Hello_World This_is_an_example\"\n```"], "prompt_tokens": [428], "completion_tokens": [402], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_631_replace_spaces"}
{"name": "mbpp_632_move_zero", "language": "Python3", "prompt": "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to move all zeroes to the end of the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_632_move_zero.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "move_zero", "test": "def check(candidate):\n    \n    assert candidate([2, 3, 2, 0, 0, 4, 0, 5, 0])==[2, 3, 2, 4, 5, 0, 0, 0, 0]\n    assert candidate([0, 1, 0, 1, 1])==[1, 1, 1, 0, 0]\n\ndef test_check():\n    check(move_zero)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    result.extend([0] * zero_count)\n    return result\n\n# Example usage:\nnumbers = [0, 1, 0, 3, 12]\nprint(move_zero(numbers))  # Output: [1, 3, 12, 0, 0]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    result = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    result.extend([0] * zero_count)\n    return result\n\n# Example usage:\nnumbers = [0, 1, 0, 3, 12]\nprint(move_zero(numbers))  # Output: [1, 3, 12, 0, 0]\n```"], "prompt_tokens": [429], "completion_tokens": [397], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_632_move_zero"}
{"name": "mbpp_633_pair_xor_Sum", "language": "Python3", "prompt": "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of xor of all pairs of numbers in the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_633_pair_xor_Sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pair_xor_Sum", "test": "def check(candidate):\n    \n    assert candidate([7, 3, 5], 3)==12\n    assert candidate([7, 3], 2)==4\n\ndef test_check():\n    check(pair_xor_Sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for bit in range(32):\n        count_ones = sum((num >> bit) & 1 for num in arr)\n        count_zeros = n - count_ones\n        xor_sum += (count_ones * count_zeros) * (1 << bit)\n    return xor_sum\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nprint(pair_xor_Sum(arr, n))\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for bit in range(32):\n        count_ones = sum((num >> bit) & 1 for num in arr)\n        count_zeros = n - count_ones\n        xor_sum += (count_ones * count_zeros) * (1 << bit)\n    return xor_sum\n\n# Example usage:\narr = [1, 2, 3, 4, 5]\nn = len(arr)\nprint(pair_xor_Sum(arr, n))\n```"], "prompt_tokens": [720], "completion_tokens": [693], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_633_pair_xor_Sum"}
{"name": "mbpp_635_heap_sort", "language": "Python3", "prompt": "from typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "heap_sort", "test": "def check(candidate):\n    \n    assert candidate([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n    assert candidate([7, 1, 9, 5])==[1, 5, 7, 9]\n\ndef test_check():\n    check(heap_sort)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef heapify(arr: List[int], n: int, i: int) -> None:\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[i] < arr[left]:\n        largest = left\n\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr: List[int]) -> List[int]:\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef heapify(arr: List[int], n: int, i: int) -> None:\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[i] < arr[left]:\n        largest = left\n\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr: List[int]) -> List[int]:\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr\n```"], "prompt_tokens": [653], "completion_tokens": [742], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_635_heap_sort"}
{"name": "mbpp_637_noprofit_noloss", "language": "Python3", "prompt": "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given amount has no profit and no loss\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_637_noprofit_noloss.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "noprofit_noloss", "test": "def check(candidate):\n    \n    assert candidate(100, 100)==True\n    assert candidate(2000, 5000)==False\n\ndef test_check():\n    check(noprofit_noloss)\n\ntest_check()\n", "source_codes": ["\ndef noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount\n\n# Example usage:\nactual_cost = 100\nsale_amount = 100\nprint(noprofit_noloss(actual_cost, sale_amount))  # Output: True\n\nactual_cost = 100\nsale_amount = 120\nprint(noprofit_noloss(actual_cost, sale_amount))  # Output: False\n\n\n"], "responses": ["```python\ndef noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount\n\n# Example usage:\nactual_cost = 100\nsale_amount = 100\nprint(noprofit_noloss(actual_cost, sale_amount))  # Output: True\n\nactual_cost = 100\nsale_amount = 120\nprint(noprofit_noloss(actual_cost, sale_amount))  # Output: False\n```"], "prompt_tokens": [417], "completion_tokens": [372], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_637_noprofit_noloss"}
{"name": "mbpp_638_wind_chill", "language": "Python3", "prompt": "def wind_chill(v: int, t: int) -> int:\n    \"\"\"\n\tWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_638_wind_chill.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "wind_chill", "test": "def check(candidate):\n    \n    assert candidate(40, 20)==19\n    assert candidate(10, 8)==6\n\ndef test_check():\n    check(wind_chill)\n\ntest_check()\n", "source_codes": ["\ndef wind_chill(v: int, t: int) -> int:\n    if t <= 10 and v > 4.8:\n        wci = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n        return int(round(wci))\n    else:\n        return int(round(t))\n\n# Example usage:\nprint(wind_chill(20, 5))  # Wind speed 20 km/h, temperature 5 \u00b0C\n\n\n"], "responses": ["```python\ndef wind_chill(v: int, t: int) -> int:\n    if t <= 10 and v > 4.8:\n        wci = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n        return int(round(wci))\n    else:\n        return int(round(t))\n\n# Example usage:\nprint(wind_chill(20, 5))  # Wind speed 20 km/h, temperature 5 \u00b0C\n```"], "prompt_tokens": [609], "completion_tokens": [578], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_638_wind_chill"}
{"name": "mbpp_639_sample_nam", "language": "Python3", "prompt": "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    \"\"\"\n\tWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_639_sample_nam.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sample_nam", "test": "def check(candidate):\n    \n    assert candidate(['php', 'res', 'Python', 'abcd', 'Java', 'aaa'])==10\n    assert candidate(['abcd', 'Python', 'abba', 'aba'])==6\n\ndef test_check():\n    check(sample_nam)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    sum_of_lengths = 0\n    for name in sample_names:\n        if not name[0].islower():\n            sum_of_lengths += len(name)\n    return sum_of_lengths\n\n# Example usage:\nnames = [\"Alice\", \"bob\", \"Charlie\", \"david\"]\nprint(sample_nam(names))  # Output should be 11\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    sum_of_lengths = 0\n    for name in sample_names:\n        if not name[0].islower():\n            sum_of_lengths += len(name)\n    return sum_of_lengths\n\n# Example usage:\nnames = [\"Alice\", \"bob\", \"Charlie\", \"david\"]\nprint(sample_nam(names))  # Output should be 11\n```"], "prompt_tokens": [482], "completion_tokens": [415], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_639_sample_nam"}
{"name": "mbpp_640_remove_parenthesis", "language": "Python3", "prompt": "from typing import List\n\ndef remove_parenthesis(items: List[str]) -> str:\n    \"\"\"\n\tWrite a function to remove the parenthesis and what is inbetween them from a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_640_remove_parenthesis.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_parenthesis", "test": "def check(candidate):\n    \n    assert candidate(['string(.abc)'])=='string'\n    assert candidate(['alpha(num)'])=='alpha'\n\ndef test_check():\n    check(remove_parenthesis)\n\ntest_check()\n", "source_codes": ["\nimport re\nfrom typing import List\n\ndef remove_parenthesis(items: List[str]) -> List[str]:\n    pattern = r'\\(.*?\\)'\n    return [re.sub(pattern, '', item) for item in items]\n\n# Example usage:\nstrings = [\"Hello (world)\", \"Example (string) with (multiple) parentheses\"]\nprint(remove_parenthesis(strings))\n\n\n"], "responses": ["```python\nimport re\nfrom typing import List\n\ndef remove_parenthesis(items: List[str]) -> List[str]:\n    pattern = r'\\(.*?\\)'\n    return [re.sub(pattern, '', item) for item in items]\n\n# Example usage:\nstrings = [\"Hello (world)\", \"Example (string) with (multiple) parentheses\"]\nprint(remove_parenthesis(strings))\n```"], "prompt_tokens": [474], "completion_tokens": [412], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_640_remove_parenthesis"}
{"name": "mbpp_641_is_nonagonal", "language": "Python3", "prompt": "def is_nonagonal(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth nonagonal number.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_641_is_nonagonal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_nonagonal", "test": "def check(candidate):\n    \n    assert candidate(15)==750\n    assert candidate(18)==1089\n\ndef test_check():\n    check(is_nonagonal)\n\ntest_check()\n", "source_codes": ["\ndef nth_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number.\n    \"\"\"\n    return (7 * n**2 - 5 * n) // 2\n\n# Example usage:\nn = 5\nprint(f\"The {n}th nonagonal number is: {nth_nonagonal(n)}\")\n\n\n"], "responses": ["```python\ndef nth_nonagonal(n: int) -> int:\n    \"\"\"\n    Calculate the nth nonagonal number.\n    \"\"\"\n    return (7 * n**2 - 5 * n) // 2\n\n# Example usage:\nn = 5\nprint(f\"The {n}th nonagonal number is: {nth_nonagonal(n)}\")\n```"], "prompt_tokens": [335], "completion_tokens": [293], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_641_is_nonagonal"}
{"name": "mbpp_643_text_match_wordz_middle", "language": "Python3", "prompt": "def text_match_wordz_middle(text: str) -> bool:\n    \"\"\"\n\tWrite a function that checks if a strings contains 'z', except at the start and end of the word.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_643_text_match_wordz_middle.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_wordz_middle", "test": "def check(candidate):\n    \n    assert candidate('zxyabc.')==False\n    assert candidate('  lang  .')==False\n\ndef test_check():\n    check(text_match_wordz_middle)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    pattern = r'\\Bz\\B'\n    match = re.search(pattern, text)\n    return bool(match)\n\n# Example usage:\nprint(text_match_wordz_middle(\"The lazy dog.\"))  # Should return True\nprint(text_match_wordz_middle(\"Zebra.\"))        # Should return False\nprint(text_match_wordz_middle(\"Dazzling.\"))     # Should return True\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    pattern = r'\\Bz\\B'\n    match = re.search(pattern, text)\n    return bool(match)\n\n# Example usage:\nprint(text_match_wordz_middle(\"The lazy dog.\"))  # Should return True\nprint(text_match_wordz_middle(\"Zebra.\"))        # Should return False\nprint(text_match_wordz_middle(\"Dazzling.\"))     # Should return True\n```"], "prompt_tokens": [576], "completion_tokens": [536], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_643_text_match_wordz_middle"}
{"name": "mbpp_644_reverse_Array_Upto_K", "language": "Python3", "prompt": "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    \"\"\"\n\tWrite a python function to reverse an array upto a given position.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_644_reverse_Array_Upto_K.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "reverse_Array_Upto_K", "test": "def check(candidate):\n    \n    assert candidate([4, 5, 6, 7], 2)==[5, 4, 6, 7]\n    assert candidate([9, 8, 7, 6, 5], 3)==[7, 8, 9, 6, 5]\n\ndef test_check():\n    check(reverse_Array_Upto_K)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k > len(input):\n        raise ValueError(\"k is greater than the length of the array\")\n    \n    reversed_part = input[:k][::-1]\n    result = reversed_part + input[k:]\n    \n    return result\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6]\nk = 3\nprint(reverse_Array_Upto_K(arr, k))  # Output should be [3, 2, 1, 4, 5, 6]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k > len(input):\n        raise ValueError(\"k is greater than the length of the array\")\n    \n    reversed_part = input[:k][::-1]\n    result = reversed_part + input[k:]\n    \n    return result\n\n# Example usage:\narr = [1, 2, 3, 4, 5, 6]\nk = 3\nprint(reverse_Array_Upto_K(arr, k))  # Output should be [3, 2, 1, 4, 5, 6]\n```"], "prompt_tokens": [561], "completion_tokens": [553], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_644_reverse_Array_Upto_K"}
{"name": "mbpp_720_add_dict_to_tuple", "language": "Python3", "prompt": "from typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple[int, int, int], test_dict: Dict[str, int]) -> Tuple[int, int, int, Dict[str, int]]:\n    \"\"\"\n\tWrite a function to add a dictionary to the tuple. The output should be a tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_720_add_dict_to_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_dict_to_tuple", "test": "def check(candidate):\n    \n    assert candidate((1, 2, 3), { 'UTS': 2, 'is': 3, 'Worst': 4 })==(1, 2, 3, { 'UTS': 2, 'is': 3, 'Worst': 4 })\n    assert candidate((8, 9, 10), { 'POS': 3, 'is': 4, 'Okay': 5 })==(8, 9, 10, { 'POS': 3, 'is': 4, 'Okay': 5 })\n\ndef test_check():\n    check(add_dict_to_tuple)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple[int, int, int], test_dict: Dict[str, int]) -> Tuple[int, int, int, Dict[str, int]]:\n    new_tuple = test_tup + (test_dict,)\n    return new_tuple\n\n\n"], "responses": ["```python\nfrom typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple[int, int, int], test_dict: Dict[str, int]) -> Tuple[int, int, int, Dict[str, int]]:\n    new_tuple = test_tup + (test_dict,)\n    return new_tuple\n```"], "prompt_tokens": [507], "completion_tokens": [377], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_720_add_dict_to_tuple"}
{"name": "mbpp_721_maxAverageOfPath", "language": "Python3", "prompt": "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    \"\"\"\n\tGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "maxAverageOfPath", "test": "def check(candidate):\n    \n    assert candidate([[2, 3, 4], [7, 6, 5], [8, 4, 10]])==6.2\n    assert candidate([[3, 4, 5], [8, 7, 6], [9, 5, 11]])==7.2\n    assert candidate([[1, 2, 3], [4, 5, 6], [7, 8, 9]])==5.8\n\ndef test_check():\n    check(maxAverageOfPath)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    dp = [[(0, 0) for _ in range(N)] for _ in range(N)]\n    \n    # Base case\n    dp[0][0] = (cost[0][0], 1)\n    \n    # Fill the first row and first column\n    for i in range(1, N):\n        dp[i][0] = (dp[i-1][0][0] + cost[i][0], dp[i-1][0][1] + 1)\n        dp[0][i] = (dp[0][i-1][0] + cost[0][i], dp[0][i-1][1] + 1)\n    \n    # Fill the rest of the dp matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            # Calculate the maximum sum from the top and left cells\n            top_sum, top_count = dp[i-1][j]\n            left_sum, left_count = dp[i][j-1]\n            \n            # Choose the path with the higher average\n            if (top_sum + cost[i][j]) / (top_count + 1) > (left_sum + cost[i][j]) / (left_count + 1):\n                dp[i][j] = (top_sum + cost[i][j], top_count + 1)\n            else:\n                dp[i][j] = (left_sum + cost[i][j], left_count + 1)\n    \n    # Calculate the maximum average for the bottom-right cell\n    max_sum, max_count = dp[N-1][N-1]\n    return max_sum / max_count\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    dp = [[(0, 0) for _ in range(N)] for _ in range(N)]\n    \n    # Base case\n    dp[0][0] = (cost[0][0], 1)\n    \n    # Fill the first row and first column\n    for i in range(1, N):\n        dp[i][0] = (dp[i-1][0][0] + cost[i][0], dp[i-1][0][1] + 1)\n        dp[0][i] = (dp[0][i-1][0] + cost[0][i], dp[0][i-1][1] + 1)\n    \n    # Fill the rest of the dp matrix\n    for i in range(1, N):\n        for j in range(1, N):\n            # Calculate the maximum sum from the top and left cells\n            top_sum, top_count = dp[i-1][j]\n            left_sum, left_count = dp[i][j-1]\n            \n            # Choose the path with the higher average\n            if (top_sum + cost[i][j]) / (top_count + 1) > (left_sum + cost[i][j]) / (left_count + 1):\n                dp[i][j] = (top_sum + cost[i][j], top_count + 1)\n            else:\n                dp[i][j] = (left_sum + cost[i][j], left_count + 1)\n    \n    # Calculate the maximum average for the bottom-right cell\n    max_sum, max_count = dp[N-1][N-1]\n    return max_sum / max_count\n```"], "prompt_tokens": [1089], "completion_tokens": [1182], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_721_maxAverageOfPath"}
{"name": "mbpp_722_filter_data", "language": "Python3", "prompt": "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, int]], h: float, w: int) -> Dict[str, Tuple[float, int]]:\n    \"\"\"\n\tThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "filter_data", "test": "def check(candidate):\n    \n    assert candidate({ 'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66) }, 5.9, 67)=={ 'Cierra Vega': (6.2, 70), 'Kierra Gentry': (6.0, 68) }\n    assert candidate({ 'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66) }, 5.7, 64)=={ 'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66) }\n\ndef test_check():\n    check(filter_data)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, int]], h: float, w: int) -> Dict[str, Tuple[float, int]]:\n    filtered_students = {}\n    for student_name, (student_height, student_weight) in students.items():\n        if student_height > h and student_weight > w:\n            filtered_students[student_name] = (student_height, student_weight)\n    return filtered_students\n\n# Example usage:\nstudents_data = {\n    \"Alice\": (1.65, 55),\n    \"Bob\": (1.85, 90),\n    \"Charlie\": (1.70, 65),\n    \"Diana\": (1.60, 70)\n}\n\nfiltered_students = filter_data(students_data, 1.7, 60)\nprint(filtered_students)  # Output should be {'Bob': (1.85, 90), 'Charlie': (1.70, 65)}\n\n\n"], "responses": ["```python\nfrom typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, int]], h: float, w: int) -> Dict[str, Tuple[float, int]]:\n    filtered_students = {}\n    for student_name, (student_height, student_weight) in students.items():\n        if student_height > h and student_weight > w:\n            filtered_students[student_name] = (student_height, student_weight)\n    return filtered_students\n\n# Example usage:\nstudents_data = {\n    \"Alice\": (1.65, 55),\n    \"Bob\": (1.85, 90),\n    \"Charlie\": (1.70, 65),\n    \"Diana\": (1.60, 70)\n}\n\nfiltered_students = filter_data(students_data, 1.7, 60)\nprint(filtered_students)  # Output should be {'Bob': (1.85, 90), 'Charlie': (1.70, 65)}\n```"], "prompt_tokens": [645], "completion_tokens": [591], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_722_filter_data"}
{"name": "mbpp_723_count_same_pair", "language": "Python3", "prompt": "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    \"\"\"\n\tThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_same_pair", "test": "def check(candidate):\n    \n    assert candidate([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\n    assert candidate([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1\n    assert candidate([0, 1, 1, 2], [0, 1, 2, 2])==3\n\ndef test_check():\n    check(count_same_pair)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    count = 0\n    for num1, num2 in zip(nums1, nums2):\n        if num1 == num2:\n            count += 1\n    return count\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    count = 0\n    for num1, num2 in zip(nums1, nums2):\n        if num1 == num2:\n            count += 1\n    return count\n```"], "prompt_tokens": [506], "completion_tokens": [402], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_723_count_same_pair"}
{"name": "mbpp_724_power_base_sum", "language": "Python3", "prompt": "def power_base_sum(base: int, power: int) -> int:\n    \"\"\"\n\tWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_724_power_base_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "power_base_sum", "test": "def check(candidate):\n    \n    assert candidate(8, 10)==37\n    assert candidate(8, 15)==62\n    assert candidate(3, 3)==9\n\ndef test_check():\n    check(power_base_sum)\n\ntest_check()\n", "source_codes": ["\ndef power_base_sum(base: int, power: int) -> int:\n    number = base ** power\n    number_str = str(number)\n    digit_sum = sum(int(digit) for digit in number_str)\n    return digit_sum\n\n# Example usage:\nprint(power_base_sum(2, 10))\n\n\n"], "responses": ["```python\ndef power_base_sum(base: int, power: int) -> int:\n    number = base ** power\n    number_str = str(number)\n    digit_sum = sum(int(digit) for digit in number_str)\n    return digit_sum\n\n# Example usage:\nprint(power_base_sum(2, 10))\n```"], "prompt_tokens": [413], "completion_tokens": [329], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_724_power_base_sum"}
{"name": "mbpp_725_extract_quotation", "language": "Python3", "prompt": "from typing import List, Any\n\ndef extract_quotation(text1: str) -> List[Any]:\n    \"\"\"\n\tWrite a function to extract values between quotation marks \" \" of the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_725_extract_quotation.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_quotation", "test": "def check(candidate):\n    \n    assert candidate('Cast your \"favorite\" entertainment \"apps\"')==['favorite', 'apps']\n    assert candidate('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support')==['4k Ultra HD', 'HDR 10']\n    assert candidate(\"Watch content '4k Ultra HD' resolution with 'HDR 10' Support\")==[]\n\ndef test_check():\n    check(extract_quotation)\n\ntest_check()\n", "source_codes": ["\nimport re\nfrom typing import List\n\ndef extract_quotation(text: str) -> List[str]:\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\ntext1 = 'She said, \"Hello, how are you?\" and then left.'\nprint(extract_quotation(text1))  # Output: ['Hello, how are you?']\n\n\n"], "responses": ["```python\nimport re\nfrom typing import List\n\ndef extract_quotation(text: str) -> List[str]:\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, text)\n    return matches\n\n# Example usage:\ntext1 = 'She said, \"Hello, how are you?\" and then left.'\nprint(extract_quotation(text1))  # Output: ['Hello, how are you?']\n```"], "prompt_tokens": [477], "completion_tokens": [423], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_725_extract_quotation"}
{"name": "mbpp_726_multiply_elements", "language": "Python3", "prompt": "from typing import List, Any\n\ndef multiply_elements(test_tup: List[int]) -> List[Any]:\n    \"\"\"\n\tWrite a function that takes as input a list of numbers (t_1,...,t_{N+1}) and returns a list of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_726_multiply_elements.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "multiply_elements", "test": "def check(candidate):\n    \n    assert candidate([2, 4, 5, 6, 7])==[8, 20, 30, 42]\n    assert candidate([12, 13, 14, 9, 15])==[156, 182, 126, 135]\n    assert candidate([12])==[]\n\ndef test_check():\n    check(multiply_elements)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef multiply_elements(test_tup: List[int]) -> List[int]:\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i + 1])\n    return result\n\n# Example usage:\ninput_list = [1, 2, 3, 4, 5]\noutput_list = multiply_elements(input_list)\nprint(output_list)  # Output: [2, 6, 12, 20]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef multiply_elements(test_tup: List[int]) -> List[int]:\n    result = []\n    for i in range(len(test_tup) - 1):\n        result.append(test_tup[i] * test_tup[i + 1])\n    return result\n\n# Example usage:\ninput_list = [1, 2, 3, 4, 5]\noutput_list = multiply_elements(input_list)\nprint(output_list)  # Output: [2, 6, 12, 20]\n```"], "prompt_tokens": [523], "completion_tokens": [422], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_726_multiply_elements"}
{"name": "mbpp_728_sum_list", "language": "Python3", "prompt": "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_728_sum_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_list", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3], [5, 6, 7])==[6, 8, 10]\n    assert candidate([15, 20, 30], [15, 45, 75])==[30, 65, 105]\n\ndef test_check():\n    check(sum_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Both lists must have the same number of elements\")\n    return [a + b for a, b in zip(lst1, lst2)]\n\n# Example usage:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nresult = sum_list(list1, list2)\nprint(result)  # Output: [5, 7, 9]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Both lists must have the same number of elements\")\n    return [a + b for a, b in zip(lst1, lst2)]\n\n# Example usage:\nlist1 = [1, 2, 3]\nlist2 = [4, 5, 6]\nresult = sum_list(list1, list2)\nprint(result)  # Output: [5, 7, 9]\n```"], "prompt_tokens": [461], "completion_tokens": [383], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_728_sum_list"}
{"name": "mbpp_730_consecutive_duplicates", "language": "Python3", "prompt": "from typing import List, Any\n\ndef consecutive_duplicates(nums: List[Any]) -> List[Any]:\n    \"\"\"\n\tWrite a function to remove consecutive duplicates of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_730_consecutive_duplicates.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "consecutive_duplicates", "test": "def check(candidate):\n    \n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']\n\ndef test_check():\n    check(consecutive_duplicates)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef consecutive_duplicates(nums: List[Any]) -> List[Any]:\n    if not nums:\n        return []\n\n    result = [nums[0]]\n\n    for i in range(1, len(nums)):\n        if nums[i] != result[-1]:\n            result.append(nums[i])\n\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef consecutive_duplicates(nums: List[Any]) -> List[Any]:\n    if not nums:\n        return []\n\n    result = [nums[0]]\n\n    for i in range(1, len(nums)):\n        if nums[i] != result[-1]:\n            result.append(nums[i])\n\n    return result\n```"], "prompt_tokens": [410], "completion_tokens": [347], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_730_consecutive_duplicates"}
{"name": "mbpp_731_lateralsurface_cone", "language": "Python3", "prompt": "def lateralsurface_cone(r: int, h: int) -> float:\n    \"\"\"\n\tWrite a function to find the lateral surface area of a cone given radius r and the height h.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_731_lateralsurface_cone.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lateralsurface_cone", "test": "def check(candidate):\n    \n    assert candidate(10, 15)==566.3586699569488\n    assert candidate(19, 17)==1521.8090132193388\n\ndef test_check():\n    check(lateralsurface_cone)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef lateralsurface_cone(r: int, h: int) -> float:\n    l = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * l\n    return lateral_surface_area\n\n\n"], "responses": ["```python\nimport math\n\ndef lateralsurface_cone(r: int, h: int) -> float:\n    l = math.sqrt(r**2 + h**2)\n    lateral_surface_area = math.pi * r * l\n    return lateral_surface_area\n```"], "prompt_tokens": [509], "completion_tokens": [419], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_731_lateralsurface_cone"}
{"name": "mbpp_732_replace_specialchar", "language": "Python3", "prompt": "def replace_specialchar(text: str) -> str:\n    \"\"\"\n\tWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_732_replace_specialchar.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "replace_specialchar", "test": "def check(candidate):\n    \n    assert candidate('a b c,d e f')=='a:b:c:d:e:f'\n    assert candidate('ram reshma,ram rahim')=='ram:reshma:ram:rahim'\n\ndef test_check():\n    check(replace_specialchar)\n\ntest_check()\n", "source_codes": ["\ndef replace_specialchar(text: str) -> str:\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n\n# Test the function\nsample_text = \"Hello, this is a test. Let's replace: spaces, commas, and dots.\"\nmodified_text = replace_specialchar(sample_text)\nprint(modified_text)\n\n\n"], "responses": ["```python\ndef replace_specialchar(text: str) -> str:\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n\n# Test the function\nsample_text = \"Hello, this is a test. Let's replace: spaces, commas, and dots.\"\nmodified_text = replace_specialchar(sample_text)\nprint(modified_text)\n```"], "prompt_tokens": [402], "completion_tokens": [358], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_732_replace_specialchar"}
{"name": "mbpp_733_find_first_occurrence", "language": "Python3", "prompt": "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to find the index of the first occurrence of a given number in a sorted array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_first_occurrence", "test": "def check(candidate):\n    \n    assert candidate([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5)==2\n    assert candidate([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6)==4\n\ndef test_check():\n    check(find_first_occurrence)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = 0, len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = 0, len(A) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    return result\n```"], "prompt_tokens": [750], "completion_tokens": [714], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_733_find_first_occurrence"}
{"name": "mbpp_734_sum_Of_Subarray_Prod", "language": "Python3", "prompt": "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_734_sum_Of_Subarray_Prod.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_Of_Subarray_Prod", "test": "def check(candidate):\n    \n    assert candidate([1, 2])==5\n    assert candidate([1, 2, 3, 4])==84\n\ndef test_check():\n    check(sum_Of_Subarray_Prod)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sum_of_subarray_prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    \n    # Each element arr[i] will be in (i + 1) * (n - i) subarrays\n    for i in range(n):\n        total_sum += arr[i] * (i + 1) * (n - i)\n        \n    return total_sum\n\n# Example usage:\narr = [1, 2, 3]\nprint(sum_of_subarray_prod(arr))  # Output should be the sum of products of all subarrays\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sum_of_subarray_prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    \n    # Each element arr[i] will be in (i + 1) * (n - i) subarrays\n    for i in range(n):\n        total_sum += arr[i] * (i + 1) * (n - i)\n        \n    return total_sum\n\n# Example usage:\narr = [1, 2, 3]\nprint(sum_of_subarray_prod(arr))  # Output should be the sum of products of all subarrays\n```"], "prompt_tokens": [738], "completion_tokens": [682], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_734_sum_Of_Subarray_Prod"}
{"name": "mbpp_735_toggle_middle_bits", "language": "Python3", "prompt": "def toggle_middle_bits(n: int) -> int:\n    \"\"\"\n\tWrite a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "toggle_middle_bits", "test": "def check(candidate):\n    \n    assert candidate(10)==12\n    assert candidate(11)==13\n    assert candidate(65)==127\n    assert candidate(77)==115\n\ndef test_check():\n    check(toggle_middle_bits)\n\ntest_check()\n", "source_codes": ["\ndef toggle_middle_bits(n: int) -> int:\n    length = n.bit_length()\n    if length <= 2:\n        return n\n    mask = (1 << (length - 1)) - 1\n    mask ^= (1 << (length - 2)) | 1\n    return n ^ mask\n\n\n"], "responses": ["```python\ndef toggle_middle_bits(n: int) -> int:\n    length = n.bit_length()\n    if length <= 2:\n        return n\n    mask = (1 << (length - 1)) - 1\n    mask ^= (1 << (length - 2)) | 1\n    return n ^ mask\n```"], "prompt_tokens": [601], "completion_tokens": [503], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_735_toggle_middle_bits"}
{"name": "mbpp_736_left_insertion", "language": "Python3", "prompt": "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_736_left_insertion.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "left_insertion", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 4, 5], 3)==2\n    assert candidate([1, 2, 4, 5], 7)==4\n\ndef test_check():\n    check(left_insertion)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n# Example usage:\nsorted_list = [1, 2, 4, 5]\nvalue_to_insert = 3\ninsertion_index = left_insertion(sorted_list, value_to_insert)\nprint(f\"The left insertion point for {value_to_insert} is at index {insertion_index}.\")\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    left, right = 0, len(a)\n    while left < right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n\n# Example usage:\nsorted_list = [1, 2, 4, 5]\nvalue_to_insert = 3\ninsertion_index = left_insertion(sorted_list, value_to_insert)\nprint(f\"The left insertion point for {value_to_insert} is at index {insertion_index}.\")\n```"], "prompt_tokens": [567], "completion_tokens": [511], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_736_left_insertion"}
{"name": "mbpp_737_check_str", "language": "Python3", "prompt": "def check_str(string: str) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given string is starting with a vowel or not using regex.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_str", "test": "def check(candidate):\n    \n    assert candidate('dawood')==False\n    assert candidate('Else')==True\n\ndef test_check():\n    check(check_str)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef check_str(string: str) -> bool:\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, string))\n\n# Example usage:\nprint(check_str(\"apple\"))  # Should return True\nprint(check_str(\"banana\")) # Should return False\n\n\n"], "responses": ["```python\nimport re\n\ndef check_str(string: str) -> bool:\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, string))\n\n# Example usage:\nprint(check_str(\"apple\"))  # Should return True\nprint(check_str(\"banana\")) # Should return False\n```"], "prompt_tokens": [445], "completion_tokens": [381], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_737_check_str"}
{"name": "mbpp_738_geometric_sum", "language": "Python3", "prompt": "def geometric_sum(n: int) -> float:\n    \"\"\"\n\tWrite a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "geometric_sum", "test": "def check(candidate):\n    \n    assert candidate(4)==1.9375\n    assert candidate(8)==1.99609375\n\ndef test_check():\n    check(geometric_sum)\n\ntest_check()\n", "source_codes": ["\ndef geometric_sum(n: int) -> float:\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    else:\n        return 1 + 0.5 * geometric_sum(n - 1)\n\n# Example usage:\nprint(geometric_sum(4))  # Should print the sum of 1 + 1/2 + 1/4 + 1/8\n\n\n"], "responses": ["```python\ndef geometric_sum(n: int) -> float:\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    else:\n        return 1 + 0.5 * geometric_sum(n - 1)\n\n# Example usage:\nprint(geometric_sum(4))  # Should print the sum of 1 + 1/2 + 1/4 + 1/8\n```"], "prompt_tokens": [723], "completion_tokens": [651], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_738_geometric_sum"}
{"name": "mbpp_739_find_Index", "language": "Python3", "prompt": "def find_Index(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_Index", "test": "def check(candidate):\n    \n    assert candidate(3)==14\n    assert candidate(4)==45\n\ndef test_check():\n    check(find_Index)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef find_Index(n: int) -> int:\n    def count_digits(num: int) -> int:\n        return int(math.log10(num)) + 1\n    \n    index = 1\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if count_digits(triangular_number) == n:\n            return index\n        index += 1\n\n# Example usage:\nprint(find_Index(2))\n\n\n"], "responses": ["```python\nimport math\n\ndef find_Index(n: int) -> int:\n    def count_digits(num: int) -> int:\n        return int(math.log10(num)) + 1\n    \n    index = 1\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if count_digits(triangular_number) == n:\n            return index\n        index += 1\n\n# Example usage:\nprint(find_Index(2))\n```"], "prompt_tokens": [579], "completion_tokens": [512], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_739_find_Index"}
{"name": "mbpp_740_tuple_to_dict", "language": "Python3", "prompt": "from typing import Tuple, Dict\n\ndef tuple_to_dict(test_tup: Tuple[int, int, int, int, int, int]) -> Dict[int, int]:\n    \"\"\"\n\tWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tuple_to_dict", "test": "def check(candidate):\n    \n    assert candidate((1, 2, 3, 4, 5, 6))=={ 1: 2, 3: 4, 5: 6 }\n    assert candidate((7, 8, 9, 10, 11, 12))=={ 7: 8, 9: 10, 11: 12 }\n\ndef test_check():\n    check(tuple_to_dict)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple, Dict\n\ndef tuple_to_dict(test_tup: Tuple[int, int, int, int, int, int]) -> Dict[int, int]:\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i + 1]\n        result_dict[key] = value\n    return result_dict\n\n# Example usage:\ntest_tup = (1, 2, 3, 4, 5, 6)\nprint(tuple_to_dict(test_tup))  # Output: {1: 2, 3: 4, 5: 6}\n\n\n"], "responses": ["```python\nfrom typing import Tuple, Dict\n\ndef tuple_to_dict(test_tup: Tuple[int, int, int, int, int, int]) -> Dict[int, int]:\n    result_dict = {}\n    for i in range(0, len(test_tup), 2):\n        key = test_tup[i]\n        value = test_tup[i + 1]\n        result_dict[key] = value\n    return result_dict\n\n# Example usage:\ntest_tup = (1, 2, 3, 4, 5, 6)\nprint(tuple_to_dict(test_tup))  # Output: {1: 2, 3: 4, 5: 6}\n```"], "prompt_tokens": [493], "completion_tokens": [423], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_740_tuple_to_dict"}
{"name": "mbpp_741_all_Characters_Same", "language": "Python3", "prompt": "def all_Characters_Same(s: str) -> bool:\n    \"\"\"\n\tWrite a python function to check whether all the characters are same or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_741_all_Characters_Same.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "all_Characters_Same", "test": "def check(candidate):\n    \n    assert candidate('aaa')==True\n    assert candidate('data')==False\n\ndef test_check():\n    check(all_Characters_Same)\n\ntest_check()\n", "source_codes": ["\ndef all_Characters_Same(s: str) -> bool:\n    if len(s) < 2:\n        return True\n    first_char = s[0]\n    for char in s[1:]:\n        if char != first_char:\n            return False\n    return True\n\n# Example usage:\nprint(all_Characters_Same(\"aaaa\"))  # Should return True\nprint(all_Characters_Same(\"aaab\"))  # Should return False\nprint(all_Characters_Same(\"b\"))     # Should return True\nprint(all_Characters_Same(\"\"))      # Should return True\n\n\n"], "responses": ["```python\ndef all_Characters_Same(s: str) -> bool:\n    if len(s) < 2:\n        return True\n    first_char = s[0]\n    for char in s[1:]:\n        if char != first_char:\n            return False\n    return True\n\n# Example usage:\nprint(all_Characters_Same(\"aaaa\"))  # Should return True\nprint(all_Characters_Same(\"aaab\"))  # Should return False\nprint(all_Characters_Same(\"b\"))     # Should return True\nprint(all_Characters_Same(\"\"))      # Should return True\n```"], "prompt_tokens": [479], "completion_tokens": [476], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_741_all_Characters_Same"}
{"name": "mbpp_742_area_tetrahedron", "language": "Python3", "prompt": "def area_tetrahedron(side: int) -> float:\n    \"\"\"\n\tWrite a function to caluclate the area of a tetrahedron.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_742_area_tetrahedron.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "area_tetrahedron", "test": "def check(candidate):\n    \n    assert candidate(20)==692.8203230275509\n    assert candidate(10)==173.20508075688772\n\ndef test_check():\n    check(area_tetrahedron)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2\n\n# Example usage:\nside_length = 5\nprint(f\"The surface area of a tetrahedron with side {side_length} is {area_tetrahedron(side_length)}\")\n\n\n"], "responses": ["```python\nimport math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2\n\n# Example usage:\nside_length = 5\nprint(f\"The surface area of a tetrahedron with side {side_length} is {area_tetrahedron(side_length)}\")\n```"], "prompt_tokens": [382], "completion_tokens": [322], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_742_area_tetrahedron"}
{"name": "mbpp_743_rotate_right", "language": "Python3", "prompt": "from typing import List\n\ndef rotate_right(list: List[int], m: int) -> List[int]:\n    \"\"\"\n\tWrite a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rotate_right", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]\n\ndef test_check():\n    check(rotate_right)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef rotate_right(lst: List[int], m: int) -> List[int]:\n    m = m % len(lst)\n    return lst[-m:] + lst[:-m]\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5]\nrotated_list = rotate_right(my_list, 2)\nprint(rotated_list)  # Output: [4, 5, 1, 2, 3]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef rotate_right(lst: List[int], m: int) -> List[int]:\n    m = m % len(lst)\n    return lst[-m:] + lst[:-m]\n\n# Example usage:\nmy_list = [1, 2, 3, 4, 5]\nrotated_list = rotate_right(my_list, 2)\nprint(rotated_list)  # Output: [4, 5, 1, 2, 3]\n```"], "prompt_tokens": [477], "completion_tokens": [398], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_743_rotate_right"}
{"name": "mbpp_744_check_none", "language": "Python3", "prompt": "from typing import Any\n\ndef check_none(test_tup: Any) -> bool:\n    \"\"\"\n\tWrite a function to check if the given tuple has any none value or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_744_check_none.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_none", "test": "def check(candidate):\n    \n    assert candidate((7, 8, 9, 11, 14))==False\n    assert candidate((1, 2, 3, 4, None))==True\n\ndef test_check():\n    check(check_none)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Any, Tuple\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n\n# Example usage:\nmy_tuple = (1, 2, None, 4)\nprint(check_none(my_tuple))  # Output: True\n\nmy_tuple = (1, 2, 3, 4)\nprint(check_none(my_tuple))  # Output: False\n\n\n"], "responses": ["```python\nfrom typing import Any, Tuple\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    for element in test_tup:\n        if element is None:\n            return True\n    return False\n\n# Example usage:\nmy_tuple = (1, 2, None, 4)\nprint(check_none(my_tuple))  # Output: True\n\nmy_tuple = (1, 2, 3, 4)\nprint(check_none(my_tuple))  # Output: False\n```"], "prompt_tokens": [425], "completion_tokens": [393], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_744_check_none"}
{"name": "mbpp_745_divisible_by_digits", "language": "Python3", "prompt": "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    \"\"\"\n\tWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_745_divisible_by_digits.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "divisible_by_digits", "test": "def check(candidate):\n    \n    assert candidate(1, 15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\n    assert candidate(20, 25)==[22, 24]\n\ndef test_check():\n    check(divisible_by_digits)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    divisible_numbers = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        divisible = True\n        for digit_str in num_str:\n            digit = int(digit_str)\n            if digit == 0 or num % digit != 0:\n                divisible = False\n                break\n        if divisible:\n            divisible_numbers.append(num)\n    return divisible_numbers\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    divisible_numbers = []\n    for num in range(startnum, endnum + 1):\n        num_str = str(num)\n        divisible = True\n        for digit_str in num_str:\n            digit = int(digit_str)\n            if digit == 0 or num % digit != 0:\n                divisible = False\n                break\n        if divisible:\n            divisible_numbers.append(num)\n    return divisible_numbers\n```"], "prompt_tokens": [636], "completion_tokens": [534], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_745_divisible_by_digits"}
{"name": "mbpp_746_sector_area", "language": "Python3", "prompt": "from typing import Optional\n\ndef sector_area(r: int, a: int) -> Optional[float]:\n    \"\"\"\n\tWrite a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_746_sector_area.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sector_area", "test": "def check(candidate):\n    \n    assert candidate(9, 45)==31.808625617596654\n    assert candidate(9, 361)==None\n\ndef test_check():\n    check(sector_area)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Optional\nimport math\n\ndef sector_area(r: int, a: int) -> Optional[float]:\n    if a > 360:\n        return None\n    return (r ** 2 * a * math.pi) / 360\n\n\n"], "responses": ["```python\nfrom typing import Optional\nimport math\n\ndef sector_area(r: int, a: int) -> Optional[float]:\n    if a > 360:\n        return None\n    return (r ** 2 * a * math.pi) / 360\n```"], "prompt_tokens": [465], "completion_tokens": [341], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_746_sector_area"}
{"name": "mbpp_747_lcs_of_three", "language": "Python3", "prompt": "def lcs_of_three(X: str, Y: str, Z: str) -> int:\n    \"\"\"\n\tWrite a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_747_lcs_of_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "lcs_of_three", "test": "def check(candidate):\n    \n    assert candidate('Reels', 'Reelsfor', 'ReelsforReels')==5\n    assert candidate('abcd1e2', 'bc12ea', 'bd1ea')==3\n\ndef test_check():\n    check(lcs_of_three)\n\ntest_check()\n", "source_codes": ["\ndef lcs_of_three(X: str, Y: str, Z: str) -> int:\n    m, n, o = len(X), len(Y), len(Z)\n    dp = [[[0] * (o+1) for _ in range(n+1)] for __ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    return dp[m][n][o]\n\n# Example usage:\nX = \"AGGT12\"\nY = \"12TXAYB\"\nZ = \"12XBA\"\nprint(lcs_of_three(X, Y, Z))  # Output should be the length of the LCS for the three strings\n\n\n"], "responses": ["```python\ndef lcs_of_three(X: str, Y: str, Z: str) -> int:\n    m, n, o = len(X), len(Y), len(Z)\n    dp = [[[0] * (o+1) for _ in range(n+1)] for __ in range(m+1)]\n\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, o+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j-1][k], dp[i][j][k-1])\n\n    return dp[m][n][o]\n\n# Example usage:\nX = \"AGGT12\"\nY = \"12TXAYB\"\nZ = \"12XBA\"\nprint(lcs_of_three(X, Y, Z))  # Output should be the length of the LCS for the three strings\n```"], "prompt_tokens": [807], "completion_tokens": [874], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_747_lcs_of_three"}
{"name": "mbpp_748_capital_words_spaces", "language": "Python3", "prompt": "def capital_words_spaces(str1: str) -> str:\n    \"\"\"\n\tWrite a function to put spaces between words starting with capital letters in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_748_capital_words_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "capital_words_spaces", "test": "def check(candidate):\n    \n    assert candidate('PythonProgrammingExamples')=='Python Programming Examples'\n    assert candidate('GetReadyToBeCodingFreak')=='Get Ready To Be Coding Freak'\n\ndef test_check():\n    check(capital_words_spaces)\n\ntest_check()\n", "source_codes": ["\ndef capital_words_spaces(str1: str) -> str:\n    result = \"\"\n\n    for i, char in enumerate(str1):\n        if char.isupper() and i != 0:\n            result += \" \"\n        result += char\n\n    return result\n\n# Example usage:\ninput_str = \"HelloWorld\"\nprint(capital_words_spaces(input_str))  # Output: \"Hello World\"\n\n\n"], "responses": ["```python\ndef capital_words_spaces(str1: str) -> str:\n    result = \"\"\n\n    for i, char in enumerate(str1):\n        if char.isupper() and i != 0:\n            result += \" \"\n        result += char\n\n    return result\n\n# Example usage:\ninput_str = \"HelloWorld\"\nprint(capital_words_spaces(input_str))  # Output: \"Hello World\"\n```"], "prompt_tokens": [456], "completion_tokens": [410], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_748_capital_words_spaces"}
{"name": "mbpp_749_sort_numeric_strings", "language": "Python3", "prompt": "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    \"\"\"\n\tWrite a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_749_sort_numeric_strings.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sort_numeric_strings", "test": "def check(candidate):\n    \n    assert candidate(['2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\n    assert candidate(['1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]\n\ndef test_check():\n    check(sort_numeric_strings)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    nums_int = [int(num) for num in nums_str]\n    nums_int.sort()\n    return nums_int\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    nums_int = [int(num) for num in nums_str]\n    nums_int.sort()\n    return nums_int\n```"], "prompt_tokens": [420], "completion_tokens": [292], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_749_sort_numeric_strings"}
{"name": "mbpp_750_add_tuple", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef add_tuple(test_list: List[int], test_tup: Tuple[int, int]) -> List[int]:\n    \"\"\"\n\tWrite a function to add the given tuple to the given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_750_add_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "add_tuple", "test": "def check(candidate):\n    \n    assert candidate([6, 7, 8], (10, 11))==[6, 7, 8, 10, 11]\n    assert candidate([7, 8, 9], (11, 12))==[7, 8, 9, 11, 12]\n\ndef test_check():\n    check(add_tuple)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef add_tuple_as_element(test_list: List[int], test_tup: Tuple[int, int]) -> List[int]:\n    # Add the tuple as a single element to the list\n    test_list.append(test_tup)\n    return test_list\n\ndef add_tuple_elements(test_list: List[int], test_tup: Tuple[int, int]) -> List[int]:\n    # Add the individual elements of the tuple to the list\n    test_list.extend(test_tup)\n    return test_list\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef add_tuple_as_element(test_list: List[int], test_tup: Tuple[int, int]) -> List[int]:\n    # Add the tuple as a single element to the list\n    test_list.append(test_tup)\n    return test_list\n\ndef add_tuple_elements(test_list: List[int], test_tup: Tuple[int, int]) -> List[int]:\n    # Add the individual elements of the tuple to the list\n    test_list.extend(test_tup)\n    return test_list\n```"], "prompt_tokens": [443], "completion_tokens": [398], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_750_add_tuple"}
{"name": "mbpp_751_check_min_heap", "language": "Python3", "prompt": "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_751_check_min_heap.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_min_heap", "test": "def check(candidate):\n    \n    assert candidate([2, 3, 4, 5, 10, 15])==True\n    assert candidate([2, 10, 4, 5, 3, 15])==False\n\ndef test_check():\n    check(check_min_heap)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range((n - 2) // 2 + 1):\n        if arr[i] > arr[2 * i + 1]:\n            return False\n        if 2 * i + 2 < n and arr[i] > arr[2 * i + 2]:\n            return False\n    return True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range((n - 2) // 2 + 1):\n        if arr[i] > arr[2 * i + 1]:\n            return False\n        if 2 * i + 2 < n and arr[i] > arr[2 * i + 2]:\n            return False\n    return True\n```"], "prompt_tokens": [606], "completion_tokens": [520], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_751_check_min_heap"}
{"name": "mbpp_752_jacobsthal_num", "language": "Python3", "prompt": "def jacobsthal_num(n: int) -> int:\n    \"\"\"\n\tWrite a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_752_jacobsthal_num.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "jacobsthal_num", "test": "def check(candidate):\n    \n    assert candidate(2)==1\n    assert candidate(4)==5\n    assert candidate(13)==2731\n\ndef test_check():\n    check(jacobsthal_num)\n\ntest_check()\n", "source_codes": ["\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    j0, j1 = 0, 1\n    for i in range(2, n + 1):\n        jn = j1 + 2 * j0\n        j0, j1 = j1, jn\n    return j1\n\n# Example usage:\nprint(jacobsthal_num(10))  # Output: 341\n\n\n"], "responses": ["```python\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    \n    j0, j1 = 0, 1\n    for i in range(2, n + 1):\n        jn = j1 + 2 * j0\n        j0, j1 = j1, jn\n    return j1\n\n# Example usage:\nprint(jacobsthal_num(10))  # Output: 341\n```"], "prompt_tokens": [629], "completion_tokens": [490], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_752_jacobsthal_num"}
{"name": "mbpp_753_min_k", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    \"\"\"\n\tWrite a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_753_min_k.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "min_k", "test": "def check(candidate):\n    \n    assert candidate([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3)==[('Akash', 3), ('Angat', 5), ('Nepin', 9)]\n    assert candidate([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1)==[('Ayesha', 9)]\n\ndef test_check():\n    check(min_k)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[:K]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    sorted_list = sorted(test_list, key=lambda x: x[1])\n    return sorted_list[:K]\n```"], "prompt_tokens": [490], "completion_tokens": [326], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_753_min_k"}
{"name": "mbpp_754_extract_index_list", "language": "Python3", "prompt": "from typing import List, Any\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[Any]:\n    \"\"\"\n\tWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "extract_index_list", "test": "def check(candidate):\n    \n    assert candidate([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7])==[1, 6]\n    assert candidate([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])==[1, 5]\n    assert candidate([1, 2, 3, 4, 6, 6, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])==[]\n\ndef test_check():\n    check(extract_index_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[Any]:\n    common_elements = []\n    for item1, item2, item3 in zip(l1, l2, l3):\n        if item1 == item2 == item3:\n            common_elements.append(item1)\n    return common_elements\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[Any]:\n    common_elements = []\n    for item1, item2, item3 in zip(l1, l2, l3):\n        if item1 == item2 == item3:\n            common_elements.append(item1)\n    return common_elements\n```"], "prompt_tokens": [578], "completion_tokens": [431], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_754_extract_index_list"}
{"name": "mbpp_755_second_smallest", "language": "Python3", "prompt": "from typing import List, Union, Optional\n\ndef second_smallest(numbers: List[Union[int, float]]) -> Optional[float]:\n    \"\"\"\n\tWrite a function to find the second smallest number in a list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_755_second_smallest.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "second_smallest", "test": "def check(candidate):\n    \n    assert candidate([1, 1, -0.5, 0, 2, -2, -2])==-0.5\n    assert candidate([2, 2])==None\n    assert candidate([2, 2, 2])==None\n\ndef test_check():\n    check(second_smallest)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Union, Optional\n\ndef second_smallest(numbers: List[Union[int, float]]) -> Optional[float]:\n    if len(numbers) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif smallest < number < second_smallest:\n            second_smallest = number\n\n    return None if second_smallest == float('inf') else second_smallest\n\n\n"], "responses": ["```python\nfrom typing import List, Union, Optional\n\ndef second_smallest(numbers: List[Union[int, float]]) -> Optional[float]:\n    if len(numbers) < 2:\n        return None\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif smallest < number < second_smallest:\n            second_smallest = number\n\n    return None if second_smallest == float('inf') else second_smallest\n```"], "prompt_tokens": [530], "completion_tokens": [498], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_755_second_smallest"}
{"name": "mbpp_756_text_match_zero_one", "language": "Python3", "prompt": "def text_match_zero_one(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_756_text_match_zero_one.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_zero_one", "test": "def check(candidate):\n    \n    assert candidate('dc')==False\n    assert candidate('abbbba')==True\n    assert candidate('dsabbbba')==True\n    assert candidate('asbbbba')==False\n    assert candidate('abaaa')==True\n\ndef test_check():\n    check(text_match_zero_one)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef text_match_zero_one(text: str) -> bool:\n    pattern = 'ab+'\n    return bool(re.search(pattern, text))\n\n# Example usage:\nprint(text_match_zero_one(\"ab\"))  # Should return True\nprint(text_match_zero_one(\"aabbb\"))  # Should return True\nprint(text_match_zero_one(\"ac\"))  # Should return False\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_zero_one(text: str) -> bool:\n    pattern = 'ab+'\n    return bool(re.search(pattern, text))\n\n# Example usage:\nprint(text_match_zero_one(\"ab\"))  # Should return True\nprint(text_match_zero_one(\"aabbb\"))  # Should return True\nprint(text_match_zero_one(\"ac\"))  # Should return False\n```"], "prompt_tokens": [442], "completion_tokens": [347], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_756_text_match_zero_one"}
{"name": "mbpp_757_count_reverse_pairs", "language": "Python3", "prompt": "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    \"\"\"\n\tWrite a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_757_count_reverse_pairs.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_reverse_pairs", "test": "def check(candidate):\n    \n    assert candidate(['geeks', 'best', 'for', 'skeeg'])==1\n    assert candidate(['makes', 'best', 'sekam', 'for', 'rof'])==2\n\ndef test_check():\n    check(count_reverse_pairs)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\nfrom collections import Counter\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_pairs_count = 0\n    string_counter = Counter(test_list)\n\n    for string in string_counter:\n        reverse_string = string[::-1]\n        if reverse_string in string_counter:\n            reverse_pairs_count += min(string_counter[string], string_counter[reverse_string])\n\n    return reverse_pairs_count // 2\n\n# Example usage:\ntest_list = [\"geeks\", \"keeg\", \"abc\", \"cba\"]\nprint(count_reverse_pairs(test_list))  # Output: 2\n\n\n"], "responses": ["```python\nfrom typing import List\nfrom collections import Counter\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_pairs_count = 0\n    string_counter = Counter(test_list)\n\n    for string in string_counter:\n        reverse_string = string[::-1]\n        if reverse_string in string_counter:\n            reverse_pairs_count += min(string_counter[string], string_counter[reverse_string])\n\n    return reverse_pairs_count // 2\n\n# Example usage:\ntest_list = [\"geeks\", \"keeg\", \"abc\", \"cba\"]\nprint(count_reverse_pairs(test_list))  # Output: 2\n```"], "prompt_tokens": [705], "completion_tokens": [650], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_757_count_reverse_pairs"}
{"name": "mbpp_759_is_decimal", "language": "Python3", "prompt": "def is_decimal(num: str) -> bool:\n    \"\"\"\n\tWrite a function to check whether a given string is a decimal number with a precision of 2.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_759_is_decimal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_decimal", "test": "def check(candidate):\n    \n    assert candidate('e666.86')==False\n    assert candidate('3.124587')==False\n    assert candidate('1.11')==True\n    assert candidate('1.1.11')==False\n\ndef test_check():\n    check(is_decimal)\n\ntest_check()\n", "source_codes": ["\ndef is_decimal(num: str) -> bool:\n    parts = num.split('.')\n    if len(parts) == 2:\n        before_decimal, after_decimal = parts\n        if before_decimal.isdigit() and after_decimal.isdigit():\n            return len(after_decimal) == 2\n    return False\n\n# Example usage:\nprint(is_decimal(\"123.45\"))  # True\nprint(is_decimal(\"123.4\"))   # False\nprint(is_decimal(\"123\"))     # False\nprint(is_decimal(\"abc.def\")) # False\nprint(is_decimal(\"123.456\")) # False\n\n\n"], "responses": ["```python\ndef is_decimal(num: str) -> bool:\n    parts = num.split('.')\n    if len(parts) == 2:\n        before_decimal, after_decimal = parts\n        if before_decimal.isdigit() and after_decimal.isdigit():\n            return len(after_decimal) == 2\n    return False\n\n# Example usage:\nprint(is_decimal(\"123.45\"))  # True\nprint(is_decimal(\"123.4\"))   # False\nprint(is_decimal(\"123\"))     # False\nprint(is_decimal(\"abc.def\")) # False\nprint(is_decimal(\"123.456\")) # False\n```"], "prompt_tokens": [461], "completion_tokens": [452], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_759_is_decimal"}
{"name": "mbpp_760_unique_Element", "language": "Python3", "prompt": "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether a list of numbers contains only one distinct element or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_760_unique_Element.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "unique_Element", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 1, 2])==False\n    assert candidate([1, 2, 3, 4, 5])==False\n\ndef test_check():\n    check(unique_Element)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef unique_element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1 if arr else False\n\n# Example usage:\nprint(unique_element([1, 1, 1, 1]))  # Should return True\nprint(unique_element([1, 2, 1, 1]))  # Should return False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef unique_element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1 if arr else False\n\n# Example usage:\nprint(unique_element([1, 1, 1, 1]))  # Should return True\nprint(unique_element([1, 2, 1, 1]))  # Should return False\n```"], "prompt_tokens": [576], "completion_tokens": [515], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_760_unique_Element"}
{"name": "mbpp_762_check_monthnumber_number", "language": "Python3", "prompt": "def check_monthnumber_number(monthnum3: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_762_check_monthnumber_number.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_monthnumber_number", "test": "def check(candidate):\n    \n    assert candidate(2)==False\n    assert candidate(12)==False\n\ndef test_check():\n    check(check_monthnumber_number)\n\ntest_check()\n", "source_codes": ["\ndef check_monthnumber_number(monthnum3: int) -> bool:\n    months_with_30_days = [4, 6, 9, 11]\n    return monthnum3 in months_with_30_days\n\n# Example usage:\nprint(check_monthnumber_number(4))  # True\nprint(check_monthnumber_number(2))  # False\n\n\n"], "responses": ["```python\ndef check_monthnumber_number(monthnum3: int) -> bool:\n    months_with_30_days = [4, 6, 9, 11]\n    return monthnum3 in months_with_30_days\n\n# Example usage:\nprint(check_monthnumber_number(4))  # True\nprint(check_monthnumber_number(2))  # False\n```"], "prompt_tokens": [495], "completion_tokens": [415], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_762_check_monthnumber_number"}
{"name": "mbpp_763_find_min_diff", "language": "Python3", "prompt": "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_763_find_min_diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_min_diff", "test": "def check(candidate):\n    \n    assert candidate([4, 3, 2, 6], 4)==1\n    assert candidate([30, 5, 20, 9], 4)==4\n\ndef test_check():\n    check(find_min_diff)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\n# Example usage:\narr = [1, 5, 3, 19, 18, 25]\nn = len(arr)\nprint(find_min_diff(arr, n))  # Output should be 1\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\n# Example usage:\narr = [1, 5, 3, 19, 18, 25]\nn = len(arr)\nprint(find_min_diff(arr, n))  # Output should be 1\n```"], "prompt_tokens": [527], "completion_tokens": [469], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_763_find_min_diff"}
{"name": "mbpp_764_number_ctr", "language": "Python3", "prompt": "def number_ctr(str: str) -> int:\n    \"\"\"\n\tWrite a python function to count number of digits in a given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "number_ctr", "test": "def check(candidate):\n    \n    assert candidate('3wonders')==1\n    assert candidate('123')==3\n    assert candidate('3wond-1ers2')==3\n\ndef test_check():\n    check(number_ctr)\n\ntest_check()\n", "source_codes": ["\ndef number_ctr(input_str: str) -> int:\n    digit_count = 0\n    for char in input_str:\n        if char.isdigit():\n            digit_count += 1\n    return digit_count\n\n# Example usage:\nexample_string = \"Hello123\"\nprint(number_ctr(example_string))  # Output: 3\n\n\n"], "responses": ["```python\ndef number_ctr(input_str: str) -> int:\n    digit_count = 0\n    for char in input_str:\n        if char.isdigit():\n            digit_count += 1\n    return digit_count\n\n# Example usage:\nexample_string = \"Hello123\"\nprint(number_ctr(example_string))  # Output: 3\n```"], "prompt_tokens": [396], "completion_tokens": [347], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_764_number_ctr"}
{"name": "mbpp_765_is_polite", "language": "Python3", "prompt": "def is_polite(n: int) -> int:\n    \"\"\"\n\tWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_765_is_polite.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_polite", "test": "def check(candidate):\n    \n    assert candidate(4)==7\n    assert candidate(9)==13\n\ndef test_check():\n    check(is_polite)\n\ntest_check()\n", "source_codes": ["\ndef is_power_of_two(n):\n    return (n & (n - 1)) == 0\n\ndef nth_polite_number(n):\n    polite_count = 0\n    current_number = 1\n    while polite_count < n:\n        if not is_power_of_two(current_number):\n            polite_count += 1\n        current_number += 1\n    return current_number - 1\n\n# Example usage:\nn = 5\nprint(f\"The {n}th polite number is: {nth_polite_number(n)}\")\n\n\n"], "responses": ["```python\ndef is_power_of_two(n):\n    return (n & (n - 1)) == 0\n\ndef nth_polite_number(n):\n    polite_count = 0\n    current_number = 1\n    while polite_count < n:\n        if not is_power_of_two(current_number):\n            polite_count += 1\n        current_number += 1\n    return current_number - 1\n\n# Example usage:\nn = 5\nprint(f\"The {n}th polite number is: {nth_polite_number(n)}\")\n```"], "prompt_tokens": [510], "completion_tokens": [491], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_765_is_polite"}
{"name": "mbpp_766_pair_wise", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    \"\"\"\n\tWrite a function to return a list of all pairs of consecutive items in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_766_pair_wise.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pair_wise", "test": "def check(candidate):\n    \n    assert candidate([1, 5, 7, 9, 10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\n    assert candidate([5, 1, 9, 7, 10])==[(5, 1), (1, 9), (9, 7), (7, 10)]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]\n\ndef test_check():\n    check(pair_wise)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    pairs = []\n    for i in range(len(l1) - 1):\n        pair = (l1[i], l1[i + 1])\n        pairs.append(pair)\n    return pairs\n\n# Example usage:\nexample_list = [1, 2, 3, 4, 5]\nprint(pair_wise(example_list))  # Output: [(1, 2), (2, 3), (3, 4), (4, 5)]\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    pairs = []\n    for i in range(len(l1) - 1):\n        pair = (l1[i], l1[i + 1])\n        pairs.append(pair)\n    return pairs\n\n# Example usage:\nexample_list = [1, 2, 3, 4, 5]\nprint(pair_wise(example_list))  # Output: [(1, 2), (2, 3), (3, 4), (4, 5)]\n```"], "prompt_tokens": [461], "completion_tokens": [431], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_766_pair_wise"}
{"name": "mbpp_767_get_pairs_count", "language": "Python3", "prompt": "from typing import List\n\ndef get_pairs_count(arr: List[int], sum: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_767_get_pairs_count.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "get_pairs_count", "test": "def check(candidate):\n    \n    assert candidate([1, 5, 7, -1, 5], 6)==3\n    assert candidate([1, -2, 3], 1)==1\n    assert candidate([-1, -2, 3], -3)==1\n\ndef test_check():\n    check(get_pairs_count)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef get_pairs_count(arr: List[int], sum: int) -> int:\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    count = 0\n    for num in arr:\n        complement = sum - num\n        if complement in freq:\n            count += freq[complement]\n        if complement == num:\n            count -= 1\n    \n    return count // 2\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef get_pairs_count(arr: List[int], sum: int) -> int:\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    \n    count = 0\n    for num in arr:\n        complement = sum - num\n        if complement in freq:\n            count += freq[complement]\n        if complement == num:\n            count -= 1\n    \n    return count // 2\n```"], "prompt_tokens": [671], "completion_tokens": [606], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_767_get_pairs_count"}
{"name": "mbpp_769_Diff", "language": "Python3", "prompt": "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    \"\"\"\n\tWrite a python function to get the difference between two lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_769_Diff.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "Diff", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5], [6, 7, 1])==[2, 3, 4, 5, 6, 7]\n    assert candidate([1, 2, 3], [6, 7, 1])==[2, 3, 6, 7]\n\ndef test_check():\n    check(Diff)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef symmetric_difference(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1) ^ set(li2))\n\ndef difference(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1) - set(li2))\n\ndef difference_ordered(li1: List[int], li2: List[int]) -> List[int]:\n    return [elem for elem in li1 if elem not in li2]\n\ndef difference_ordered_efficient(li1: List[int], li2: List[int]) -> List[int]:\n    set_li2 = set(li2)\n    return [elem for elem in li1 if elem not in set_li2]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef symmetric_difference(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1) ^ set(li2))\n\ndef difference(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1) - set(li2))\n\ndef difference_ordered(li1: List[int], li2: List[int]) -> List[int]:\n    return [elem for elem in li1 if elem not in li2]\n\ndef difference_ordered_efficient(li1: List[int], li2: List[int]) -> List[int]:\n    set_li2 = set(li2)\n    return [elem for elem in li1 if elem not in set_li2]\n```"], "prompt_tokens": [830], "completion_tokens": [841], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_769_Diff"}
{"name": "mbpp_770_odd_num_sum", "language": "Python3", "prompt": "def odd_num_sum(n: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of fourth power of first n odd natural numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_770_odd_num_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_num_sum", "test": "def check(candidate):\n    \n    assert candidate(3)==707\n    assert candidate(4)==3108\n\ndef test_check():\n    check(odd_num_sum)\n\ntest_check()\n", "source_codes": ["\ndef odd_num_sum(n: int) -> int:\n    sum_of_powers = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_powers += odd_number ** 4\n        odd_number += 2\n    return sum_of_powers\n\n# Example usage:\nn = 5\nprint(odd_num_sum(n))\n\n\n"], "responses": ["```python\ndef odd_num_sum(n: int) -> int:\n    sum_of_powers = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_powers += odd_number ** 4\n        odd_number += 2\n    return sum_of_powers\n\n# Example usage:\nn = 5\nprint(odd_num_sum(n))\n```"], "prompt_tokens": [383], "completion_tokens": [334], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_770_odd_num_sum"}
{"name": "mbpp_771_check_expression", "language": "Python3", "prompt": "def check_expression(exp: str) -> bool:\n    \"\"\"\n\tWrite a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_expression", "test": "def check(candidate):\n    \n    assert candidate('{()}[{]')==False\n    assert candidate('{()}[{}][]({})')==True\n\ndef test_check():\n    check(check_expression)\n\ntest_check()\n", "source_codes": ["\ndef check_expression(exp: str) -> bool:\n    stack = []\n    bracket_pairs = {')': '(', '}': '{', ']': '['}\n    for char in exp:\n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            if not stack or stack[-1] != bracket_pairs[char]:\n                return False\n            stack.pop()\n    return not stack\n\n# Example usage:\nexpression = \"{[()]}()\"\nprint(check_expression(expression))  # Output: True\n\nexpression = \"{[(])}\"\nprint(check_expression(expression))  # Output: False\n\nexpression = \"((()\"\nprint(check_expression(expression))  # Output: False\n\n\n"], "responses": ["```python\ndef check_expression(exp: str) -> bool:\n    stack = []\n    bracket_pairs = {')': '(', '}': '{', ']': '['}\n    for char in exp:\n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            if not stack or stack[-1] != bracket_pairs[char]:\n                return False\n            stack.pop()\n    return not stack\n\n# Example usage:\nexpression = \"{[()]}()\"\nprint(check_expression(expression))  # Output: True\n\nexpression = \"{[(])}\"\nprint(check_expression(expression))  # Output: False\n\nexpression = \"((()\"\nprint(check_expression(expression))  # Output: False\n```"], "prompt_tokens": [572], "completion_tokens": [558], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_771_check_expression"}
{"name": "mbpp_772_remove_length", "language": "Python3", "prompt": "def remove_length(test_str: str, K: int) -> str:\n    \"\"\"\n\tWrite a function to remove all the words with k length in the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_length", "test": "def check(candidate):\n    \n    assert candidate('If you told me about this ok', 4)=='If you me about ok'\n    assert candidate('Forces of darkeness is come into the play', 4)=='Forces of darkeness is the'\n\ndef test_check():\n    check(remove_length)\n\ntest_check()\n", "source_codes": ["\ndef remove_length(test_str: str, K: int) -> str:\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    result_str = ' '.join(filtered_words)\n    return result_str\n\n# Example usage:\ninput_str = \"This is a test string with some words of varying lengths\"\nk = 4\nprint(remove_length(input_str, k))  # Output: \"This is test string with some of varying lengths\"\n\n\n"], "responses": ["```python\ndef remove_length(test_str: str, K: int) -> str:\n    words = test_str.split()\n    filtered_words = [word for word in words if len(word) != K]\n    result_str = ' '.join(filtered_words)\n    return result_str\n\n# Example usage:\ninput_str = \"This is a test string with some words of varying lengths\"\nk = 4\nprint(remove_length(input_str, k))  # Output: \"This is test string with some of varying lengths\"\n```"], "prompt_tokens": [397], "completion_tokens": [370], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_772_remove_length"}
{"name": "mbpp_773_occurance_substring", "language": "Python3", "prompt": "from typing import Optional, Tuple\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    \"\"\"\n\tWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_773_occurance_substring.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "occurance_substring", "test": "def check(candidate):\n    \n    assert candidate('python programming,programming language', 'programming')==('programming', 7, 18)\n    assert candidate('python programming,programming language', 'language')==('language', 31, 39)\n    assert candidate('c++ programming, c++ language', 'python')==None\n\ndef test_check():\n    check(occurance_substring)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Optional, Tuple\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)\n\n# Example usage:\ntext = \"This is a simple example.\"\npattern = \"simple\"\nresult = occurance_substring(text, pattern)\nprint(result)  # Output: ('simple', 10, 16)\n\n\n"], "responses": ["```python\nfrom typing import Optional, Tuple\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)\n\n# Example usage:\ntext = \"This is a simple example.\"\npattern = \"simple\"\nresult = occurance_substring(text, pattern)\nprint(result)  # Output: ('simple', 10, 16)\n```"], "prompt_tokens": [557], "completion_tokens": [495], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_773_occurance_substring"}
{"name": "mbpp_775_odd_position", "language": "Python3", "prompt": "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether every odd index contains odd numbers of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_775_odd_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_position", "test": "def check(candidate):\n    \n    assert candidate([4, 1, 2])==True\n    assert candidate([1, 2, 3])==False\n\ndef test_check():\n    check(odd_position)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n\n# Example usage:\nprint(odd_position([1, 3, 5, 7, 9]))  # Should return True\nprint(odd_position([1, 2, 5, 7, 9]))  # Should return False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n\n# Example usage:\nprint(odd_position([1, 3, 5, 7, 9]))  # Should return True\nprint(odd_position([1, 2, 5, 7, 9]))  # Should return False\n```"], "prompt_tokens": [470], "completion_tokens": [438], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_775_odd_position"}
{"name": "mbpp_776_count_vowels", "language": "Python3", "prompt": "def count_vowels(test_str: str) -> int:\n    \"\"\"\n\tWrite a function to count those characters which have vowels as their neighbors in the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_776_count_vowels.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_vowels", "test": "def check(candidate):\n    \n    assert candidate('partofthejourneyistheend')==12\n    assert candidate('amazonprime')==5\n\ndef test_check():\n    check(count_vowels)\n\ntest_check()\n", "source_codes": ["\ndef count_vowels(test_str: str) -> int:\n    count = 0\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i in range(1, len(test_str) - 1):\n        if test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n\n# Example usage:\nprint(count_vowels(\"Hello, World!\"))\nprint(count_vowels(\"A man, a plan, a canal, Panama\"))\n\n\n"], "responses": ["```python\ndef count_vowels(test_str: str) -> int:\n    count = 0\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i in range(1, len(test_str) - 1):\n        if test_str[i - 1] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n\n# Example usage:\nprint(count_vowels(\"Hello, World!\"))\nprint(count_vowels(\"A man, a plan, a canal, Panama\"))\n```"], "prompt_tokens": [574], "completion_tokens": [577], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_776_count_vowels"}
{"name": "mbpp_777_find_sum", "language": "Python3", "prompt": "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of non-repeated elements in a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_777_find_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_sum", "test": "def check(candidate):\n    \n    assert candidate([1, 10, 9, 4, 2, 10, 10, 45, 4])==71\n    assert candidate([12, 10, 9, 45, 2, 10, 10, 45, 10])==78\n\ndef test_check():\n    check(find_sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    counts = Counter(arr)\n    return sum(value for value, count in counts.items() if count == 1)\n\n\n"], "responses": ["```python\nfrom typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    counts = Counter(arr)\n    return sum(value for value, count in counts.items() if count == 1)\n```"], "prompt_tokens": [420], "completion_tokens": [330], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_777_find_sum"}
{"name": "mbpp_778_pack_consecutive_duplicates", "language": "Python3", "prompt": "from typing import List, Any\n\ndef pack_consecutive_duplicates(list1: List[Any]) -> List[List[Any]]:\n    \"\"\"\n\tWrite a function to pack consecutive duplicates of a given list elements into sublists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "pack_consecutive_duplicates", "test": "def check(candidate):\n    \n    assert candidate([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\n    assert candidate(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]\n\ndef test_check():\n    check(pack_consecutive_duplicates)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Any\n\ndef pack_consecutive_duplicates(list1: List[Any]) -> List[List[Any]]:\n    if not list1:\n        return []\n\n    packed_list = []\n    current_sublist = [list1[0]]\n\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_sublist.append(list1[i])\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [list1[i]]\n\n    packed_list.append(current_sublist)\n\n    return packed_list\n\n\n"], "responses": ["```python\nfrom typing import List, Any\n\ndef pack_consecutive_duplicates(list1: List[Any]) -> List[List[Any]]:\n    if not list1:\n        return []\n\n    packed_list = []\n    current_sublist = [list1[0]]\n\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_sublist.append(list1[i])\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [list1[i]]\n\n    packed_list.append(current_sublist)\n\n    return packed_list\n```"], "prompt_tokens": [625], "completion_tokens": [597], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_778_pack_consecutive_duplicates"}
{"name": "mbpp_780_find_combinations", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n\tWrite a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "find_combinations", "test": "def check(candidate):\n    \n    assert candidate([(3, 5), (7, 8), (6, 2), (7, 11)])==[(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\n    assert candidate([(4, 6), (8, 9), (7, 3), (8, 12)])==[(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]\n\ndef test_check():\n    check(find_combinations)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    unique_sums = set()\n    for r in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, r):\n            combo_sum = sum([x[0] for x in combo]), sum([x[1] for x in combo])\n            unique_sums.add(combo_sum)\n    return list(unique_sums)\n\n# Example usage:\ntest_list = [(1, 2), (2, 3), (3, 4)]\nprint(find_combinations(test_list))\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\nfrom itertools import combinations\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    unique_sums = set()\n    for r in range(1, len(test_list) + 1):\n        for combo in combinations(test_list, r):\n            combo_sum = sum([x[0] for x in combo]), sum([x[1] for x in combo])\n            unique_sums.add(combo_sum)\n    return list(unique_sums)\n\n# Example usage:\ntest_list = [(1, 2), (2, 3), (3, 4)]\nprint(find_combinations(test_list))\n```"], "prompt_tokens": [551], "completion_tokens": [491], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_780_find_combinations"}
{"name": "mbpp_781_count_divisors", "language": "Python3", "prompt": "def count_divisors(n: int) -> bool:\n    \"\"\"\n\tWrite a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_781_count_divisors.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_divisors", "test": "def check(candidate):\n    \n    assert candidate(100)==False\n    assert candidate(125)==True\n\ndef test_check():\n    check(count_divisors)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef count_divisors(n: int) -> bool:\n    sqrt_n = math.sqrt(n)\n    return sqrt_n != int(sqrt_n)\n\n# Example usage:\nprint(count_divisors(10))  # Should return False because 10 has 4 divisors: 1, 2, 5, 10\nprint(count_divisors(9))   # Should return True because 9 has 3 divisors: 1, 3, 9\n\n\n"], "responses": ["```python\nimport math\n\ndef count_divisors(n: int) -> bool:\n    sqrt_n = math.sqrt(n)\n    return sqrt_n != int(sqrt_n)\n\n# Example usage:\nprint(count_divisors(10))  # Should return False because 10 has 4 divisors: 1, 2, 5, 10\nprint(count_divisors(9))   # Should return True because 9 has 3 divisors: 1, 3, 9\n```"], "prompt_tokens": [785], "completion_tokens": [722], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_781_count_divisors"}
{"name": "mbpp_782_odd_length_sum", "language": "Python3", "prompt": "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "odd_length_sum", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 1, 2])==15\n    assert candidate([1, 7])==8\n\ndef test_check():\n    check(odd_length_sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    \n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            subarray_sum = sum(arr[start:start + length])\n            total_sum += subarray_sum\n            \n    return total_sum\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    \n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            subarray_sum = sum(arr[start:start + length])\n            total_sum += subarray_sum\n            \n    return total_sum\n```"], "prompt_tokens": [594], "completion_tokens": [511], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_782_odd_length_sum"}
{"name": "mbpp_783_rgb_to_hsv", "language": "Python3", "prompt": "from typing import List\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> List[float]:\n    \"\"\"\n\tWrite a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_783_rgb_to_hsv.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "rgb_to_hsv", "test": "def check(candidate):\n    \n    assert candidate(0, 215, 0)==[120.0, 100.0, 84.31372549019608]\n    assert candidate(10, 215, 110)==[149.26829268292684, 95.34883720930233, 84.31372549019608]\n\ndef test_check():\n    check(rgb_to_hsv)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> List[float]:\n    r_prime = r / 255.0\n    g_prime = g / 255.0\n    b_prime = b / 255.0\n\n    c_max = max(r_prime, g_prime, b_prime)\n    c_min = min(r_prime, g_prime, b_prime)\n    delta = c_max - c_min\n\n    if delta == 0:\n        h = 0\n    elif c_max == r_prime:\n        h = 60 * (((g_prime - b_prime) / delta) % 6)\n    elif c_max == g_prime:\n        h = 60 * (((b_prime - r_prime) / delta) + 2)\n    elif c_max == b_prime:\n        h = 60 * (((r_prime - g_prime) / delta) + 4)\n\n    if c_max == 0:\n        s = 0\n    else:\n        s = delta / c_max\n\n    v = c_max\n\n    return [h, s, v]\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef rgb_to_hsv(r: int, g: int, b: int) -> List[float]:\n    r_prime = r / 255.0\n    g_prime = g / 255.0\n    b_prime = b / 255.0\n\n    c_max = max(r_prime, g_prime, b_prime)\n    c_min = min(r_prime, g_prime, b_prime)\n    delta = c_max - c_min\n\n    if delta == 0:\n        h = 0\n    elif c_max == r_prime:\n        h = 60 * (((g_prime - b_prime) / delta) % 6)\n    elif c_max == g_prime:\n        h = 60 * (((b_prime - r_prime) / delta) + 2)\n    elif c_max == b_prime:\n        h = 60 * (((r_prime - g_prime) / delta) + 4)\n\n    if c_max == 0:\n        s = 0\n    else:\n        s = delta / c_max\n\n    v = c_max\n\n    return [h, s, v]\n```"], "prompt_tokens": [660], "completion_tokens": [712], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_783_rgb_to_hsv"}
{"name": "mbpp_784_mul_even_odd", "language": "Python3", "prompt": "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    \"\"\"\n\tWrite a function to find the product of first even and odd number of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "mul_even_odd", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==2\n    assert candidate([1, 5, 7, 9, 10])==10\n\ndef test_check():\n    check(mul_even_odd)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return 0\n    \n    return first_even * first_odd\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    \n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    \n    if first_even is None or first_odd is None:\n        return 0\n    \n    return first_even * first_odd\n```"], "prompt_tokens": [580], "completion_tokens": [562], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_784_mul_even_odd"}
{"name": "mbpp_785_tuple_str_int", "language": "Python3", "prompt": "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, int, int]:\n    \"\"\"\n\tWrite a function to convert tuple string to integer tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_785_tuple_str_int.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "tuple_str_int", "test": "def check(candidate):\n    \n    assert candidate('(1, 2, 3)')==(1, 2, 3)\n    assert candidate('(4, 5, 6)')==(4, 5, 6)\n    assert candidate('(7, 81, 19)')==(7, 81, 19)\n\ndef test_check():\n    check(tuple_str_int)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, int, int]:\n    test_str = test_str.strip(\" ()\")\n    elements = test_str.split(\",\")\n    int_elements = tuple(int(element) for element in elements)\n    return int_elements\n\n# Example usage:\ntest_str = \"(1, 2, 3)\"\nresult = tuple_str_int(test_str)\nprint(result)  # Output: (1, 2, 3)\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, int, int]:\n    test_str = test_str.strip(\" ()\")\n    elements = test_str.split(\",\")\n    int_elements = tuple(int(element) for element in elements)\n    return int_elements\n\n# Example usage:\ntest_str = \"(1, 2, 3)\"\nresult = tuple_str_int(test_str)\nprint(result)  # Output: (1, 2, 3)\n```"], "prompt_tokens": [400], "completion_tokens": [364], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_785_tuple_str_int"}
{"name": "mbpp_786_right_insertion", "language": "Python3", "prompt": "from typing import List\n\ndef right_insertion(a: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a function to locate the right insertion point for a specified value in sorted order.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_786_right_insertion.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "right_insertion", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 4, 5], 3)==2\n    assert candidate([1, 2, 4, 5], 7)==4\n\ndef test_check():\n    check(right_insertion)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef right_insertion(a: List[int], x: int) -> int:\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n\n# Example usage:\nsorted_list = [1, 3, 4, 7, 10]\nvalue_to_insert = 5\ninsertion_point = right_insertion(sorted_list, value_to_insert)\nprint(f\"The right insertion point for {value_to_insert} is at index {insertion_point}.\")\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef right_insertion(a: List[int], x: int) -> int:\n    left, right = 0, len(a) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n\n# Example usage:\nsorted_list = [1, 3, 4, 7, 10]\nvalue_to_insert = 5\ninsertion_point = right_insertion(sorted_list, value_to_insert)\nprint(f\"The right insertion point for {value_to_insert} is at index {insertion_point}.\")\n```"], "prompt_tokens": [573], "completion_tokens": [579], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_786_right_insertion"}
{"name": "mbpp_787_text_match_three", "language": "Python3", "prompt": "def text_match_three(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an a followed by three 'b'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_787_text_match_three.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_match_three", "test": "def check(candidate):\n    \n    assert candidate('dc')==False\n    assert candidate('abbbba')==True\n    assert candidate('caacabbbba')==True\n\ndef test_check():\n    check(text_match_three)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef text_match_three(text: str) -> bool:\n    pattern = 'ab{3}'\n    return bool(re.search(pattern, text))\n\n# Example usage:\nprint(text_match_three(\"abbb\"))  # Should return True\nprint(text_match_three(\"aabbbb\"))  # Should return True\nprint(text_match_three(\"aabbc\"))  # Should return False\n\n\n"], "responses": ["```python\nimport re\n\ndef text_match_three(text: str) -> bool:\n    pattern = 'ab{3}'\n    return bool(re.search(pattern, text))\n\n# Example usage:\nprint(text_match_three(\"abbb\"))  # Should return True\nprint(text_match_three(\"aabbbb\"))  # Should return True\nprint(text_match_three(\"aabbc\"))  # Should return False\n```"], "prompt_tokens": [444], "completion_tokens": [398], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_787_text_match_three"}
{"name": "mbpp_788_new_tuple", "language": "Python3", "prompt": "from typing import List, Tuple\n\ndef new_tuple(test_list: List[str], test_str: str) -> Tuple[str, str, str]:\n    \"\"\"\n\tWrite a function to create a new tuple from the given string and list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_788_new_tuple.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "new_tuple", "test": "def check(candidate):\n    \n    assert candidate(['We', 'are'], 'Developers')==('We', 'are', 'Developers')\n    assert candidate(['Part', 'is'], 'Wrong')==('Part', 'is', 'Wrong')\n\ndef test_check():\n    check(new_tuple)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List, Tuple\n\ndef new_tuple(test_list: List[str], test_str: str) -> Tuple[str, str, str]:\n    result = (test_str,)\n    for i in range(2):\n        if i < len(test_list):\n            result += (test_list[i],)\n        else:\n            result += (\"\",)\n    return result\n\n\n"], "responses": ["```python\nfrom typing import List, Tuple\n\ndef new_tuple(test_list: List[str], test_str: str) -> Tuple[str, str, str]:\n    result = (test_str,)\n    for i in range(2):\n        if i < len(test_list):\n            result += (test_list[i],)\n        else:\n            result += (\"\",)\n    return result\n```"], "prompt_tokens": [604], "completion_tokens": [523], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_788_new_tuple"}
{"name": "mbpp_790_even_position", "language": "Python3", "prompt": "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    \"\"\"\n\tWrite a python function to check whether every even index contains even numbers of a given list.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_790_even_position.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "even_position", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3])==False\n    assert candidate([2, 1, 4])==True\n\ndef test_check():\n    check(even_position)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n\n# Example usage:\nprint(even_position([2, 3, 4, 5, 6]))  # Should return True\nprint(even_position([2, 3, 5, 5, 6]))  # Should return False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True\n\n# Example usage:\nprint(even_position([2, 3, 4, 5, 6]))  # Should return True\nprint(even_position([2, 3, 5, 5, 6]))  # Should return False\n```"], "prompt_tokens": [475], "completion_tokens": [444], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_790_even_position"}
{"name": "mbpp_791_remove_nested", "language": "Python3", "prompt": "from typing import Any, Tuple\n\ndef remove_nested(test_tup: Any) -> Tuple[int, int, int, int]:\n    \"\"\"\n\tWrite a function to remove tuples from the given tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_791_remove_nested.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_nested", "test": "def check(candidate):\n    \n    assert candidate((2, 6, 8, (5, 7), 11))==(2, 6, 8, 11)\n    assert candidate((3, 7, 9, (6, 8), 12))==(3, 7, 9, 12)\n    assert candidate((3, 7, 9, (6, 8), (5, 12), 12))==(3, 7, 9, 12)\n\ndef test_check():\n    check(remove_nested)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Any, Tuple\n\ndef remove_nested(test_tup: Any) -> Tuple[int, int, int, int]:\n    non_nested = [elem for elem in test_tup if not isinstance(elem, tuple)]\n    \n    if len(non_nested) < 4:\n        raise ValueError(\"Not enough non-tuple elements to return a 4-tuple.\")\n    \n    return tuple(non_nested[:4])\n\n\n"], "responses": ["```python\nfrom typing import Any, Tuple\n\ndef remove_nested(test_tup: Any) -> Tuple[int, int, int, int]:\n    non_nested = [elem for elem in test_tup if not isinstance(elem, tuple)]\n    \n    if len(non_nested) < 4:\n        raise ValueError(\"Not enough non-tuple elements to return a 4-tuple.\")\n    \n    return tuple(non_nested[:4])\n```"], "prompt_tokens": [588], "completion_tokens": [530], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_791_remove_nested"}
{"name": "mbpp_792_count_list", "language": "Python3", "prompt": "from typing import List\n\ndef count_list(input_list: List[List[int]]) -> int:\n    \"\"\"\n\tWrite a python function to count the number of lists in a given number of lists.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_792_count_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_list", "test": "def check(candidate):\n    \n    assert candidate([[1, 2], [2, 3], [4, 5]])==3\n    assert candidate([[1, 0], [2, 0]])==2\n\ndef test_check():\n    check(count_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef count_list(input_list: List[List[int]]) -> int:\n    return len(input_list)\n\n# Example usage:\nnested_lists = [[1, 2, 3], [4, 5], [6], []]\nprint(count_list(nested_lists))  # Output: 4\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_list(input_list: List[List[int]]) -> int:\n    return len(input_list)\n\n# Example usage:\nnested_lists = [[1, 2, 3], [4, 5], [6], []]\nprint(count_list(nested_lists))  # Output: 4\n```"], "prompt_tokens": [299], "completion_tokens": [227], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_792_count_list"}
{"name": "mbpp_793_last", "language": "Python3", "prompt": "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    \"\"\"\n\tWrite a python function to find the last position of an element in a sorted array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_793_last.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "last", "test": "def check(candidate):\n    \n    assert candidate([1, 1, 1, 2, 3, 4], 1)==2\n    assert candidate([2, 3, 2, 3, 6, 8, 9], 3)==3\n\ndef test_check():\n    check(last)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n\n# Example usage:\narr = [1, 2, 4, 4, 4, 5, 6, 6]\nx = 4\nprint(last(arr, x))  # Output should be 4\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = 0, len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n\n# Example usage:\narr = [1, 2, 4, 4, 4, 5, 6, 6]\nx = 4\nprint(last(arr, x))  # Output should be 4\n```"], "prompt_tokens": [715], "completion_tokens": [737], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_793_last"}
{"name": "mbpp_794_text_starta_endb", "language": "Python3", "prompt": "def text_starta_endb(text: str) -> bool:\n    \"\"\"\n\tWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_794_text_starta_endb.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "text_starta_endb", "test": "def check(candidate):\n    \n    assert candidate('aabAbbbc')==False\n    assert candidate('accddbbjjj')==False\n\ndef test_check():\n    check(text_starta_endb)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef text_starta_endb(text: str) -> bool:\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))\n\n\n"], "responses": ["```python\nimport re\n\ndef text_starta_endb(text: str) -> bool:\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))\n```"], "prompt_tokens": [425], "completion_tokens": [323], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_794_text_starta_endb"}
{"name": "mbpp_796_return_sum", "language": "Python3", "prompt": "from typing import Dict\n\ndef return_sum(dict: Dict[str, int]) -> int:\n    \"\"\"\n\tWrite function to find the sum of all items in the given dictionary.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_796_return_sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "return_sum", "test": "def check(candidate):\n    \n    assert candidate({ 'a': 25, 'b': 18, 'c': 45 })==88\n    assert candidate({ 'a': 36, 'b': 39, 'c': 49 })==124\n\ndef test_check():\n    check(return_sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Dict\n\ndef return_sum(dict: Dict[str, int]) -> int:\n    total = 0\n    for value in dict.values():\n        total += value\n    return total\n\n# Example usage:\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\nprint(return_sum(my_dict))  # Output: 6\n\n\n"], "responses": ["```python\nfrom typing import Dict\n\ndef return_sum(dict: Dict[str, int]) -> int:\n    total = 0\n    for value in dict.values():\n        total += value\n    return total\n\n# Example usage:\nmy_dict = {'a': 1, 'b': 2, 'c': 3}\nprint(return_sum(my_dict))  # Output: 6\n```"], "prompt_tokens": [369], "completion_tokens": [316], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_796_return_sum"}
{"name": "mbpp_797_sum_in_range", "language": "Python3", "prompt": "def sum_in_range(l: int, r: int) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of all odd natural numbers within the range l and r.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_797_sum_in_range.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "sum_in_range", "test": "def check(candidate):\n    \n    assert candidate(5, 7)==12\n    assert candidate(7, 13)==40\n\ndef test_check():\n    check(sum_in_range)\n\ntest_check()\n", "source_codes": ["\ndef sum_in_range(l: int, r: int) -> int:\n    if l % 2 == 0:\n        l += 1\n    total_sum = 0\n    for number in range(l, r + 1, 2):\n        total_sum += number\n    return total_sum\n\n# Example usage:\nprint(sum_in_range(1, 10))\n\n\n"], "responses": ["```python\ndef sum_in_range(l: int, r: int) -> int:\n    if l % 2 == 0:\n        l += 1\n    total_sum = 0\n    for number in range(l, r + 1, 2):\n        total_sum += number\n    return total_sum\n\n# Example usage:\nprint(sum_in_range(1, 10))\n```"], "prompt_tokens": [453], "completion_tokens": [394], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_797_sum_in_range"}
{"name": "mbpp_798__sum", "language": "Python3", "prompt": "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the sum of an array.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_798__sum.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "_sum", "test": "def check(candidate):\n    \n    assert candidate([15, 12, 13, 10])==50\n    assert candidate([0, 1, 2])==3\n\ndef test_check():\n    check(_sum)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef _sum(arr: List[int]) -> int:\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nprint(_sum(numbers))  # Output: 15\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef _sum(arr: List[int]) -> int:\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\n# Example usage:\nnumbers = [1, 2, 3, 4, 5]\nprint(_sum(numbers))  # Output: 15\n```"], "prompt_tokens": [348], "completion_tokens": [295], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_798__sum"}
{"name": "mbpp_799_left_rotate", "language": "Python3", "prompt": "def left_rotate(n: int, d: int) -> int:\n    \"\"\"\n\tWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_799_left_rotate.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "left_rotate", "test": "def check(candidate):\n    \n    assert candidate(10, 2)==40\n    assert candidate(99, 3)==792\n    assert candidate(99, 3)==792\n    assert candidate(1, 3)==8\n    assert candidate(5, 3)==40\n    assert candidate(29, 3)==232\n\ndef test_check():\n    check(left_rotate)\n\ntest_check()\n", "source_codes": ["\ndef left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    left_shifted = (n << d) & 0xFFFFFFFF\n    right_shifted = (n >> (32 - d)) & ((1 << d) - 1)\n    rotated_n = left_shifted | right_shifted\n    return rotated_n\n\n\n"], "responses": ["```python\ndef left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    left_shifted = (n << d) & 0xFFFFFFFF\n    right_shifted = (n >> (32 - d)) & ((1 << d) - 1)\n    rotated_n = left_shifted | right_shifted\n    return rotated_n\n```"], "prompt_tokens": [702], "completion_tokens": [634], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_799_left_rotate"}
{"name": "mbpp_800_remove_all_spaces", "language": "Python3", "prompt": "def remove_all_spaces(text: str) -> str:\n    \"\"\"\n\tWrite a function to remove all whitespaces from a string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_800_remove_all_spaces.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "remove_all_spaces", "test": "def check(candidate):\n    \n    assert candidate('python   programming    language')=='pythonprogramminglanguage'\n    assert candidate('python                     program')=='pythonprogram'\n    assert candidate('   python                     program')=='pythonprogram'\n\ndef test_check():\n    check(remove_all_spaces)\n\ntest_check()\n", "source_codes": ["\nimport re\n\ndef remove_all_spaces(text: str) -> str:\n    return re.sub(r'\\s+', '', text)\n\n\n"], "responses": ["```python\nimport re\n\ndef remove_all_spaces(text: str) -> str:\n    return re.sub(r'\\s+', '', text)\n```"], "prompt_tokens": [308], "completion_tokens": [220], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_800_remove_all_spaces"}
{"name": "mbpp_801_test_three_equal", "language": "Python3", "prompt": "def test_three_equal(x: int, y: int, z: int) -> int:\n    \"\"\"\n\tWrite a python function to count the number of equal numbers from three given integers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_801_test_three_equal.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "test_three_equal", "test": "def check(candidate):\n    \n    assert candidate(-1, -2, -3)==0\n    assert candidate(1, 2, 2)==2\n\ndef test_check():\n    check(test_three_equal)\n\ntest_check()\n", "source_codes": ["\ndef test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n\n# Example usage:\nprint(test_three_equal(1, 1, 1))  # Output: 3\nprint(test_three_equal(1, 2, 1))  # Output: 2\nprint(test_three_equal(1, 2, 3))  # Output: 0\n\n\n"], "responses": ["```python\ndef test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0\n\n# Example usage:\nprint(test_three_equal(1, 1, 1))  # Output: 3\nprint(test_three_equal(1, 2, 1))  # Output: 2\nprint(test_three_equal(1, 2, 3))  # Output: 0\n```"], "prompt_tokens": [423], "completion_tokens": [409], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_801_test_three_equal"}
{"name": "mbpp_802_count_rotation", "language": "Python3", "prompt": "from typing import List\n\ndef count_rotation(arr: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_802_count_rotation.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "count_rotation", "test": "def check(candidate):\n    \n    assert candidate([4, 5, 1, 2, 3])==2\n    assert candidate([7, 8, 9, 1, 2, 3])==3\n    assert candidate([1, 2, 3])==0\n    assert candidate([1, 3, 2])==2\n\ndef test_check():\n    check(count_rotation)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef count_rotation(arr: List[int]) -> int:\n    # Find the index of the minimum element\n    min_index = arr.index(min(arr))\n    \n    # The number of rotations is equal to the index of the minimum element\n    return min_index\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef count_rotation(arr: List[int]) -> int:\n    # Find the index of the minimum element\n    min_index = arr.index(min(arr))\n    \n    # The number of rotations is equal to the index of the minimum element\n    return min_index\n```"], "prompt_tokens": [521], "completion_tokens": [401], "no_of_try": 1, "is_solved": false, "task_id": "mbpp_802_count_rotation"}
{"name": "mbpp_803_is_perfect_square", "language": "Python3", "prompt": "def is_perfect_square(n: int) -> bool:\n    \"\"\"\n\tWrite a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_803_is_perfect_square.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_perfect_square", "test": "def check(candidate):\n    \n    assert candidate(36)==True\n    assert candidate(14)==False\n    assert candidate(196)==True\n    assert candidate(125)==False\n    assert candidate(15625)==True\n\ndef test_check():\n    check(is_perfect_square)\n\ntest_check()\n", "source_codes": ["\nimport math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    \n    sqrt_n = math.sqrt(n)\n    return sqrt_n.is_integer()\n\n\n"], "responses": ["```python\nimport math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    \n    sqrt_n = math.sqrt(n)\n    return sqrt_n.is_integer()\n```"], "prompt_tokens": [463], "completion_tokens": [339], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_803_is_perfect_square"}
{"name": "mbpp_804_is_product_even", "language": "Python3", "prompt": "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    \"\"\"\n\tWrite a function to check whether the product of numbers in a list is even or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_804_is_product_even.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "is_product_even", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 1, 4])==True\n    assert candidate([1, 1])==False\n\ndef test_check():\n    check(is_product_even)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False\n\n# Example usage:\nnumbers = [1, 3, 5, 7]\nprint(is_product_even(numbers))  # Output: False\n\nnumbers = [1, 3, 4, 7]\nprint(is_product_even(numbers))  # Output: True\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False\n\n# Example usage:\nnumbers = [1, 3, 5, 7]\nprint(is_product_even(numbers))  # Output: False\n\nnumbers = [1, 3, 4, 7]\nprint(is_product_even(numbers))  # Output: True\n```"], "prompt_tokens": [440], "completion_tokens": [400], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_804_is_product_even"}
{"name": "mbpp_805_max_sum_list", "language": "Python3", "prompt": "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    \"\"\"\n\tWrite a function that returns the list in a list of lists whose sum of elements is the highest.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_805_max_sum_list.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_sum_list", "test": "def check(candidate):\n    \n    assert candidate([[3, 2, 1], [6, 5, 4], [12, 11, 10]])==[12, 11, 10]\n    assert candidate([[2, 3, 1]])==[2, 3, 1]\n\ndef test_check():\n    check(max_sum_list)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    max_sum = float('-inf')\n    max_sum_list = []\n\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lst\n\n    return max_sum_list\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    max_sum = float('-inf')\n    max_sum_list = []\n\n    for lst in lists:\n        current_sum = sum(lst)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sum_list = lst\n\n    return max_sum_list\n```"], "prompt_tokens": [536], "completion_tokens": [464], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_805_max_sum_list"}
{"name": "mbpp_806_max_run_uppercase", "language": "Python3", "prompt": "def max_run_uppercase(test_str: str) -> int:\n    \"\"\"\n\tWrite a function to find maximum run of uppercase characters in the given string.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_806_max_run_uppercase.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "max_run_uppercase", "test": "def check(candidate):\n    \n    assert candidate('PrECIOusMOVemENTSYT')==6\n    assert candidate('GooGLEFluTTER')==4\n\ndef test_check():\n    check(max_run_uppercase)\n\ntest_check()\n", "source_codes": ["\ndef max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n\n    max_run = max(max_run, current_run)\n\n    return max_run\n\n# Example usage:\nprint(max_run_uppercase(\"aBBBccDDDDDeeFFF\"))  # Output should be 5\n\n\n"], "responses": ["```python\ndef max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n\n    max_run = max(max_run, current_run)\n\n    return max_run\n\n# Example usage:\nprint(max_run_uppercase(\"aBBBccDDDDDeeFFF\"))  # Output should be 5\n```"], "prompt_tokens": [538], "completion_tokens": [527], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_806_max_run_uppercase"}
{"name": "mbpp_807_first_odd", "language": "Python3", "prompt": "from typing import List\n\ndef first_odd(nums: List[int]) -> int:\n    \"\"\"\n\tWrite a python function to find the first odd number in a given list of numbers.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_807_first_odd.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "first_odd", "test": "def check(candidate):\n    \n    assert candidate([2, 4, 1, 3])==1\n    assert candidate([8, 9, 1])==9\n\ndef test_check():\n    check(first_odd)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef first_odd(nums: List[int]) -> int:\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n\n# Example usage:\nnumbers = [2, 4, 6, 8, 10, 11, 14]\nprint(first_odd(numbers))  # Output: 11\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef first_odd(nums: List[int]) -> int:\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n\n# Example usage:\nnumbers = [2, 4, 6, 8, 10, 11, 14]\nprint(first_odd(numbers))  # Output: 11\n```"], "prompt_tokens": [477], "completion_tokens": [423], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_807_first_odd"}
{"name": "mbpp_808_check_K", "language": "Python3", "prompt": "from typing import List\n\ndef check_K(test_tup: List[int], K: int) -> bool:\n    \"\"\"\n\tWrite a function to check if the given tuples contain the k or not.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_808_check_K.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_K", "test": "def check(candidate):\n    \n    assert candidate([1, 2, 3, 4, 5, 6], 7)==False\n    assert candidate([7, 8, 9, 44, 11, 12], 11)==True\n\ndef test_check():\n    check(check_K)\n\ntest_check()\n", "source_codes": ["\nfrom typing import List\n\ndef check_K(test_tup: List[int], K: int) -> bool:\n    return K in test_tup\n\n# Example usage:\ntest_tup = [1, 5, 8, 3]\nK = 5\nprint(check_K(test_tup, K))  # Output: True\n\nK = 2\nprint(check_K(test_tup, K))  # Output: False\n\n\n"], "responses": ["```python\nfrom typing import List\n\ndef check_K(test_tup: List[int], K: int) -> bool:\n    return K in test_tup\n\n# Example usage:\ntest_tup = [1, 5, 8, 3]\nK = 5\nprint(check_K(test_tup, K))  # Output: True\n\nK = 2\nprint(check_K(test_tup, K))  # Output: False\n```"], "prompt_tokens": [603], "completion_tokens": [552], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_808_check_K"}
{"name": "mbpp_809_check_smaller", "language": "Python3", "prompt": "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> bool:\n    \"\"\"\n\tWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\t\"\"\"\n", "doctests": "transform", "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_809_check_smaller.py", "prompt_terminology": "reworded", "stop_tokens": ["\ndef", "\n#", "\nif", "\nclass"], "entry_point": "check_smaller", "test": "def check(candidate):\n    \n    assert candidate((4, 5, 6), (3, 4, 5))==True\n    assert candidate((11, 12, 13), (10, 11, 12))==True\n\ndef test_check():\n    check(check_smaller)\n\ntest_check()\n", "source_codes": ["\nfrom typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> bool:\n    for a, b in zip(test_tup1, test_tup2):\n        if b >= a:\n            return False\n    return True\n\n\n"], "responses": ["```python\nfrom typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, int, int], test_tup2: Tuple[int, int, int]) -> bool:\n    for a, b in zip(test_tup1, test_tup2):\n        if b >= a:\n            return False\n    return True\n```"], "prompt_tokens": [556], "completion_tokens": [440], "no_of_try": 1, "is_solved": true, "task_id": "mbpp_809_check_smaller"}
