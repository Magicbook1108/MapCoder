{"task_id": "HumanEval/79", "solution": "from typing import *\n\ndef decimal_to_binary(decimal):\n    binary_digits = []\n    while decimal > 0:\n        remainder = decimal % 2\n        binary_digits.append(str(remainder))\n        decimal = decimal // 2\n    binary_digits.reverse()\n    binary_string = ''.join(binary_digits)\n    return f\"db{binary_string}db\"\n\n# Test cases\nprint(decimal_to_binary(15))   # Output: \"db1111db\"\nprint(decimal_to_binary(32))   # Output: \"db100000db\"\n\n\n"}
{"task_id": "HumanEval/86", "solution": "from typing import *\n\n  def anti_shuffle(s):\n      words = s.split(' ')\n      sorted_words = [''.join(sorted(word)) for word in words]\n      return ' '.join(sorted_words)\n\n  # Test cases\n  print(anti_shuffle('Hi'))  # Output: 'Hi'\n  print(anti_shuffle('hello'))  # Output: 'ehllo'\n  print(anti_shuffle('Hello World!!!'))  # Output: 'Hello !!!Wdlor'\n  \n "}
{"task_id": "HumanEval/116", "solution": "from typing import *\n\ndef sort_array(arr):\n    # Define the key function\n    def sort_key(x):\n        return (bin(x).count('1'), x)\n    \n    # Use sorted with the custom key\n    return sorted(arr, key=sort_key)\n\n# Test cases\nprint(sort_array([1, 5, 2, 3, 4]))  # Output: [1, 2, 3, 4, 5]\nprint(sort_array([-2, -3, -4, -5, -6]))  # Output: [-6, -5, -4, -3, -2]\nprint(sort_array([1, 0, 2, 3, 4]))  # Output: [0, 1, 2, 3, 4]\n\n\n"}
{"task_id": "HumanEval/148", "solution": "from typing import *\n\ndef bf(planet1, planet2):\n    # List of planets in order from the Sun\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    # Check if both planets are in the list\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    # Get the indices of the two planets\n    idx1, idx2 = planets.index(planet1), planets.index(planet2)\n    \n    # Ensure idx1 is less than idx2 for correct slicing\n    if idx1 > idx2:\n        idx1, idx2 = idx2, idx1\n    \n    # Return the tuple of planets between the two indices\n    return tuple(planets[idx1+1:idx2])\n\n# Examples\nprint(bf(\"Jupiter\", \"Neptune\"))  # Output: (\"Saturn\", \"Uranus\")\nprint(bf(\"Earth\", \"Mercury\"))    # Output: (\"Venus\",)\nprint(bf(\"Mercury\", \"Uranus\"))   # Output: (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\n\n"}
{"task_id": "HumanEval/160", "solution": "from typing import *\n\ndef do_algebra(operators, operands):\n    # Start with the first operand as the initial part of the expression\n    expression = str(operands[0])\n    \n    # Iterate through the operators and the rest of the operands\n    for i, operator in enumerate(operators):\n        # Append the operator and the next operand to the expression\n        expression += \" \" + operator + \" \" + str(operands[i + 1])\n    \n    # Evaluate the expression and return the result\n    return eval(expression)\n\n# Example usage:\noperators = ['+', '*', '-']\noperands = [2, 3, 4, 5]\nresult = do_algebra(operators, operands)\nprint(result)  # Output should be 9\n\n\n"}
{"task_id": "HumanEval/163", "solution": "from typing import *\n\ndef generate_integers(a, b):\n    # Ensure the range is from the smaller to the larger number\n    start, end = min(a, b), max(a, b)\n    \n    # Use a list comprehension to generate the list of even numbers\n    even_digits = [num for num in range(start, end + 1) if num % 2 == 0]\n    \n    return even_digits\n\n# Test cases\nprint(generate_integers(2, 8))  # Output: [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # Output: [2, 4, 6, 8]\nprint(generate_integers(10, 14)) # Output: []\n\n\n"}
{"task_id": "HumanEval/159", "solution": "from typing import *\n\ndef eat(number, need, remaining):\n    if remaining < need:\n        # Eat all the remaining carrots\n        number += remaining\n        remaining = 0\n    else:\n        # Eat only the carrots you need\n        number += need\n        remaining -= need\n    return [number, remaining]\n\n# Example usage:\nprint(eat(5, 6, 10))  # Output: [11, 4]\nprint(eat(4, 8, 9))   # Output: [12, 1]\nprint(eat(1, 10, 10))  # Output: [11, 0]\nprint(eat(2, 11, 5))   # Output: [7, 0]\n\n\n"}
{"task_id": "HumanEval/154", "solution": "from typing import *\n\ndef cycpattern_check(a, b):\n    # Concatenate string b with itself\n    doubled_b = b + b\n    # Check if a is a substring of the doubled string b\n    return a in doubled_b\n\n# Test cases\nprint(cycpattern_check(\"abcd\",\"abd\")) # => False\nprint(cycpattern_check(\"hello\",\"ell\")) # => True\nprint(cycpattern_check(\"whassup\",\"psus\")) # => False\nprint(cycpattern_check(\"abab\",\"baa\")) # => True\nprint(cycpattern_check(\"efef\",\"eeff\")) # => False\nprint(cycpattern_check(\"himenss\",\"simen\")) # => True\n\n\n"}
{"task_id": "HumanEval/145", "solution": "from typing import *\n\ndef order_by_points(nums):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))  # Use abs to handle negative numbers\n\n    def sort_key(item):\n        num, index = item\n        return (sum_of_digits(num), index)\n\n    # Enumerate the list to get (number, index) pairs, sort by the key, then extract the numbers\n    return [num for num, _ in sorted(enumerate(nums), key=sort_key)]\n\n# Test cases\nprint(order_by_points([1, 11, -1, -11, -12]))  # Output: [-1, -11, 1, -12, 11]\nprint(order_by_points([]))  # Output: []\n\n\n"}
{"task_id": "HumanEval/140", "solution": "from typing import *\n\n  def fix_spaces(text):\n      result = []\n      space_count = 0\n      \n      for char in text:\n          if char == ' ':\n              space_count += 1\n          else:\n              if space_count > 0:\n                  if space_count > 2:\n                      result.append('-')\n                  else:\n                      result.extend(['_'] * space_count)\n              space_count = 0\n              result.append(char)\n      \n      # Handle trailing spaces\n      if space_count > 2:\n          result.append('-')\n      else:\n          result.extend(['_'] * space_count)\n      \n      return ''.join(result)\n\n  # Test cases\n  print(fix_spaces(\"Example\"))        # \"Example\"\n  print(fix_spaces(\"Example 1\"))      # \"Example_1\"\n  print(fix_spaces(\" Example 2\"))     # \"_Example_2\"\n  print(fix_spaces(\" Example   3\"))   # \"_Example-3\"\n  \n "}
{"task_id": "HumanEval/137", "solution": "from typing import *\n\ndef compare_one(a, b):\n    # Helper function to convert strings to float if necessary\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n            return float(value)\n        return value\n    \n    # Convert inputs to floats for comparison\n    num_a = convert_to_float(a)\n    num_b = convert_to_float(b)\n    \n    # Compare and return the original type of the larger value\n    if num_a > num_b:\n        return a\n    elif num_b > num_a:\n        return b\n    else:\n        return None\n\n# Test cases\nprint(compare_one(1, 2.5))  # \u279e 2.5\nprint(compare_one(1, \"2,3\"))  # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))  # \u279e \"6\"\nprint(compare_one(\"1\", 1))  # \u279e None\n\n\n"}
{"task_id": "HumanEval/134", "solution": "from typing import *\n\ndef check_if_last_char_is_a_letter(txt):\n    # Check if the string is empty\n    if not txt:\n        return False\n    \n    # Remove trailing whitespace\n    trimmed_txt = txt.rstrip()\n    \n    # Check if the last character is an alphabetical character\n    if trimmed_txt and trimmed_txt[-1].isalpha():\n        return True\n    else:\n        return False\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\"))    # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))   # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"\"))             # \u279e False\n\n\n"}
{"task_id": "HumanEval/132", "solution": "from typing import *\n\n  def is_nested(string):\n      stack = []\n      found_nested = False\n      for char in string:\n          if char == '[':\n              stack.append(char)\n          elif char == ']':\n              if stack:\n                  stack.pop()\n                  found_nested = True\n      return found_nested\n\n  # Test cases\n  print(is_nested('[[]]'))  # \u279e True\n  print(is_nested('[]]]]]]][[[[[]'))  # \u279e False\n  print(is_nested('[][]'))  # \u279e False\n  print(is_nested('[]'))  # \u279e False\n  print(is_nested('[[][]]'))  # \u279e True\n  print(is_nested('[[]][]'))  # \u279e True\n  \n "}
{"task_id": "HumanEval/131", "solution": "from typing import *\n\n  def digits(n):\n      product = 1\n      has_odd = False\n      while n > 0:\n          digit = n % 10\n          if digit % 2 != 0:\n              product *= digit\n              has_odd = True\n          n //= 10\n      return product if has_odd else 0\n  \n "}
{"task_id": "HumanEval/130", "solution": "from typing import *\n\ndef tri(n):\n    # Base cases\n    tribonacci = [1, 3]\n    \n    # If n is 0 or 1, return the sliced list\n    if n < 2:\n        return tribonacci[:n+1]\n    \n    # Calculate the Tribonacci numbers up to n\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            tribonacci.append(1 + i // 2)\n        else:\n            # Ensure we have the value for tri(i+1)\n            if len(tribonacci) <= i:\n                tribonacci.append(1 + (i + 1) // 2)\n            tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i])\n    \n    return tribonacci\n\n# Example usage:\nprint(tri(3))  # Output: [1, 3, 2, 8]\n\n\n"}
{"task_id": "HumanEval/129", "solution": "from typing import *\n\ndef minPath(grid, k):\n    N = len(grid)\n    min_path = [float('inf')] * k  # Initialize with infinity to ensure any path is better\n\n    def dfs(x, y, path):\n        if len(path) == k:\n            nonlocal min_path\n            min_path = min(min_path, path)\n            return\n        for dx, dy in [(-1, 0), (1, 0), (0, -1), (0, 1)]:  # Explore all 4 directions\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < N and 0 <= ny < N:  # Check if the new position is within the grid\n                dfs(nx, ny, path + [grid[nx][ny]])\n\n    for i in range(N):\n        for j in range(N):\n            dfs(i, j, [grid[i][j]])  # Start DFS from each cell\n\n    return min_path\n\n# Example usage:\ngrid1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nk1 = 3\nprint(minPath(grid1, k1))  # Output: [1, 2, 1]\n\ngrid2 = [[5, 9, 3], [4, 1, 6], [7, 8, 2]]\nk2 = 1\nprint(minPath(grid2, k2))  # Output: [1]\n\n\n"}
{"task_id": "HumanEval/127", "solution": "from typing import *\n\ndef is_prime(n):\n    \"\"\"Check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Determine if the intersection of two intervals is a prime length.\"\"\"\n    (a, b), (c, d) = interval1, interval2\n    start = max(a, c)\n    end = min(b, d)\n    if start > end:  # No intersection\n        return \"NO\"\n    length_of_intersection = end - start + 1\n    return \"YES\" if is_prime(length_of_intersection) else \"NO\"\n\n# Example usage:\nprint(intersection((1, 2), (2, 3)))  # Output: \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # Output: \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # Output: \"YES\"\n\n\n"}
{"task_id": "HumanEval/126", "solution": "from typing import *\n\ndef is_sorted(lst):\n    if not lst:  # If the list is empty, it is considered sorted\n        return True\n    \n    previous = -1  # Initialize previous number to a value less than any list element\n    duplicate_count = 0  # Counter for duplicates\n    \n    for number in lst:\n        if number < previous:  # If the current number is less than the previous, list is not sorted\n            return False\n        if number == previous:  # If the current number is equal to the previous, increment duplicate count\n            duplicate_count += 1\n            if duplicate_count > 1:  # If more than one duplicate, return False\n                return False\n        else:\n            duplicate_count = 0  # Reset duplicate count for a new number\n        previous = number  # Update previous number to the current number\n    \n    return True  # If the loop completes, the list is sorted with no more than one duplicate\n\n# Test cases\nprint(is_sorted([5]))  # True\nprint(is_sorted([1, 2, 3, 4, 5]))  # True\nprint(is_sorted([1, 3, 2, 4, 5]))  # False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # False\n\n\n"}
{"task_id": "HumanEval/125", "solution": "from typing import *\n\ndef split_words(txt):\n    # Check if there are whitespaces and split on them\n    if ' ' in txt:\n        return txt.split()\n    # Check if there are commas and split on them\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        # Count the number of lowercase letters with odd order in the alphabet\n        return sum(1 for char in txt if char.islower() and (ord(char) - ord('a')) % 2 == 0)\n\n# Test cases\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))        # == 3\n\n\n"}
{"task_id": "HumanEval/124", "solution": "from typing import *\n\n  def valid_date(date):\n      # Check if the date is in the correct format\n      if len(date) != 10 or date[2] != '-' or date[5] != '-':\n          return False\n      \n      # Split the date into components\n      parts = date.split('-')\n      if len(parts) != 3:\n          return False\n      \n      month, day, year = parts\n      \n      # Validate month\n      if not month.isdigit() or not 1 <= int(month) <= 12:\n          return False\n      \n      # Validate day\n      if not day.isdigit() or not 1 <= int(day):\n          return False\n      \n      month = int(month)\n      day = int(day)\n      thirty_day_months = {4, 6, 9, 11}\n      \n      if month in thirty_day_months and day > 30:\n          return False\n      elif month == 2:  # February\n          if day > 29:\n              return False\n      elif day > 31:\n          return False\n      \n      # Validate year\n      if not year.isdigit() or len(year) != 4:\n          return False\n      \n      return True\n\n  # Test cases\n  print(valid_date('03-11-2000'))  # True\n  print(valid_date('15-01-2012'))  # False\n  print(valid_date('04-0-2040'))   # False\n  print(valid_date('06-04-2020'))  # True\n  print(valid_date('06/04/2020'))  # False\n  \n "}
{"task_id": "HumanEval/120", "solution": "from typing import *\n\ndef maximum(arr, k):\n    # Sort the array in non-increasing order\n    sorted_arr = sorted(arr, reverse=True)\n    # Return the first k elements\n    return sorted_arr[:k]\n\n# Example usage:\nprint(maximum([-3, -4, 5], 3))  # Output: [5, -3, -4]\nprint(maximum([4, -4, 4], 2))   # Output: [4, 4]\nprint(maximum([-3, 2, 1, 2, -1, -2, 1], 1))  # Output: [2]\n\n\n"}
{"task_id": "HumanEval/119", "solution": "from typing import *\n\n  def match_parens(lst):\n      first, second = lst\n      # Count the number of open and close parentheses in both strings\n      open_first, close_first = first.count('('), first.count(')')\n      open_second, close_second = second.count('('), second.count(')')\n\n      # If one string has more closing parentheses, it must come second\n      if close_first > open_first:\n          first, second = second, first\n          open_first, close_first, open_second, close_second = open_second, close_second, open_first, close_first\n\n      # Check if after concatenating the two strings, they are balanced\n      return 'Yes' if open_first >= close_first and open_first + open_second == close_first + close_second else 'No'\n\n  # Examples\n  print(match_parens(['()(', ')']))  # Output: 'Yes'\n  print(match_parens([')', ')']))    # Output: 'No'\n  \n "}
{"task_id": "HumanEval/113", "solution": "from typing import *\n\ndef odd_count(lst):\n    result = []\n    for s in lst:\n        # Count the number of odd digits in the string\n        odd_digits_count = sum(1 for char in s if int(char) % 2 != 0)\n        # Construct the output string with the count replacing 'i'\n        output_string = \"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(\n            odd_digits_count, odd_digits_count, odd_digits_count, odd_digits_count\n        )\n        # Append the output string to the result list\n        result.append(output_string)\n    return result\n\n# Example usage:\nprint(odd_count(['1234567']))\nprint(odd_count(['3', \"11111111\"]))\n\n\n"}
{"task_id": "HumanEval/110", "solution": "from typing import *\n\ndef exchange(lst1, lst2):\n    # Count odd numbers in lst1\n    odd_count_lst1 = sum(1 for num in lst1 if num % 2 != 0)\n    \n    # Count even numbers in lst2\n    even_count_lst2 = sum(1 for num in lst2 if num % 2 == 0)\n    \n    # Check if we can swap odd numbers in lst1 with even numbers in lst2\n    if odd_count_lst1 <= even_count_lst2:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Example usage:\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # Output: \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # Output: \"NO\"\n\n\n"}
{"task_id": "HumanEval/109", "solution": "from typing import *\n\ndef move_one_ball(arr):\n    if not arr:\n        return True\n    \n    dip_found = False\n    n = len(arr)\n    \n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            if dip_found:\n                return False\n            dip_found = True\n    \n    if dip_found and arr[0] < arr[-1]:\n        return False\n    \n    return True\n\n# Example usage:\nprint(move_one_ball([3, 4, 5, 1, 2]))  # True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # False\n\n\n"}
{"task_id": "HumanEval/108", "solution": "from typing import *\n\ndef count_nums(arr):\n    def sum_of_digits(num):\n        is_negative = num < 0\n        num = abs(num)\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        return -digit_sum if is_negative else digit_sum\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n    return count\n\n# Test cases\nprint(count_nums([]))  # Output: 0\nprint(count_nums([-1, 11, -11]))  # Output: 1\nprint(count_nums([1, 1, 2]))  # Output: 3\n\n\n"}
{"task_id": "HumanEval/100", "solution": "from typing import *\n\ndef make_a_pile(n):\n    stones = n\n    levels = [stones]  # Initialize the list with the first level\n    for i in range(1, n):\n        if stones % 2 == 0:  # Check if the current number of stones is even\n            stones += 1\n        else:  # The current number of stones is odd\n            stones += 2\n        levels.append(stones)\n    return levels\n\n# Example usage:\nprint(make_a_pile(3))  # Output: [3, 5, 7]\n\n\n"}
{"task_id": "HumanEval/98", "solution": "from typing import *\n\n  def count_upper(s):\n      # Define a set of uppercase vowels for easy checking\n      uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n      count = 0\n      \n      # Iterate over the string with index\n      for index, char in enumerate(s):\n          # Check if the index is even and the character is an uppercase vowel\n          if index % 2 == 0 and char in uppercase_vowels:\n              count += 1\n              \n      return count\n  \n  # Test cases\n  print(count_upper('aBCdEf'))  # Output: 1\n  print(count_upper('abcdefg'))  # Output: 0\n  print(count_upper('dBBE'))     # Output: 0\n  \n "}
{"task_id": "HumanEval/95", "solution": "from typing import *\n\ndef check_dict_case(dict):\n    if not dict:  # Check if the dictionary is empty\n        return False\n    \n    # Initialize variables to track the case of the keys\n    all_lower = all_upper = None\n    \n    for key in dict.keys():\n        if not isinstance(key, str):  # Check if the key is a string\n            return False\n        if all_lower is None and all_upper is None:\n            # Set the initial case based on the first key\n            all_lower = key.islower()\n            all_upper = key.isupper()\n        else:\n            # Check if the current key matches the initial case\n            if all_lower and not key.islower():\n                return False\n            if all_upper and not key.isupper():\n                return False\n    \n    return True\n\n# Examples\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))  # True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))  # False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))  # False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))  # False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))  # True\n\n\n"}
{"task_id": "HumanEval/94", "solution": "from typing import *\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))\n\ndef skjkasdkd(lst):\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    return sum_of_digits(largest_prime)\n\n# Examples\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]))  # Output: 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))  # Output: 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))  # Output: 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))  # Output: 11\nprint(skjkasdkd([0,81,12,3,1,21]))  # Output: 3\nprint(skjkasdkd([0,8,1,2,1,7]))  # Output: 7\n\n\n"}
{"task_id": "HumanEval/93", "solution": "from typing import *\n\ndef encode(message):\n    vowels = 'aeiouAEIOU'\n    replacements = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w',\n                    'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    \n    encoded_message = ''\n    for char in message:\n        if char in vowels:\n            # Replace vowel with the letter two places ahead in the alphabet\n            encoded_char = replacements[char]\n        else:\n            # Keep the consonant as it is\n            encoded_char = char\n        # Swap the case of the character\n        encoded_message += encoded_char.swapcase()\n    \n    return encoded_message\n\n# Test cases\nprint(encode('test'))  # Output: 'TGST'\nprint(encode('This is a message'))  # Output: 'tHKS KS C MGSSCGG'\n\n\n"}
{"task_id": "HumanEval/91", "solution": "from typing import *\n\n  import re\n\n  def is_bored(S):\n      # Split the string into sentences using the specified delimiters\n      sentences = re.split(r'[.?!]', S)\n      boredom_count = 0\n      \n      # Iterate over each sentence\n      for sentence in sentences:\n          # Strip leading and trailing whitespace and check if it starts with \"I\"\n          if sentence.strip().startswith(\"I\"):\n              boredom_count += 1\n              \n      return boredom_count\n\n  # Example usage:\n  print(is_bored(\"Hello world\"))  # Output: 0\n  print(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))  # Output: 1\n  \n "}
{"task_id": "HumanEval/89", "solution": "from typing import *\n\ndef encrypt(s):\n    encrypted = []\n    for char in s:\n        if 'a' <= char <= 'z':  # Check if it's a lowercase letter\n            # Shift the char, wrap around using modulo if necessary\n            encrypted.append(chr((ord(char) - ord('a') + 4) % 26 + ord('a')))\n        elif 'A' <= char <= 'Z':  # Check if it's an uppercase letter\n            encrypted.append(chr((ord(char) - ord('A') + 4) % 26 + ord('A')))\n        else:\n            encrypted.append(char)  # Non-alphabetic characters are unchanged\n    return ''.join(encrypted)\n\n# Test cases\nprint(encrypt('hi'))          # Output: 'lm'\nprint(encrypt('asdfghjkl'))   # Output: 'ewhjklnop'\nprint(encrypt('gf'))          # Output: 'kj'\nprint(encrypt('et'))          # Output: 'ix'\n\n\n"}
{"task_id": "HumanEval/84", "solution": "from typing import *\n\ndef solve(N):\n    # Calculate the sum of digits\n    sum_of_digits = 0\n    while N > 0:\n        sum_of_digits += N % 10\n        N //= 10\n    \n    # Convert the sum to binary and remove the '0b' prefix\n    binary_sum = bin(sum_of_digits)[2:]\n    \n    return binary_sum\n\n# Example usage:\nprint(solve(1000))  # Output: \"1\"\nprint(solve(150))   # Output: \"110\"\nprint(solve(147))   # Output: \"1100\"\n\n\n"}
{"task_id": "HumanEval/83", "solution": "from typing import *\n\ndef starts_one_ends(n):\n    if n == 1:\n        # Edge case: If there's only one digit, it both starts and ends with 1\n        return 1\n    else:\n        # Numbers starting with 1\n        start_with_1 = 10 ** (n - 1)\n        # Numbers ending with 1\n        end_with_1 = 9 * 10 ** (n - 2)\n        # Numbers both starting and ending with 1\n        start_and_end_with_1 = 10 ** (n - 2)\n        # Total count\n        return start_with_1 + end_with_1 - start_and_end_with_1\n\n# Example usage:\nprint(starts_one_ends(2))  # Output should be 19\n\n\n"}
{"task_id": "HumanEval/81", "solution": "from typing import *\n\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n# Example usage:\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output: ['A+', 'B', 'C-', 'C', 'A-']\n\n\n"}
{"task_id": "HumanEval/77", "solution": "from typing import *\n\ndef iscube(a):\n    # Take the cube root of the number\n    cube_root = a ** (1/3)\n    \n    # Round the cube root to the nearest integer\n    rounded = round(cube_root)\n    \n    # Check if the cube of the rounded number equals the original number\n    return rounded ** 3 == a\n\n# Test cases\nprint(iscube(1))    # True\nprint(iscube(2))    # False\nprint(iscube(-1))   # True\nprint(iscube(64))   # True\nprint(iscube(0))    # True\nprint(iscube(180))  # False\n\n\n"}
{"task_id": "HumanEval/75", "solution": "from typing import *\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False\n\n# Example usage:\nprint(is_multiply_prime(30))  # Output: True\n\n\n"}
{"task_id": "HumanEval/65", "solution": "from typing import *\n\ndef circular_shift(x, shift):\n    x_str = str(x)\n    num_digits = len(x_str)\n    \n    # If shift is greater than the number of digits, return reversed string\n    if shift >= num_digits:\n        return x_str[::-1]\n    \n    # Calculate effective shift\n    effective_shift = shift % num_digits\n    \n    # Perform circular shift\n    shifted_str = x_str[-effective_shift:] + x_str[:-effective_shift]\n    return shifted_str\n\n# Test cases\nprint(circular_shift(12, 1))  # Output: \"21\"\nprint(circular_shift(12, 2))  # Output: \"12\"\n\n\n"}
{"task_id": "HumanEval/49", "solution": "from typing import *\n\ndef modp(n: int, p: int) -> int:\n    result = 1\n    base = 2\n    \n    while n > 0:\n        # If the current bit is 1, multiply the result by the base\n        if n % 2 == 1:\n            result = (result * base) % p\n        # Square the base\n        base = (base * base) % p\n        # Move to the next bit\n        n //= 2\n    \n    return result\n\n# Example usage:\nprint(modp(3, 5))    # Output: 3\nprint(modp(1101, 101))  # Output: 2\nprint(modp(0, 101))  # Output: 1\nprint(modp(3, 11))   # Output: 8\nprint(modp(100, 101))  # Output: 1\n\n\n"}
{"task_id": "HumanEval/41", "solution": "from typing import *\n\ndef car_race_collision(n: int) -> int:\n    \"\"\"\n    Since each car from the left will collide with each car from the right,\n    and there are n cars in each direction, the total number of collisions\n    will be n * n.\n    \"\"\"\n    return n * n\n\n# Example usage:\nprint(car_race_collision(5))  # Output: 25\n\n\n"}
{"task_id": "HumanEval/39", "solution": "from typing import *\n\nimport math\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n):\n    prime_fibs = []\n    a, b = 0, 1\n    while len(prime_fibs) < n:\n        a, b = b, a + b\n        if is_prime(a):\n            prime_fibs.append(a)\n    return prime_fibs[-1]\n\n# Example usage:\nprint(prime_fib(1))  # 2\nprint(prime_fib(2))  # 3\nprint(prime_fib(3))  # 5\nprint(prime_fib(4))  # 13\nprint(prime_fib(5))  # 89\n\n\n"}
{"task_id": "HumanEval/37", "solution": "from typing import *\n\ndef sort_even(l):\n    # Extract elements at even indices\n    even_index_elements = [l[i] for i in range(0, len(l), 2)]\n    # Sort the extracted elements\n    sorted_even_index_elements = sorted(even_index_elements)\n    # Place the sorted elements back into the list at even indices\n    for i, value in zip(range(0, len(l), 2), sorted_even_index_elements):\n        l[i] = value\n    return l\n\n# Test cases\nprint(sort_even([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_even([5, 6, 3, 4]))  # Output: [3, 6, 5, 4]\n\n\n"}
{"task_id": "HumanEval/36", "solution": "from typing import *\n\n  def fizz_buzz(n: int) -> int:\n      count_of_sevens = 0\n      for i in range(1, n):\n          if i % 11 == 0 or i % 13 == 0:\n              count_of_sevens += str(i).count('7')\n      return count_of_sevens\n\n  # Test cases\n  print(fizz_buzz(50))  # Output: 0\n  print(fizz_buzz(78))  # Output: 2\n  print(fizz_buzz(79))  # Output: 3\n  \n "}
{"task_id": "HumanEval/32", "solution": "from typing import *\n\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef poly_derivative(xs: list, x: float):\n    return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0])\n\ndef find_zero(xs: list):\n    # Initial guess for the root\n    x = 0.0\n    # Tolerance for convergence\n    tolerance = 1e-7\n    # Maximum number of iterations\n    max_iterations = 1000\n    \n    for _ in range(max_iterations):\n        f_x = poly(xs, x)\n        f_prime_x = poly_derivative(xs, x)\n        if f_prime_x == 0:\n            raise ValueError(\"Derivative is zero. No solution found.\")\n        \n        # Newton's method formula\n        x_new = x - f_x / f_prime_x\n        \n        # Check for convergence\n        if abs(x_new - x) < tolerance:\n            return x_new\n        x = x_new\n    \n    raise ValueError(\"Exceeded maximum iterations. No solution found.\")\n\n# Example usage:\nprint(round(find_zero([1, 2]), 2))  # f(x) = 1 + 2x\nprint(round(find_zero([-6, 11, -6, 1]), 2))  # f(x) = -6 + 11x - 6x^2 + x^3\n\n\n"}
{"task_id": "HumanEval/26", "solution": "from typing import *\n\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    seen = set()\n    result = []\n    for number in numbers:\n        if number not in seen:\n            seen.add(number)\n            result.append(number)\n    return result\n\n# Example usage:\nprint(remove_duplicates([1, 2, 3, 2, 4]))  # Output: [1, 3, 4]\n\n\n"}
{"task_id": "HumanEval/1", "solution": "from typing import *\n\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    stack = []\n    result = []\n    current_group = \"\"\n    \n    for char in paren_string:\n        if char == ' ':\n            continue\n        if char == '(':\n            if not stack:\n                # Start a new group if the stack was empty\n                current_group = \"\"\n            stack.append(char)\n            current_group += char\n        elif char == ')':\n            stack.pop()\n            current_group += char\n            if not stack:\n                # Group is complete if the stack is empty\n                result.append(current_group)\n    \n    return result\n\n# Example usage:\nprint(separate_paren_groups('( ) (( )) (( )( ))'))  # Output: ['()', '(())', '(()())']\n\n\n"}
{"task_id": "HumanEval/162", "solution": "from typing import *\n\nimport hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    # Create an MD5 hash object\n    md5_hash = hashlib.md5(text.encode())\n    # Return the hexadecimal digest of the hash\n    return md5_hash.hexdigest()\n\n# Example usage:\nprint(string_to_md5('Hello world'))  # Output: 3e25960a79dbc69b674cd4ec67a72c62\n\n\n"}
{"task_id": "HumanEval/161", "solution": "from typing import *\n\ndef solve(s):\n    has_letters = any(char.isalpha() for char in s)\n    if not has_letters:\n        return s[::-1]\n    \n    result = []\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result.append(char.upper())\n            else:\n                result.append(char.lower())\n        else:\n            result.append(char)\n    return ''.join(result)\n\n# Examples\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))    # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\"\n\n\n"}
{"task_id": "HumanEval/158", "solution": "from typing import *\n\ndef find_max(words):\n    max_unique_count = -1\n    max_word = \"\"\n    for word in words:\n        unique_chars = len(set(word))\n        # Update max_word if the current word has more unique characters,\n        # or if it has the same number but is lexicographically smaller.\n        if unique_chars > max_unique_count or (unique_chars == max_unique_count and word < max_word):\n            max_unique_count = unique_chars\n            max_word = word\n    return max_word\n\n# Test cases\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\", \"cc\"]))   # Output: \"aaaaaaa\"\n\n\n"}
{"task_id": "HumanEval/157", "solution": "from typing import *\n\ndef right_angle_triangle(a, b, c):\n    # Sort the sides to ensure the longest side is last\n    sides = sorted([a, b, c])\n    # Apply the Pythagorean theorem\n    return sides[0]**2 + sides[1]**2 == sides[2]**2\n\n# Test cases\nprint(right_angle_triangle(3, 4, 5))  # True\nprint(right_angle_triangle(1, 2, 3))  # False\n\n\n"}
{"task_id": "HumanEval/156", "solution": "from typing import *\n\ndef int_to_mini_roman(number):\n    roman_numerals = [\n        (1000, 'm'), (900, 'cm'), (500, 'd'), (400, 'cd'),\n        (100, 'c'), (90, 'xc'), (50, 'l'), (40, 'xl'),\n        (10, 'x'), (9, 'ix'), (5, 'v'), (4, 'iv'), (1, 'i')\n    ]\n    \n    result = \"\"\n    for value, numeral in roman_numerals:\n        while number >= value:\n            result += numeral\n            number -= value\n    return result\n\n# Examples:\nprint(int_to_mini_roman(19))   # Output: 'xix'\nprint(int_to_mini_roman(152))  # Output: 'clii'\nprint(int_to_mini_roman(426))  # Output: 'cdxxvi'\n\n\n"}
{"task_id": "HumanEval/155", "solution": "from typing import *\n\n  def even_odd_count(num):\n      even_count = 0\n      odd_count = 0\n      num_str = str(abs(num))  # Convert to string and ensure it's positive\n      for digit in num_str:\n          if int(digit) % 2 == 0:  # Check if the digit is even\n              even_count += 1\n          else:  # The digit is odd\n              odd_count += 1\n      return (even_count, odd_count)\n  \n "}
{"task_id": "HumanEval/153", "solution": "from typing import *\n\ndef Strongest_Extension(class_name, extensions):\n    strongest_extension = None\n    max_strength = float('-inf')  # Start with the lowest possible strength\n\n    for extension in extensions:\n        # Count uppercase and lowercase letters\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        strength = CAP - SM\n\n        # Update the strongest extension if necessary\n        if strength > max_strength or strongest_extension is None:\n            strongest_extension = extension\n            max_strength = strength\n\n    return f\"{class_name}.{strongest_extension}\"\n\n# Example usage:\nprint(Strongest_Extension('my_class', ['AA', 'Be', 'CC']))  # Output: my_class.AA\n\n\n"}
{"task_id": "HumanEval/152", "solution": "from typing import *\n\n  def compare(game, guess):\n      # Use a list comprehension to iterate over both arrays and calculate the absolute difference\n      return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]\n\n  # Example usage:\n  print(compare([1,2,3,4,5,1], [1,2,3,4,2,-2]))  # Output: [0,0,0,0,3,3]\n  print(compare([0,5,0,0,0,4], [4,1,1,0,0,-2]))  # Output: [4,4,1,0,0,6]\n  \n "}
{"task_id": "HumanEval/151", "solution": "from typing import *\n\n  def double_the_difference(lst):\n      return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 == 1)\n  \n "}
{"task_id": "HumanEval/150", "solution": "from typing import *\n\n  def is_prime(n):\n      if n <= 1:\n          return False\n      for i in range(2, int(n**0.5) + 1):\n          if n % i == 0:\n              return False\n      return True\n\n  def x_or_y(n, x, y):\n      return x if is_prime(n) else y\n\n  # Examples\n  print(x_or_y(7, 34, 12))  # Output: 34\n  print(x_or_y(15, 8, 5))   # Output: 5\n  \n "}
{"task_id": "HumanEval/149", "solution": "from typing import *\n\ndef sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    # Sort the strings by length and then alphabetically\n    sorted_strings = sorted(even_length_strings, key=lambda s: (len(s), s))\n    return sorted_strings\n\n# Example assertions\nassert sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == [\"aa\"]\nassert sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]) == [\"ab\", \"cd\"]\n\n\n"}
{"task_id": "HumanEval/147", "solution": "from typing import *\n\ndef get_max_triples(n):\n    # Generate the sequence based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    \n    # Count the frequency of each remainder when divided by 3\n    remainder_count = [0, 0, 0]\n    for value in a:\n        remainder_count[value % 3] += 1\n    \n    # Calculate the number of valid triples\n    # There are three cases for the sum to be divisible by 3:\n    # Case 1: All three elements have a remainder of 0\n    # Case 2: One element has a remainder of 0, one has 1, and one has 2\n    # Case 3: All three elements have a remainder of 1 or all have a remainder of 2\n    count = 0\n    count += remainder_count[0] * (remainder_count[0] - 1) * (remainder_count[0] - 2) // 6  # Case 1\n    count += remainder_count[0] * remainder_count[1] * remainder_count[2]  # Case 2\n    count += remainder_count[1] * (remainder_count[1] - 1) * (remainder_count[1] - 2) // 6  # Case 3\n    count += remainder_count[2] * (remainder_count[2] - 1) * (remainder_count[2] - 2) // 6  # Case 3\n    \n    return count\n\n# Example usage:\nprint(get_max_triples(5))  # Output: 1\n\n\n"}
{"task_id": "HumanEval/146", "solution": "from typing import *\n\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10:\n            num_str = str(num)\n            first_digit, last_digit = int(num_str[0]), int(num_str[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count\n\n# Examples\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2\n\n\n"}
{"task_id": "HumanEval/144", "solution": "from typing import *\n\nfrom math import gcd\n\ndef simplify(x, n):\n    # Parse the fractions\n    num_x, den_x = map(int, x.split('/'))\n    num_n, den_n = map(int, n.split('/'))\n    \n    # Multiply the fractions\n    num_product = num_x * num_n\n    den_product = den_x * den_n\n    \n    # Find the greatest common divisor (GCD)\n    greatest_common_divisor = gcd(num_product, den_product)\n    \n    # Simplify the fraction by dividing both numerator and denominator by the GCD\n    num_simplified = num_product // greatest_common_divisor\n    den_simplified = den_product // greatest_common_divisor\n    \n    # Check if the simplified fraction is a whole number\n    return den_simplified == 1\n\n# Test cases\nprint(simplify(\"1/5\", \"5/1\"))  # True\nprint(simplify(\"1/6\", \"2/1\"))  # False\nprint(simplify(\"7/10\", \"10/2\"))  # False\n\n\n"}
{"task_id": "HumanEval/143", "solution": "from typing import *\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_length_words)\n\n# Example usage:\nprint(words_in_sentence(\"This is a test\"))  # Output: \"is\"\nprint(words_in_sentence(\"lets go for swimming\"))  # Output: \"go for\"\n\n\n"}
{"task_id": "HumanEval/142", "solution": "from typing import *\n\ndef sum_squares(lst):\n    total = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n        else:\n            total += num\n    return total\n\n# Examples\nprint(sum_squares([1, 2, 3]))  # Output: 6\nprint(sum_squares([]))  # Output: 0\nprint(sum_squares([-1, -5, 2, -1, -5]))  # Output: -126\n\n\n"}
{"task_id": "HumanEval/141", "solution": "from typing import *\n\nimport re\n\ndef file_name_check(file_name):\n    # Check if there is exactly one dot in the file name\n    if file_name.count('.') != 1:\n        return 'No'\n    \n    # Split the file name at the dot\n    name, extension = file_name.split('.')\n    \n    # Check if the name part is not empty and starts with a letter\n    if not name or not name[0].isalpha():\n        return 'No'\n    \n    # Check if the name contains at most three digits\n    digits = sum(c.isdigit() for c in name)\n    if digits > 3:\n        return 'No'\n    \n    # Check if the extension is valid\n    if extension not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n\n# Test cases\nprint(file_name_check(\"example.txt\"))  # => 'Yes'\nprint(file_name_check(\"1example.dll\")) # => 'No'\n\n\n"}
{"task_id": "HumanEval/139", "solution": "from typing import *\n\ndef special_factorial(n):\n    result = 1\n    current_factorial = 1\n    for i in range(1, n + 1):\n        current_factorial *= i  # Calculate i!\n        result *= current_factorial  # Multiply it with the result\n    return result\n\n# Example usage:\nprint(special_factorial(4))  # Output: 288\n\n\n"}
{"task_id": "HumanEval/138", "solution": "from typing import *\n\ndef is_equal_to_sum_even(n):\n    # Check if the number is less than 8 or odd\n    if n < 8 or n % 2 != 0:\n        return False\n    # Subtract the smallest three even numbers (2, 2, 2) from n\n    n -= 2 * 3\n    # Check if the remaining number is even (it will always be positive)\n    return n % 2 == 0\n\n# Example usage:\nprint(is_equal_to_sum_even(4))  # False\nprint(is_equal_to_sum_even(6))  # False\nprint(is_equal_to_sum_even(8))  # True\n\n\n"}
{"task_id": "HumanEval/136", "solution": "from typing import *\n\ndef largest_smallest_integers(lst):\n    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)\n\n# Examples:\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # Output: (None, 1)\nprint(largest_smallest_integers([]))                  # Output: (None, None)\nprint(largest_smallest_integers([0]))                 # Output: (None, None)\n\n\n"}
{"task_id": "HumanEval/135", "solution": "from typing import *\n\ndef can_arrange(arr):\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n\n# Example usage:\nprint(can_arrange([1, 2, 4, 3, 5]))  # Output: 3\nprint(can_arrange([1, 2, 3]))        # Output: -1\n\n\n"}
{"task_id": "HumanEval/133", "solution": "from typing import *\n\nimport math\n\ndef sum_squares(lst):\n    # Sum the squares of the ceiling of each number in the list\n    return sum(math.ceil(num) ** 2 for num in lst)\n\n# Examples\nprint(sum_squares([1, 2, 3]))  # Output: 14\nprint(sum_squares([1, 4, 9]))  # Output: 98\nprint(sum_squares([1, 3, 5, 7]))  # Output: 84\nprint(sum_squares([1.4, 4.2, 0]))  # Output: 29\nprint(sum_squares([-2.4, 1, 1]))  # Output: 6\n\n\n"}
{"task_id": "HumanEval/128", "solution": "from typing import *\n\ndef prod_signs(arr):\n    if not arr:  # Check if the array is empty\n        return None\n    \n    sign_product = 1\n    magnitude_sum = 0\n    \n    for num in arr:\n        if num > 0:\n            sign_product *= 1\n        elif num < 0:\n            sign_product *= -1\n        else:  # num is 0\n            return 0  # The product of signs will be 0\n        \n        magnitude_sum += abs(num)\n    \n    return sign_product * magnitude_sum\n\n# Test cases\nprint(prod_signs([1, 2, 2, -4]))  # Output: -9\nprint(prod_signs([0, 1]))         # Output: 0\nprint(prod_signs([]))             # Output: None\n\n\n"}
{"task_id": "HumanEval/123", "solution": "from typing import *\n\ndef get_odd_collatz(n):\n    odd_numbers = []\n    while n != 1:\n        if n % 2 == 1:  # Check if n is odd\n            odd_numbers.append(n)\n        n = 3 * n + 1 if n % 2 else n // 2\n    odd_numbers.append(1)  # Include the last term, which is 1\n    return sorted(odd_numbers)\n\n# Example usage:\nprint(get_odd_collatz(5))  # Output: [1, 5]\n\n\n"}
{"task_id": "HumanEval/122", "solution": "from typing import *\n\n  def add_elements(arr, k):\n      sum_of_elements = 0\n      for i in range(k):  # Iterate through the first k elements\n          element = arr[i]\n          if len(str(element)) <= 2:  # Check if the element has at most two digits\n              sum_of_elements += element  # Add to the sum\n      return sum_of_elements\n\n  # Example usage:\n  arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\n  k = 4\n  print(add_elements(arr, k))  # Output: 24\n  \n "}
{"task_id": "HumanEval/121", "solution": "from typing import *\n\n  def solution(lst):\n      sum_of_odds = 0\n      for i in range(len(lst)):\n          if i % 2 == 0 and lst[i] % 2 != 0:\n              sum_of_odds += lst[i]\n      return sum_of_odds\n\n  # Test cases\n  print(solution([5, 8, 7, 1]))  # Output: 12\n  print(solution([3, 3, 3, 3, 3]))  # Output: 9\n  print(solution([30, 13, 24, 321]))  # Output: 0\n  \n "}
{"task_id": "HumanEval/118", "solution": "from typing import *\n\ndef get_closest_vowel(word):\n    vowels = set(\"aeiouAEIOU\")\n    prev_consonant = False\n    \n    # Iterate from the end of the word to the beginning\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] not in vowels:\n            prev_consonant = True\n        elif prev_consonant and i != 0 and word[i - 1] not in vowels:\n            # Found a vowel that is surrounded by consonants\n            return word[i]\n        else:\n            prev_consonant = False\n    \n    # No vowel found that is surrounded by consonants\n    return \"\"\n\n# Example usage:\nprint(get_closest_vowel(\"yogurt\"))  # Output: \"u\"\nprint(get_closest_vowel(\"FULL\"))    # Output: \"U\"\nprint(get_closest_vowel(\"quick\"))   # Output: \"\"\nprint(get_closest_vowel(\"ab\"))      # Output: \"\"\n\n\n"}
{"task_id": "HumanEval/117", "solution": "from typing import *\n\ndef select_words(s, n):\n    def count_consonants(word):\n        vowels = 'aeiouAEIOU'\n        return sum(1 for char in word if char.isalpha() and char not in vowels)\n    \n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n\n# Examples:\nprint(select_words(\"Mary had a little lamb\", 4))  # ==> [\"little\"]\nprint(select_words(\"Mary had a little lamb\", 3))  # ==> [\"Mary\", \"lamb\"]\nprint(select_words(\"simple white space\", 2))      # ==> []\nprint(select_words(\"Hello world\", 4))             # ==> [\"world\"]\nprint(select_words(\"Uncle sam\", 3))               # ==> [\"Uncle\"]\n\n\n"}
{"task_id": "HumanEval/115", "solution": "from typing import *\n\ndef max_fill(grid, capacity):\n    total_units_of_water = sum(sum(row) for row in grid)  # Count total units of water\n    full_buckets, partial_bucket = divmod(total_units_of_water, capacity)\n    return full_buckets + (1 if partial_bucket else 0)  # Add one if there is a partial bucket\n\n# Example usage:\nprint(max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1))  # Output: 6\nprint(max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2))  # Output: 5\nprint(max_fill([[0,0,0], [0,0,0]], 5))  # Output: 0\n\n\n"}
{"task_id": "HumanEval/114", "solution": "from typing import *\n\ndef minSubArraySum(nums):\n    current_sum = min_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum\n\n# Example usage:\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\nprint(minSubArraySum([-1, -2, -3]))        # Output: -6\n\n\n"}
{"task_id": "HumanEval/112", "solution": "from typing import *\n\n  def reverse_delete(s, c):\n      # Step 1: Remove characters from 's' that are in 'c'\n      result_string = ''.join([char for char in s if char not in c])\n      \n      # Step 2: Check if the result string is a palindrome\n      is_palindrome = result_string == result_string[::-1]\n      \n      return (result_string, is_palindrome)\n\n  # Example usage:\n  print(reverse_delete(\"abcde\", \"ae\"))       # Output: ('bcd', False)\n  print(reverse_delete(\"abcdef\", \"b\"))       # Output: ('acdef', False)\n  print(reverse_delete(\"abcdedcba\", \"ab\"))   # Output: ('cdedc', True)\n  \n "}
{"task_id": "HumanEval/111", "solution": "from typing import *\n\ndef histogram(test):\n    # Split the string into letters and initialize an empty dictionary for counts\n    letters = test.split()\n    letter_count = {}\n\n    # Count the occurrences of each letter\n    for letter in letters:\n        letter_count[letter] = letter_count.get(letter, 0) + 1\n\n    # Find the maximum count\n    max_count = max(letter_count.values(), default=0)\n\n    # Return a dictionary with letters that have the maximum count\n    return {letter: count for letter, count in letter_count.items() if count == max_count}\n\n# Example usage:\nprint(histogram('a b c'))  # {'a': 1, 'b': 1, 'c': 1}\nprint(histogram('a b b a'))  # {'a': 2, 'b': 2}\nprint(histogram('a b c a b'))  # {'a': 2, 'b': 2}\nprint(histogram('b b b b a'))  # {'b': 4}\nprint(histogram(''))  # {}\n\n\n"}
{"task_id": "HumanEval/107", "solution": "from typing import *\n\n  def even_odd_palindrome(n):\n      even_count = 0\n      odd_count = 0\n      for i in range(1, n + 1):\n          if str(i) == str(i)[::-1]:  # Check if the number is a palindrome\n              if i % 2 == 0:\n                  even_count += 1\n              else:\n                  odd_count += 1\n      return (even_count, odd_count)\n\n  # Example usage:\n  print(even_odd_palindrome(3))  # Output: (1, 2)\n  print(even_odd_palindrome(12)) # Output: (4, 6)\n  \n "}
{"task_id": "HumanEval/106", "solution": "from typing import *\n\ndef f(n):\n    def factorial(x):\n        result = 1\n        for i in range(1, x + 1):\n            result *= i\n        return result\n    \n    def arithmetic_sum(x):\n        return x * (x + 1) // 2\n    \n    result_list = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result_list.append(factorial(i))\n        else:\n            result_list.append(arithmetic_sum(i))\n    \n    return result_list\n\n# Example usage:\nprint(f(5))  # Output: [1, 2, 6, 24, 15]\n\n\n"}
{"task_id": "HumanEval/105", "solution": "from typing import *\n\ndef by_length(arr):\n    # Define a dictionary to map numbers to words\n    num_to_word = {\n        1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\",\n        5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"\n    }\n    \n    # Filter, sort, and reverse the array\n    filtered_sorted = sorted([num for num in arr if 1 <= num <= 9])\n    reversed_array = filtered_sorted[::-1]\n    \n    # Map the numbers to words\n    return [num_to_word[num] for num in reversed_array]\n\n# Example usage:\narr = [2, 1, 1, 4, 5, 8, 2, 3]\nprint(by_length(arr))  # Output: [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n\n\n"}
{"task_id": "HumanEval/104", "solution": "from typing import *\n\ndef unique_digits(x):\n    def has_no_even_digit(num):\n        return all(int(digit) % 2 != 0 for digit in str(num))\n    \n    # Filter the list using the has_no_even_digit function and sort it\n    return sorted(filter(has_no_even_digit, x))\n\n# Example usage:\nprint(unique_digits([15, 33, 1422, 1]))  # Output: [1, 15, 33]\nprint(unique_digits([152, 323, 1422, 10]))  # Output: []\n\n\n"}
{"task_id": "HumanEval/103", "solution": "from typing import *\n\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    # Calculate the sum of the arithmetic sequence\n    sum_of_sequence = (m - n + 1) * (n + m) // 2\n    # Calculate the average\n    average = sum_of_sequence // (m - n + 1)\n    # Round the average to the nearest integer\n    rounded_average = round(average)\n    # Convert the rounded average to binary\n    binary_representation = bin(rounded_average)\n    return binary_representation\n\n# Example usage:\nprint(rounded_avg(1, 5))  # Output: \"0b11\"\nprint(rounded_avg(7, 5))  # Output: -1\nprint(rounded_avg(10, 20))  # Output: \"0b1111\"\nprint(rounded_avg(20, 33))  # Output: \"0b11010\"\n\n\n"}
{"task_id": "HumanEval/102", "solution": "from typing import *\n\ndef choose_num(x, y):\n    if y < x:  # No number in the range\n        return -1\n    if y % 2 == 0:  # y is even\n        return y\n    elif y - 1 >= x:  # y is odd, but y - 1 is even and within the range\n        return y - 1\n    else:  # No even number in the range\n        return -1\n\n# Example usage:\nprint(choose_num(12, 15))  # Output: 14\nprint(choose_num(13, 12))  # Output: -1\n\n\n"}
{"task_id": "HumanEval/101", "solution": "from typing import *\n\nimport re\n\ndef words_string(s):\n    # Split the string on comma or space using regular expression\n    words = re.split(r'[,\\s]+', s.strip())\n    return words\n\n# Test cases\nprint(words_string(\"Hi, my name is John\"))  # Output: [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nprint(words_string(\"One, two, three, four, five, six\"))  # Output: [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n\n\n"}
{"task_id": "HumanEval/99", "solution": "from typing import *\n\nimport math\n\ndef closest_integer(value):\n    number = float(value)\n    decimal_part = number - math.floor(number)\n    \n    if decimal_part == 0.5 or decimal_part == -0.5:\n        if number > 0:\n            return math.ceil(number)\n        else:\n            return math.floor(number)\n    else:\n        return round(number)\n\n# Examples\nprint(closest_integer(\"10\"))    # Output: 10\nprint(closest_integer(\"15.3\"))  # Output: 15\nprint(closest_integer(\"14.5\"))  # Output: 15\nprint(closest_integer(\"-14.5\")) # Output: -15\n\n\n"}
{"task_id": "HumanEval/97", "solution": "from typing import *\n\ndef multiply(a, b):\n    # Get the unit digit of each number using modulo 10\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Multiply the unit digits and return the result\n    return unit_digit_a * unit_digit_b\n\n# Test cases\nprint(multiply(148, 412))  # should return 16\nprint(multiply(19, 28))    # should return 72\nprint(multiply(2020, 1851))# should return 0\nprint(multiply(14, -15))   # should return 20\n\n\n"}
{"task_id": "HumanEval/96", "solution": "from typing import *\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n\n# Examples\nprint(count_up_to(5))  # => [2, 3]\nprint(count_up_to(11)) # => [2, 3, 5, 7]\nprint(count_up_to(0))  # => []\nprint(count_up_to(20)) # => [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))  # => []\nprint(count_up_to(18)) # => [2, 3, 5, 7, 11, 13, 17]\n\n\n"}
{"task_id": "HumanEval/92", "solution": "from typing import *\n\ndef any_int(x, y, z):\n    # Check if all numbers are integers\n    if not all(isinstance(i, int) for i in [x, y, z]):\n        return False\n    \n    # Check if any number is equal to the sum of the other two\n    return x == y + z or y == x + z or z == x + y\n\n# Examples\nprint(any_int(5, 2, 7))  # \u279e True\nprint(any_int(3, 2, 2))  # \u279e False\nprint(any_int(3, -2, 1))  # \u279e True\nprint(any_int(3.6, -2.2, 2))  # \u279e False\n\n\n"}
{"task_id": "HumanEval/90", "solution": "from typing import *\n\ndef next_smallest(lst):\n    if not lst or len(lst) < 2:\n        return None\n    \n    sorted_lst = sorted(lst)\n    first_smallest = sorted_lst[0]\n    \n    for element in sorted_lst[1:]:\n        if element != first_smallest:\n            return element\n    \n    return None\n\n# Test cases\nprint(next_smallest([1, 2, 3, 4, 5]))  # Output: 2\nprint(next_smallest([5, 1, 4, 3, 2]))  # Output: 2\nprint(next_smallest([]))               # Output: None\nprint(next_smallest([1, 1]))           # Output: None\n\n\n"}
{"task_id": "HumanEval/88", "solution": "from typing import *\n\ndef sort_array(array):\n    # Check if the array is empty or has only one element\n    if len(array) <= 1:\n        return array\n    \n    # Calculate the sum of the first and last elements\n    sum_of_edges = array[0] + array[-1]\n    \n    # Sort the array based on the parity of the sum\n    if sum_of_edges % 2 == 0:\n        # If the sum is even, sort in descending order\n        return sorted(array, reverse=True)\n    else:\n        # If the sum is odd, sort in ascending order\n        return sorted(array)\n\n# Examples\nprint(sort_array([]))  # => []\nprint(sort_array([5]))  # => [5]\nprint(sort_array([2, 4, 3, 0, 1, 5]))  # => [0, 1, 2, 3, 4, 5]\nprint(sort_array([2, 4, 3, 0, 1, 5, 6]))  # => [6, 5, 4, 3, 2, 1, 0]\n\n\n"}
{"task_id": "HumanEval/87", "solution": "from typing import *\n\ndef get_row(lst, x):\n    coordinates = []\n    # Iterate through each row and column to find the value x\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                # Append the coordinates in (row, column) format\n                coordinates.append((row_index, col_index))\n    \n    # Sort the coordinates by row in ascending order and by column in descending order\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n\n# Example usage:\nprint(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1))  # Output: [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n\nprint(get_row([], 1))  # Output: []\n\nprint(get_row([[], [1], [1, 2, 3]], 3))  # Output: [(2, 2)]\n\n\n"}
{"task_id": "HumanEval/85", "solution": "from typing import *\n\ndef add(lst):\n    sum_even_at_odd_indices = 0\n    for index, value in enumerate(lst):\n        if index % 2 != 0 and value % 2 == 0:\n            sum_even_at_odd_indices += value\n    return sum_even_at_odd_indices\n\n# Example usage:\nprint(add([4, 2, 6, 7]))  # Output: 2\n\n\n"}
{"task_id": "HumanEval/82", "solution": "from typing import *\n\nimport math\n\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))\n\n# Examples\nprint(prime_length('Hello'))     # True\nprint(prime_length('abcdcba'))   # True\nprint(prime_length('kittens'))   # True\nprint(prime_length('orange'))    # False\n\n\n"}
{"task_id": "HumanEval/80", "solution": "from typing import *\n\n  def is_happy(s):\n      if len(s) < 3:\n          return False\n      for i in range(len(s) - 2):\n          if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n              return False\n      return True\n\n  # Test cases\n  print(is_happy(\"a\"))      # False\n  print(is_happy(\"aa\"))     # False\n  print(is_happy(\"abcd\"))   # True\n  print(is_happy(\"aabb\"))   # False\n  print(is_happy(\"adb\"))    # True\n  print(is_happy(\"xyy\"))    # False\n  \n "}
{"task_id": "HumanEval/78", "solution": "from typing import *\n\ndef hex_key(num):\n    # Define the set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    \n    # Initialize the counter\n    prime_count = 0\n    \n    # Iterate over each character in the input string\n    for digit in num:\n        # Check if the digit is a prime hexadecimal digit\n        if digit in prime_hex_digits:\n            prime_count += 1\n    \n    # Return the count of prime hexadecimal digits\n    return prime_count\n\n# Test cases\nprint(hex_key(\"AB\"))  # Output: 1\nprint(hex_key(\"1077E\"))  # Output: 2\nprint(hex_key(\"ABED1A33\"))  # Output: 4\nprint(hex_key(\"123456789ABCDEF0\"))  # Output: 6\nprint(hex_key(\"2020\"))  # Output: 2\n\n\n"}
{"task_id": "HumanEval/76", "solution": "from typing import *\n\n  import math\n\n  def is_simple_power(x, n):\n      # Handle the special case where n is 1, which would cause a division by zero in log\n      if n == 1:\n          return x == 1\n      # Calculate the logarithm of x with base n\n      power = math.log(x, n)\n      # Check if the power is an integer\n      return power.is_integer()\n\n  # Examples\n  print(is_simple_power(1, 4))  # True\n  print(is_simple_power(2, 2))  # True\n  print(is_simple_power(8, 2))  # True\n  print(is_simple_power(3, 2))  # False\n  print(is_simple_power(3, 1))  # False\n  print(is_simple_power(5, 3))  # False\n  \n "}
{"task_id": "HumanEval/74", "solution": "from typing import *\n\ndef total_match(lst1, lst2):\n    # Calculate the total number of characters in lst1\n    total_chars_lst1 = sum(len(s) for s in lst1)\n    # Calculate the total number of characters in lst2\n    total_chars_lst2 = sum(len(s) for s in lst2)\n    \n    # Compare the totals and return the appropriate list\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2\n\n# Examples\nprint(total_match([], []))  # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))  # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))  # \u279e ['4']\n\n\n"}
{"task_id": "HumanEval/73", "solution": "from typing import *\n\ndef smallest_change(arr):\n    left, right = 0, len(arr) - 1\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes\n\n# Test cases\nprint(smallest_change([1,2,3,5,4,7,9,6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))  # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))  # Output: 0\n\n\n"}
{"task_id": "HumanEval/72", "solution": "from typing import *\n\ndef will_it_fly(q, w):\n    # Check if the list is palindromic\n    is_balanced = q == q[::-1]\n    # Calculate the sum of the elements\n    total_weight = sum(q)\n    # Check if the sum is less than or equal to the maximum weight and if it's balanced\n    return is_balanced and total_weight <= w\n\n# Example usage:\nprint(will_it_fly([1, 2], 5))       # \u279e False\nprint(will_it_fly([3, 2, 3], 1))    # \u279e False\nprint(will_it_fly([3, 2, 3], 9))    # \u279e True\nprint(will_it_fly([3], 5))          # \u279e True\n\n\n"}
{"task_id": "HumanEval/71", "solution": "from typing import *\n\nimport math\n\ndef triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Round the area to 2 decimal points\n    return round(area, 2)\n\n# Example usage:\nprint(triangle_area(3, 4, 5))  # Output: 6.00\nprint(triangle_area(1, 2, 10)) # Output: -1\n\n\n"}
{"task_id": "HumanEval/70", "solution": "from typing import *\n\ndef strange_sort_list(lst):\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = 0, len(sorted_lst) - 1\n    \n    while left <= right:\n        result.append(sorted_lst[left])\n        left += 1\n        if left <= right:\n            result.append(sorted_lst[right])\n            right -= 1\n    \n    return result\n\n# Test cases\nprint(strange_sort_list([1, 2, 3, 4]))  # Output: [1, 4, 2, 3]\nprint(strange_sort_list([5, 5, 5, 5]))  # Output: [5, 5, 5, 5]\nprint(strange_sort_list([]))            # Output: []\n\n\n"}
{"task_id": "HumanEval/69", "solution": "from typing import *\n\ndef search(lst):\n    # Create a frequency map\n    frequency = {}\n    for num in lst:\n        frequency[num] = frequency.get(num, 0) + 1\n    \n    # Initialize the result as -1 (assuming no such integer is found)\n    result = -1\n    \n    # Iterate through the frequency map\n    for num, freq in frequency.items():\n        # Check if the frequency is greater than or equal to the number itself\n        if freq >= num:\n            # Update the result with the maximum such number\n            result = max(result, num)\n    \n    return result\n\n# Test cases\nprint(search([4, 1, 2, 2, 3, 1]))  # Output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Output: 3\nprint(search([5, 5, 4, 4, 4]))  # Output: -1\n\n\n"}
{"task_id": "HumanEval/68", "solution": "from typing import *\n\ndef pluck(arr):\n    smallest_even = float('inf')\n    smallest_index = None\n    \n    for index, value in enumerate(arr):\n        if value % 2 == 0:\n            if value < smallest_even or (value == smallest_even and index < smallest_index):\n                smallest_even = value\n                smallest_index = index\n    \n    if smallest_index is not None:\n        return [smallest_even, smallest_index]\n    else:\n        return []\n\n# Example usage:\nprint(pluck([4, 2, 3]))  # Output: [2, 1]\nprint(pluck([1, 2, 3]))  # Output: [2, 1]\nprint(pluck([]))         # Output: []\nprint(pluck([5, 0, 3, 0, 4, 2]))  # Output: [0, 1]\n\n\n"}
{"task_id": "HumanEval/67", "solution": "from typing import *\n\ndef fruit_distribution(s, n):\n    # Split the string into parts\n    parts = s.split()\n    \n    # Extract the number of apples and oranges\n    num_apples = int(parts[0])\n    num_oranges = int(parts[3])\n    \n    # Calculate the number of mangoes\n    num_mangoes = n - num_apples - num_oranges\n    \n    # Return the result\n    return num_mangoes\n\n# Test cases\nprint(fruit_distribution(\"5 apples and 6 oranges\", 19))  # Output: 8\nprint(fruit_distribution(\"0 apples and 1 oranges\", 3))   # Output: 2\nprint(fruit_distribution(\"2 apples and 3 oranges\", 100)) # Output: 95\nprint(fruit_distribution(\"100 apples and 1 oranges\", 120)) # Output: 19\n\n\n"}
{"task_id": "HumanEval/66", "solution": "from typing import *\n\n  def digitSum(s):\n      sum_of_ascii = 0\n      for char in s:\n          if char.isupper():\n              sum_of_ascii += ord(char)\n      return sum_of_ascii\n\n  # Test cases\n  print(digitSum(\"\"))         # => 0\n  print(digitSum(\"abAB\"))     # => 131\n  print(digitSum(\"abcCd\"))    # => 67\n  print(digitSum(\"helloE\"))   # => 69\n  print(digitSum(\"woArBld\"))  # => 131\n  print(digitSum(\"aAaaaXa\"))  # => 153\n  \n "}
{"task_id": "HumanEval/64", "solution": "from typing import *\n\n  def vowels_count(s):\n      vowels = \"aeiou\"\n      count = 0\n      for char in s.lower():  # Convert to lowercase to handle uppercase vowels\n          if char in vowels:\n              count += 1\n      if s and s[-1].lower() == 'y':  # Check if last character is 'y'\n          count += 1\n      return count\n\n  # Test cases\n  print(vowels_count(\"abcde\"))  # Output: 2\n  print(vowels_count(\"ACEDY\"))  # Output: 3\n  \n "}
{"task_id": "HumanEval/63", "solution": "from typing import *\n\ndef fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    # Initialize the base cases\n    dp = [0] * (n+1)\n    dp[0], dp[1], dp[2] = 0, 0, 1\n    \n    # Fill the dp array using the recursive formula\n    for i in range(3, n+1):\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3]\n    \n    return dp[n]\n\n# Test cases\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24\n\n\n"}
{"task_id": "HumanEval/62", "solution": "from typing import *\n\ndef derivative(xs: list):\n    # The derivative of the constant term is 0, so we start from the first term (xs[1] * x)\n    return [i * xs[i] for i in range(1, len(xs))]\n\n# Test cases\nprint(derivative([3, 1, 2, 4, 5]))  # Output: [1, 4, 12, 20]\nprint(derivative([1, 2, 3]))        # Output: [2, 6]\n\n\n"}
{"task_id": "HumanEval/61", "solution": "from typing import *\n\n  def correct_bracketing(brackets: str) -> bool:\n      stack = []\n      for bracket in brackets:\n          if bracket == '(':\n              stack.append(bracket)\n          elif bracket == ')':\n              if not stack:\n                  return False\n              stack.pop()\n      return len(stack) == 0\n\n  # Test cases\n  print(correct_bracketing(\"(\"))       # False\n  print(correct_bracketing(\"()\"))      # True\n  print(correct_bracketing(\"(()())\"))  # True\n  print(correct_bracketing(\")(()\"))    # False\n  \n "}
{"task_id": "HumanEval/60", "solution": "from typing import *\n\ndef sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n using the arithmetic progression sum formula.\"\"\"\n    return n * (n + 1) // 2\n\n# Example usage:\nprint(sum_to_n(30))  # Output: 465\nprint(sum_to_n(100)) # Output: 5050\nprint(sum_to_n(5))   # Output: 15\nprint(sum_to_n(10))  # Output: 55\nprint(sum_to_n(1))   # Output: 1\n\n\n"}
{"task_id": "HumanEval/59", "solution": "from typing import *\n\ndef largest_prime_factor(n: int) -> int:\n    # Initialize the largest prime factor\n    largest_factor = None\n    \n    # Divide out the factor of 2 first\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n    \n    # Check for odd factors starting from 3\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        factor += 2\n    \n    # If n is a prime number greater than 2\n    if n > 2:\n        largest_factor = n\n    \n    return largest_factor\n\n# Example usage:\nprint(largest_prime_factor(13195))  # Output: 29\nprint(largest_prime_factor(2048))   # Output: 2\n\n\n"}
{"task_id": "HumanEval/58", "solution": "from typing import *\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\"\"\"\n    # Convert lists to sets and find the intersection\n    common_elements = set(l1).intersection(set(l2))\n    # Convert the set back to a sorted list\n    return sorted(list(common_elements))\n\n# Example usage:\nprint(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))  # Output: [1, 5, 653]\nprint(common([5, 3, 2, 8], [3, 2]))  # Output: [2, 3]\n\n\n"}
{"task_id": "HumanEval/57", "solution": "from typing import *\n\ndef monotonic(l: list) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n    return increasing or decreasing\n\n# Test cases\nprint(monotonic([1, 2, 4, 20]))  # True\nprint(monotonic([1, 20, 4, 10]))  # False\nprint(monotonic([4, 1, 0, -10]))  # True\n\n\n"}
{"task_id": "HumanEval/56", "solution": "from typing import *\n\n  def correct_bracketing(brackets: str) -> bool:\n      stack = []\n      for bracket in brackets:\n          if bracket == '<':\n              stack.append(bracket)\n          elif bracket == '>':\n              if not stack or stack[-1] != '<':\n                  return False\n              stack.pop()\n      return not stack  # True if stack is empty, False otherwise\n\n  # Test cases\n  print(correct_bracketing(\"<\"))       # False\n  print(correct_bracketing(\"<>\"))      # True\n  print(correct_bracketing(\"<<><>>\"))  # True\n  print(correct_bracketing(\"><<>\"))    # False\n  \n "}
{"task_id": "HumanEval/55", "solution": "from typing import *\n\ndef fib(n: int) -> int:\n    if n <= 1:\n        return n\n    prev, curr = 0, 1\n    for _ in range(2, n + 1):\n        prev, curr = curr, prev + curr\n    return curr\n\n# Test cases\nprint(fib(10))  # Output: 55\nprint(fib(1))   # Output: 1\nprint(fib(8))   # Output: 21\n\n\n"}
{"task_id": "HumanEval/54", "solution": "from typing import *\n\ndef same_chars(s0: str, s1: str) -> bool:\n    # Convert the strings to sets to get the unique characters\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n    \n    # Compare the sets to check if they contain the same characters\n    return set_s0 == set_s1\n\n# Test cases\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))  # True\nprint(same_chars('abcd', 'dddddddabc'))               # True\nprint(same_chars('dddddddabc', 'abcd'))               # True\nprint(same_chars('eabcd', 'dddddddabc'))              # False\nprint(same_chars('abcd', 'dddddddabce'))              # False\nprint(same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))   # False\n\n\n"}
{"task_id": "HumanEval/53", "solution": "from typing import *\n\n  def add(x: int, y: int) -> int:\n      return x + y\n\n  # Example usage:\n  if __name__ == \"__main__\":\n      print(add(2, 3))  # Output: 5\n      print(add(5, 7))  # Output: 12\n  \n "}
{"task_id": "HumanEval/52", "solution": "from typing import *\n\n  def below_threshold(l: list, t: int):\n      for num in l:\n          if num >= t:\n              return False\n      return True\n  \n "}
{"task_id": "HumanEval/51", "solution": "from typing import *\n\n  def remove_vowels(text):\n      vowels = set(\"aeiouAEIOU\")\n      result = [char for char in text if char not in vowels]\n      return ''.join(result)\n\n  # Test cases\n  print(remove_vowels(''))  # Output: ''\n  print(remove_vowels(\"abcdef\\nghijklm\"))  # Output: 'bcdf\\nghjklm'\n  print(remove_vowels('abcdef'))  # Output: 'bcdf'\n  print(remove_vowels('aaaaa'))  # Output: ''\n  print(remove_vowels('aaBAA'))  # Output: 'B'\n  print(remove_vowels('zbcd'))  # Output: 'zbcd'\n  \n "}
{"task_id": "HumanEval/50", "solution": "from typing import *\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n# Example usage:\nencoded = encode_shift(\"hello\")\nprint(encoded)  # Output: \"mjqqt\"\ndecoded = decode_shift(encoded)\nprint(decoded)  # Output: \"hello\"\n\n\n"}
{"task_id": "HumanEval/48", "solution": "from typing import *\n\ndef is_palindrome(text: str) -> bool:\n    # Reverse the string using slicing\n    reversed_text = text[::-1]\n    # Check if the reversed string is equal to the original string\n    return text == reversed_text\n\n# Test cases\nprint(is_palindrome(''))        # True\nprint(is_palindrome('aba'))     # True\nprint(is_palindrome('aaaaa'))   # True\nprint(is_palindrome('zbcd'))    # False\n\n\n"}
{"task_id": "HumanEval/47", "solution": "from typing import *\n\ndef median(l: list):\n    l_sorted = sorted(l)\n    n = len(l_sorted)\n    mid = n // 2\n    if n % 2 == 1:\n        # If the list has an odd number of elements, return the middle one.\n        return l_sorted[mid]\n    else:\n        # If the list has an even number of elements, return the average of the two middle ones.\n        return (l_sorted[mid - 1] + l_sorted[mid]) / 2\n\n# Example usage:\nprint(median([3, 1, 2, 4, 5]))  # Output: 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0\n\n\n"}
{"task_id": "HumanEval/46", "solution": "from typing import *\n\ndef fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    dp = [0] * (n+1)\n    dp[0], dp[1], dp[2], dp[3] = 0, 0, 2, 0\n\n    for i in range(4, n+1):\n        dp[i] = dp[i-1] + dp[i-2] + dp[i-3] + dp[i-4]\n\n    return dp[n]\n\n# Example usage:\nprint(fib4(5))  # Output: 4\nprint(fib4(6))  # Output: 8\nprint(fib4(7))  # Output: 14\n\n\n"}
{"task_id": "HumanEval/45", "solution": "from typing import *\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and height, return area for a triangle.\"\"\"\n    return 0.5 * a * h\n\n# Example usage:\nprint(triangle_area(5, 3))  # Output: 7.5\n\n\n"}
{"task_id": "HumanEval/44", "solution": "from typing import *\n\ndef change_base(x: int, base: int) -> str:\n    if x == 0:\n        return \"0\"\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(reversed(digits))\n\n# Test cases\nprint(change_base(8, 3))  # Output: '22'\nprint(change_base(8, 2))  # Output: '1000'\nprint(change_base(7, 2))  # Output: '111'\n\n\n"}
{"task_id": "HumanEval/43", "solution": "from typing import *\n\ndef pairs_sum_to_zero(l):\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n\n# Test cases\nprint(pairs_sum_to_zero([1, 3, 5, 0]))  # False\nprint(pairs_sum_to_zero([1, 3, -2, 1]))  # False\nprint(pairs_sum_to_zero([1, 2, 3, 7]))  # False\nprint(pairs_sum_to_zero([2, 4, -5, 3, 5, 7]))  # True\nprint(pairs_sum_to_zero([1]))  # False\n\n\n"}
{"task_id": "HumanEval/42", "solution": "from typing import *\n\ndef incr_list(l):\n    return [x + 1 for x in l]\n\n# Test cases\nprint(incr_list([1, 2, 3]))  # Output: [2, 3, 4]\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Output: [6, 4, 6, 3, 4, 4, 10, 1, 124]\n\n\n"}
{"task_id": "HumanEval/40", "solution": "from typing import *\n\n  def triples_sum_to_zero(l: list):\n      l.sort()\n      for i in range(len(l) - 2):\n          if i > 0 and l[i] == l[i - 1]:  # Skip duplicate values\n              continue\n          left, right = i + 1, len(l) - 1\n          while left < right:\n              total = l[i] + l[left] + l[right]\n              if total == 0:\n                  return True\n              elif total < 0:\n                  left += 1\n              else:\n                  right -= 1\n      return False\n\n  # Test cases\n  print(triples_sum_to_zero([1, 3, 5, 0]))  # False\n  print(triples_sum_to_zero([1, 3, -2, 1]))  # True\n  print(triples_sum_to_zero([1, 2, 3, 7]))  # False\n  print(triples_sum_to_zero([2, 4, -5, 3, 9, 7]))  # True\n  print(triples_sum_to_zero([1]))  # False\n  \n "}
{"task_id": "HumanEval/38", "solution": "from typing import *\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n# Example usage:\nencoded_string = encode_cyclic(\"hello world\")\ndecoded_string = decode_cyclic(encoded_string)\nprint(decoded_string)  # Output should be \"hello world\"\n\n\n"}
{"task_id": "HumanEval/35", "solution": "from typing import *\n\n  def max_element(l):\n      max_val = l[0]  # Assume the first element is the maximum initially\n      for num in l:\n          if num > max_val:\n              max_val = num  # Update max_val if a larger number is found\n      return max_val\n\n  # Example usage:\n  print(max_element([1, 2, 3]))  # Output: 3\n  print(max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: 123\n  \n "}
{"task_id": "HumanEval/34", "solution": "from typing import *\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    # Convert the list to a set to remove duplicates and then sort the result\n    return sorted(set(l))\n\n# Example usage:\nprint(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Output: [0, 2, 3, 5, 9, 123]\n\n\n"}
{"task_id": "HumanEval/33", "solution": "from typing import *\n\ndef sort_third(l):\n    # Extract elements at indices divisible by three\n    elements_to_sort = [l[i] for i in range(len(l)) if i % 3 == 0]\n    # Sort these elements\n    sorted_elements = sorted(elements_to_sort)\n    # Reinsert the sorted elements back into the list\n    for i, value in enumerate(sorted_elements):\n        l[i * 3] = value\n    return l\n\n# Test cases\nprint(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 8, 9, 5]\n\n\n"}
{"task_id": "HumanEval/31", "solution": "from typing import *\n\n  def is_prime(n):\n      if n <= 1:\n          return False\n      if n <= 3:\n          return True\n      if n % 2 == 0 or n % 3 == 0:\n          return False\n      i = 5\n      while i * i <= n:\n          if n % i == 0 or n % (i + 2) == 0:\n              return False\n          i += 6\n      return True\n\n  # Test cases\n  print(is_prime(6))     # False\n  print(is_prime(101))   # True\n  print(is_prime(11))    # True\n  print(is_prime(13441)) # True\n  print(is_prime(61))    # True\n  print(is_prime(4))     # False\n  print(is_prime(1))     # False\n  \n "}
{"task_id": "HumanEval/30", "solution": "from typing import *\n\n  def get_positive(l: list):\n      return [num for num in l if num > 0]\n\n  # Test cases\n  print(get_positive([-1, 2, -4, 5, 6]))  # Output: [2, 5, 6]\n  print(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: [5, 3, 2, 3, 9, 123, 1]\n  \n "}
{"task_id": "HumanEval/29", "solution": "from typing import *\n\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    # Initialize an empty list to store strings that match the prefix\n    filtered_strings = []\n    \n    # Iterate over each string in the input list\n    for s in strings:\n        # Check if the string starts with the given prefix\n        if s.startswith(prefix):\n            # If it does, append it to the filtered list\n            filtered_strings.append(s)\n    \n    # Return the list of filtered strings\n    return filtered_strings\n\n# Example usage:\n# filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n# Output: ['abc', 'array']\n\n\n"}
{"task_id": "HumanEval/28", "solution": "from typing import *\n\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string \"\"\"\n    return \"\".join(strings)\n\n# Example usage:\n# concatenate(['a', 'b', 'c']) returns 'abc'\n\n\n"}
{"task_id": "HumanEval/27", "solution": "from typing import *\n\ndef flip_case(string: str) -> str:\n    # Use the built-in swapcase() method to flip the case of each character\n    return string.swapcase()\n\n# Example usage:\nprint(flip_case('Hello'))  # Output: 'hELLO'\n\n\n"}
{"task_id": "HumanEval/25", "solution": "from typing import *\n\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    # Check for divisibility by 2 first\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    # Check for odd factors from 3 to sqrt(n)\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            factors.append(factor)\n            n //= factor\n        factor += 2\n    # If n is a prime number greater than 2\n    if n > 1:\n        factors.append(n)\n    return factors\n\n# Example usage:\nprint(factorize(8))   # Output: [2, 2, 2]\nprint(factorize(25))  # Output: [5, 5]\nprint(factorize(70))  # Output: [2, 5, 7]\n\n\n"}
{"task_id": "HumanEval/24", "solution": "from typing import *\n\ndef largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1  # This line is technically not needed as n will always have a divisor other than 1 and itself.\n\n# Example usage:\nprint(largest_divisor(15))  # Output: 5\n\n\n"}
{"task_id": "HumanEval/23", "solution": "from typing import *\n\n  def strlen(string: str) -> int:\n      \"\"\" Return length of given string \"\"\"\n      count = 0\n      for char in string:\n          count += 1\n      return count\n\n  # Test cases\n  print(strlen(''))      # Output: 0\n  print(strlen('abc'))   # Output: 3\n  \n "}
{"task_id": "HumanEval/22", "solution": "from typing import *\n\nfrom typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers \"\"\"\n    return [x for x in values if isinstance(x, int)]\n\n# Example usage:\nif __name__ == \"__main__\":\n    print(filter_integers(['a', 3.14, 5]))  # Output: [5]\n    print(filter_integers([1, 2, 3, 'abc', {}, []]))  # Output: [1, 2, 3]\n\n\n"}
{"task_id": "HumanEval/21", "solution": "from typing import *\n\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    normalized = [(x - min_val) / range_val for x in numbers]\n    return normalized\n\n# Example usage:\nprint(rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0]))\n\n\n"}
{"task_id": "HumanEval/20", "solution": "from typing import *\n\nfrom typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Initialize variables to store the closest pair and the smallest difference\n    closest_pair = (numbers[0], numbers[1])\n    smallest_diff = abs(numbers[1] - numbers[0])\n    \n    # Iterate through the sorted list to find the closest pair\n    for i in range(1, len(numbers) - 1):\n        diff = abs(numbers[i + 1] - numbers[i])\n        if diff < smallest_diff:\n            smallest_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    # Return the closest pair\n    return closest_pair\n\n# Example usage:\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # Output: (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # Output: (2.0, 2.0)\n\n\n"}
{"task_id": "HumanEval/19", "solution": "from typing import *\n\ndef sort_numbers(numbers: str) -> str:\n    # Mapping of number words to their numeric values\n    number_map = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n    \n    # Split the input string into a list of number words\n    words = numbers.split()\n    \n    # Sort the list of number words using the numeric values as keys\n    sorted_words = sorted(words, key=lambda word: number_map[word])\n    \n    # Join the sorted list of number words back into a single string\n    return ' '.join(sorted_words)\n\n# Example usage:\nprint(sort_numbers('three one five'))  # Output: 'one three five'\n\n\n"}
{"task_id": "HumanEval/18", "solution": "from typing import *\n\n  def how_many_times(string: str, substring: str) -> int:\n      count = 0\n      sub_len = len(substring)\n      for i in range(len(string) - sub_len + 1):\n          if string[i:i+sub_len] == substring:\n              count += 1\n      return count\n\n  # Example usage:\n  print(how_many_times('', 'a'))  # Output: 0\n  print(how_many_times('aaa', 'a'))  # Output: 3\n  print(how_many_times('aaaa', 'aa'))  # Output: 3\n  \n "}
{"task_id": "HumanEval/17", "solution": "from typing import *\n\ndef parse_music(music_string: str) -> List[int]:\n    beats = []\n    i = 0\n    while i < len(music_string):\n        if music_string[i] == 'o':\n            if i + 1 < len(music_string) and music_string[i + 1] == '|':\n                beats.append(2)  # Half note\n                i += 2  # Skip the next character as it is part of the pattern\n            else:\n                beats.append(4)  # Whole note\n                i += 1\n        elif music_string[i] == '.':\n            if i + 1 < len(music_string) and music_string[i + 1] == '|':\n                beats.append(1)  # Quarter note\n                i += 2  # Skip the next character as it is part of the pattern\n            else:\n                # Handle error or unexpected pattern\n                raise ValueError(\"Invalid note pattern\")\n        else:\n            # Handle spaces or unexpected characters\n            i += 1\n    return beats\n\n# Example usage:\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))\n\n\n"}
{"task_id": "HumanEval/16", "solution": "from typing import *\n\ndef count_distinct_characters(string: str) -> int:\n    # Convert the string to lowercase to make it case-insensitive\n    # and then to a set to remove duplicates\n    distinct_chars = set(string.lower())\n    # Return the number of distinct characters\n    return len(distinct_chars)\n\n# Test cases\nprint(count_distinct_characters('xyzXYZ'))  # Output: 3\nprint(count_distinct_characters('Jerry'))   # Output: 4\n\n\n"}
{"task_id": "HumanEval/15", "solution": "from typing import *\n\ndef string_sequence(n: int) -> str:\n    # Use a list comprehension to create a list of strings from 0 to n\n    # and then join them with spaces to form the final string\n    return ' '.join(str(i) for i in range(n + 1))\n\n# Example usage:\nprint(string_sequence(0))  # Output: '0'\nprint(string_sequence(5))  # Output: '0 1 2 3 4 5'\n\n\n"}
{"task_id": "HumanEval/14", "solution": "from typing import *\n\n  def all_prefixes(string: str) -> List[str]:\n      \"\"\" Return list of all prefixes from shortest to longest of the input string \"\"\"\n      return [string[:i] for i in range(1, len(string) + 1)]\n  \n "}
{"task_id": "HumanEval/13", "solution": "from typing import *\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\n# Test cases\nprint(greatest_common_divisor(3, 5))  # Expected output: 1\nprint(greatest_common_divisor(25, 15))  # Expected output: 5\n\n\n"}
{"task_id": "HumanEval/12", "solution": "from typing import *\n\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:  # Check if the list is empty\n        return None\n    \n    longest_str = strings[0]  # Initialize with the first string\n    max_length = len(longest_str)\n    \n    for string in strings:\n        if len(string) > max_length:\n            longest_str = string\n            max_length = len(string)\n    \n    return longest_str\n\n# Example usage:\nprint(longest([]))  # Output: None\nprint(longest(['a', 'b', 'c']))  # Output: 'a'\nprint(longest(['a', 'bb', 'ccc']))  # Output: 'ccc'\n\n\n"}
{"task_id": "HumanEval/11", "solution": "from typing import *\n\ndef string_xor(a: str, b: str) -> str:\n    # Pad the shorter string with leading zeros if necessary\n    max_len = max(len(a), len(b))\n    a = a.zfill(max_len)\n    b = b.zfill(max_len)\n    \n    # Perform XOR on each bit and build the result string\n    result = ''.join(str(int(char_a) ^ int(char_b)) for char_a, char_b in zip(a, b))\n    \n    return result\n\n# Example usage:\nprint(string_xor('010', '110'))  # Output: '100'\n\n\n"}
{"task_id": "HumanEval/10", "solution": "from typing import *\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string. \"\"\"\n    if string == \"\":\n        return string\n    \n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string\n\n# Example usage:\nprint(make_palindrome(''))       # Output: ''\nprint(make_palindrome('cat'))    # Output: 'catac'\nprint(make_palindrome('cata'))   # Output: 'catac'\n\n\n"}
{"task_id": "HumanEval/9", "solution": "from typing import *\n\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n    current_max = numbers[0]\n    for number in numbers:\n        current_max = max(current_max, number)\n        result.append(current_max)\n    \n    return result\n\n# Example usage:\nprint(rolling_max([1, 2, 3, 2, 3, 4, 2]))  # Output: [1, 2, 3, 3, 3, 4, 4]\n\n\n"}
{"task_id": "HumanEval/8", "solution": "from typing import *\n\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n    return total_sum, total_product\n\n# Example usage:\nprint(sum_product([]))          # Output: (0, 1)\nprint(sum_product([1, 2, 3, 4]))  # Output: (10, 24)\n\n\n"}
{"task_id": "HumanEval/7", "solution": "from typing import *\n\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    # Initialize an empty list to store strings that contain the substring\n    filtered_strings = []\n    \n    # Iterate through each string in the input list\n    for string in strings:\n        # Check if the substring is present in the string\n        if substring in string:\n            # If present, append the string to the filtered list\n            filtered_strings.append(string)\n    \n    # Return the list of filtered strings\n    return filtered_strings\n\n# Example usage:\n# filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n# Output: ['abc', 'bacd', 'array']\n\n\n"}
{"task_id": "HumanEval/6", "solution": "from typing import *\n\n  from typing import List\n\n  def parse_nested_parens(paren_string: str) -> List[int]:\n      max_depths = []\n      current_depth = 0\n      max_depth = 0\n      \n      for group in paren_string.split():\n          for char in group:\n              if char == '(':\n                  current_depth += 1\n                  max_depth = max(max_depth, current_depth)\n              elif char == ')':\n                  current_depth -= 1\n          max_depths.append(max_depth)\n          current_depth = 0\n          max_depth = 0\n      \n      return max_depths\n\n  # Example usage:\n  print(parse_nested_parens('(()()) ((())) () ((())()())'))  # Output: [2, 3, 1, 3]\n  \n "}
{"task_id": "HumanEval/5", "solution": "from typing import *\n\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    if not numbers:  # Check if the list is empty\n        return []\n\n    # Initialize the result list with the first element\n    result = [numbers[0]]\n\n    # Iterate over the input list starting from the second element\n    for number in numbers[1:]:\n        result.append(delimiter)  # Append the delimiter\n        result.append(number)     # Append the current number\n\n    return result\n\n# Example usage:\nprint(intersperse([], 4))          # Output: []\nprint(intersperse([1, 2, 3], 4))   # Output: [1, 4, 2, 4, 3]\n\n\n"}
{"task_id": "HumanEval/4", "solution": "from typing import *\n\nfrom typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    # Calculate the mean of the numbers\n    mean = sum(numbers) / len(numbers)\n    \n    # Calculate the absolute differences from the mean\n    absolute_differences = [abs(x - mean) for x in numbers]\n    \n    # Calculate the mean of the absolute differences (MAD)\n    mad = sum(absolute_differences) / len(numbers)\n    \n    return mad\n\n# Example usage:\nprint(mean_absolute_deviation([1.0, 2.0, 3.0, 4.0]))  # Output: 1.0\n\n\n"}
{"task_id": "HumanEval/3", "solution": "from typing import *\n\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False\n\n# Example usage:\nprint(below_zero([1, 2, 3]))  # Output: False\nprint(below_zero([1, 2, -4, 5]))  # Output: True\n\n\n"}
{"task_id": "HumanEval/2", "solution": "from typing import *\n\ndef truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part\n\n# Example usage:\nprint(truncate_number(3.5))  # Output: 0.5\n\n\n"}
{"task_id": "HumanEval/0", "solution": "from typing import *\n\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    # Sort the list of numbers\n    numbers.sort()\n    \n    # Iterate through the sorted list and check the difference between adjacent numbers\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i] - numbers[i + 1]) < threshold:\n            return True\n    \n    # If no elements are closer than the threshold, return False\n    return False\n\n# Example usage:\nprint(has_close_elements([1.0, 2.0, 3.0], 0.5))  # Output: False\nprint(has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3))  # Output: True\n\n\n"}
