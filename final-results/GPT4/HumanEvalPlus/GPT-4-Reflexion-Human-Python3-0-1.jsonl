{"task_id": "HumanEval/0", "completion": "    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "completion": "    result = []\n    stack = []\n    current_group = \"\"\n\n    for char in paren_string:\n        if char == \" \":\n            continue\n\n        if char == \"(\":\n            stack.append(char)\n        elif char == \")\":\n            stack.pop()\n\n        current_group += char\n\n        if not stack:\n            result.append(current_group)\n            current_group = \"\"\n\n    return result"}
{"task_id": "HumanEval/2", "completion": "    return number - int(number)"}
{"task_id": "HumanEval/3", "completion": "    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "completion": "    n = len(numbers)\n    mean = sum(numbers) / n\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    mad = sum(absolute_deviations) / n\n    return mad"}
{"task_id": "HumanEval/5", "completion": "    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result"}
{"task_id": "HumanEval/6", "completion": "    result = []\n    for group in paren_string.split():\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        result.append(max_level)\n    return result"}
{"task_id": "HumanEval/7", "completion": "    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "completion": "    total_sum = 0\n    total_product = 1\n\n    for number in numbers:\n        total_sum += number\n        total_product *= number\n\n    return (total_sum, total_product)"}
{"task_id": "HumanEval/9", "completion": "    result = []\n    current_max = float('-inf')\n\n    for num in numbers:\n        current_max = max(current_max, num)\n        result.append(current_max)\n\n    return result"}
{"task_id": "HumanEval/10", "completion": "    if is_palindrome(string):\n        return string\n\n    for i in range(len(string) - 1, 0, -1):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n\n    return string + string[:-1][::-1]"}
{"task_id": "HumanEval/11", "completion": "    result = \"\"\n\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += \"0\"\n        else:\n            result += \"1\"\n\n    return result"}
{"task_id": "HumanEval/12", "completion": "    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string"}
{"task_id": "HumanEval/13", "completion": "    while b:\n        a, b = b, a % b\n    return a"}
{"task_id": "HumanEval/14", "completion": "    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "completion": "    return \" \".join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "completion": "    lower_string = string.lower()\n    distinct_chars = set(lower_string)\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "completion": "    beats = []\n    notes = music_string.split()\n\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n\n    return beats"}
{"task_id": "HumanEval/18", "completion": "    count = 0\n    index = 0\n\n    while index < len(string):\n        found = string.find(substring, index)\n        if found != -1:\n            count += 1\n            index = found + 1\n        else:\n            break\n\n    return count"}
{"task_id": "HumanEval/19", "completion": "    number_words = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    number_list = numbers.split()\n    sorted_numbers = sorted(number_list, key=lambda x: number_words[x])\n    return ' '.join(sorted_numbers)"}
{"task_id": "HumanEval/20", "completion": "    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    numbers.sort()\n    min_diff = float(\"inf\")\n    closest_pair = (0, 0)\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "completion": "    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n\n    return [(num - min_num) / range_num for num in numbers]"}
{"task_id": "HumanEval/22", "completion": "    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "completion": "    return len(string)"}
{"task_id": "HumanEval/24", "completion": "    if n <= 1:\n        return None\n\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i"}
{"task_id": "HumanEval/25", "completion": "    factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors"}
{"task_id": "HumanEval/26", "completion": "    unique_numbers = []\n    duplicates = set()\n\n    for number in numbers:\n        if number not in unique_numbers and number not in duplicates:\n            unique_numbers.append(number)\n        else:\n            duplicates.add(number)\n            if number in unique_numbers:\n                unique_numbers.remove(number)\n\n    return unique_numbers"}
{"task_id": "HumanEval/27", "completion": "    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char.lower()\n    return result"}
{"task_id": "HumanEval/28", "completion": "    result = \"\"\n    for string in strings:\n        result += string\n    return result"}
{"task_id": "HumanEval/29", "completion": "    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "completion": "    positive_numbers = [num for num in l if num > 0]\n    return positive_numbers"}
{"task_id": "HumanEval/31", "completion": "    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"}
{"task_id": "HumanEval/32", "completion": ""}
{"task_id": "HumanEval/33", "completion": "    sorted_thirds = sorted(l[::3])\n    result = []\n    index = 0\n\n    for i, value in enumerate(l):\n        if i % 3 == 0:\n            result.append(sorted_thirds[index])\n            index += 1\n        else:\n            result.append(value)\n\n    return result"}
{"task_id": "HumanEval/34", "completion": "    unique_elements = set(l)\n    sorted_unique_elements = sorted(unique_elements)\n    return sorted_unique_elements"}
{"task_id": "HumanEval/35", "completion": "    if not l:\n        return None\n\n    max_value = l[0]\n    for element in l:\n        if element > max_value:\n            max_value = element\n\n    return max_value"}
{"task_id": "HumanEval/36", "completion": "    count = 0\n    for i in range(1, n):\n        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "completion": "    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n\n    result = []\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices.pop(0))\n        else:\n            result.append(l[i])\n\n    return result"}
{"task_id": "HumanEval/38", "completion": ""}
{"task_id": "HumanEval/39", "completion": "    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib(num: int) -> int:\n        a, b = 0, 1\n        for _ in range(num):\n            a, b = b, a + b\n        return a\n\n    count = 0\n    i = 0\n    while count < n:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            count += 1\n        i += 1\n\n    return fib_num"}
{"task_id": "HumanEval/40", "completion": "    if len(l) < 3:\n        return False\n\n    l.sort()\n    for i in range(len(l) - 2):\n        left = i + 1\n        right = len(l) - 1\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return False"}
{"task_id": "HumanEval/41", "completion": "    # Since there are n cars moving left to right and n cars moving right to left,\n    # each car moving left to right will collide with all n cars moving right to left.\n    # Therefore, there will be n * n collisions in total.\n    return n * n"}
{"task_id": "HumanEval/42", "completion": "    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "completion": "    if len(l) < 2:\n        return False\n\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            if l[i] + l[j] == 0:\n                return True\n\n    return False"}
{"task_id": "HumanEval/44", "completion": "    if base < 2 or base > 16:\n        raise ValueError(\"Base must be between 2 and 16\")\n\n    if x == 0:\n        return \"0\"\n\n    digits = \"0123456789ABCDEF\"\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = digits[remainder] + result\n        x //= base\n\n    return result"}
{"task_id": "HumanEval/45", "completion": "    return 0.5 * a * h"}
{"task_id": "HumanEval/46", "completion": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n    for _ in range(n - 3):\n        a, b, c, d = b, c, d, a + b + c + d\n\n    return d"}
{"task_id": "HumanEval/47", "completion": "    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]"}
{"task_id": "HumanEval/48", "completion": "    text = text.lower()\n    left, right = 0, len(text) - 1\n\n    while left < right:\n        if text[left] != text[right]:\n            return False\n        left += 1\n        right -= 1\n\n    return True"}
{"task_id": "HumanEval/49", "completion": "    return pow(2, n, p)"}
{"task_id": "HumanEval/50", "completion": "    result = []\n    for ch in s:\n        if ch.islower():\n            result.append(chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")))\n        elif ch.isupper():\n            result.append(chr(((ord(ch) - 5 - ord(\"A\")) % 26) + ord(\"A\")))\n        else:\n            result.append(ch)\n    return \"\".join(result)"}
{"task_id": "HumanEval/51", "completion": "    vowels = \"aeiouAEIOU\"\n    result = \"\"\n\n    for char in text:\n        if char not in vowels:\n            result += char\n\n    return result"}
{"task_id": "HumanEval/52", "completion": "    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "completion": "    return x + y"}
{"task_id": "HumanEval/54", "completion": "    s0_set = set(s0)\n    s1_set = set(s1)\n\n    return s0_set == s1_set"}
{"task_id": "HumanEval/55", "completion": "    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        a, b = 1, 1\n        for _ in range(3, n + 1):\n            a, b = b, a + b\n        return b"}
{"task_id": "HumanEval/56", "completion": "    stack = []\n\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack or stack.pop() != \"<\":\n                return False\n\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "completion": "    if len(l) < 2:\n        return True\n\n    direction = l[1] - l[0]\n    for i in range(2, len(l)):\n        if direction == 0:\n            direction = l[i] - l[i - 1]\n            continue\n        if (l[i] - l[i - 1]) * direction < 0:\n            return False\n\n    return True"}
{"task_id": "HumanEval/58", "completion": "    common_elements = set(l1) & set(l2)\n    return sorted(list(common_elements))"}
{"task_id": "HumanEval/59", "completion": "    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def prime_factors(num: int):\n        factors = []\n        for i in range(2, num + 1):\n            if num % i == 0 and is_prime(i):\n                factors.append(i)\n        return factors\n\n    return max(prime_factors(n))"}
{"task_id": "HumanEval/60", "completion": "    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "completion": "    stack = []\n\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack or stack.pop() != \"(\":\n                return False\n\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "completion": "    result = []\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n    return result"}
{"task_id": "HumanEval/63", "completion": "    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        memo = [0] * (n + 1)\n        memo[2] = 1\n        for i in range(3, n + 1):\n            memo[i] = memo[i - 1] + memo[i - 2] + memo[i - 3]\n        return memo[n]"}
{"task_id": "HumanEval/64", "completion": "    count = 0\n    vowels = \"aeiouAEIOU\"\n    s = s.lower()\n\n    for char in s:\n        if char in vowels:\n            count += 1\n\n    if s[-1] == 'y':\n        count += 1\n\n    return count"}
{"task_id": "HumanEval/65", "completion": "    x_str = str(x)\n    num_digits = len(x_str)\n\n    if shift > num_digits:\n        return x_str[::-1]\n\n    shift %= num_digits\n    return x_str[-shift:] + x_str[:-shift]"}
{"task_id": "HumanEval/66", "completion": "    upper_sum = 0\n    for char in s:\n        if char.isupper():\n            upper_sum += ord(char)\n    return upper_sum"}
{"task_id": "HumanEval/67", "completion": "    words = s.split()\n    apples = int(words[0])\n    oranges = int(words[3])\n    mangoes = n - apples - oranges\n    return mangoes"}
{"task_id": "HumanEval/68", "completion": "    if not arr:\n        return []\n\n    smallest_even = float('inf')\n    smallest_index = -1\n\n    for index, value in enumerate(arr):\n        if value % 2 == 0 and value < smallest_even:\n            smallest_even = value\n            smallest_index = index\n\n    if smallest_index == -1:\n        return []\n    else:\n        return [smallest_even, smallest_index]"}
{"task_id": "HumanEval/69", "completion": "    from collections import Counter\n\n    counter = Counter(lst)\n    result = -1\n\n    for num, freq in counter.items():\n        if num <= freq:\n            result = max(result, num)\n\n    return result"}
{"task_id": "HumanEval/70", "completion": "    result = []\n    while lst:\n        min_val = min(lst)\n        lst.remove(min_val)\n        result.append(min_val)\n        if lst:\n            max_val = max(lst)\n            lst.remove(max_val)\n            result.append(max_val)\n    return result"}
{"task_id": "HumanEval/71", "completion": "    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "completion": "    def is_palindrome(lst):\n        return lst == lst[::-1]\n\n    if is_palindrome(q) and sum(q) <= w:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/73", "completion": "    n = len(arr)\n    changes = 0\n\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n\n    return changes"}
{"task_id": "HumanEval/74", "completion": "    def total_chars(lst):\n        return sum(len(s) for s in lst)\n\n    if total_chars(lst1) <= total_chars(lst2):\n        return lst1\n    else:\n        return lst2"}
{"task_id": "HumanEval/75", "completion": ""}
{"task_id": "HumanEval/76", "completion": "    if n == 1:\n        return x == 1\n    power = 0\n    while n ** power <= x:\n        if n ** power == x:\n            return True\n        power += 1\n    return False"}
{"task_id": "HumanEval/77", "completion": "    cube_root = int(round(abs(a) ** (1/3)))\n    return cube_root ** 3 == abs(a) and (a >= 0 or cube_root % 2 != 0)"}
{"task_id": "HumanEval/78", "completion": "    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n\n    for digit in num:\n        if digit in prime_hex_digits:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/79", "completion": "    binary = bin(decimal)[2:]\n    return f\"db{binary}db\""}
{"task_id": "HumanEval/80", "completion": "    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/81", "completion": "    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grades.append(\"A\")\n        elif gpa > 3.3:\n            letter_grades.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grades.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grades.append(\"B\")\n        elif gpa > 2.3:\n            letter_grades.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grades.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grades.append(\"C\")\n        elif gpa > 1.3:\n            letter_grades.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grades.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grades.append(\"D\")\n        elif gpa > 0.0:\n            letter_grades.append(\"D-\")\n        else:\n            letter_grades.append(\"E\")\n    return letter_grades"}
{"task_id": "HumanEval/82", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "completion": "    if n == 1:\n        return 1\n\n    # There are 9 possible digits for each position except the first and last\n    # (0 cannot be the first digit)\n    count = 2 * (10 ** (n - 1) - 10 ** (n - 2))\n\n    return count"}
{"task_id": "HumanEval/84", "completion": ""}
{"task_id": "HumanEval/85", "completion": "    result = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/86", "completion": "    words = s.split(' ')\n    ordered_words = []\n\n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/87", "completion": "    result = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                result.append((row_index, col_index))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/88", "completion": "    if not array:\n        return []\n\n    sorted_array = array.copy()\n    first_last_sum = array[0] + array[-1]\n\n    if first_last_sum % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n\n    return sorted_array"}
{"task_id": "HumanEval/89", "completion": "    encrypted = \"\"\n    for char in s:\n        if char.isalpha():\n            shift = 2 * 2\n            if char.islower():\n                encrypted += chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n            else:\n                encrypted += chr(((ord(char) - ord('A') + shift) % 26) + ord('A'))\n        else:\n            encrypted += char\n    return encrypted"}
{"task_id": "HumanEval/90", "completion": "    if len(lst) < 2:\n        return None\n\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n\n    unique_lst.sort()\n    return unique_lst[1]"}
{"task_id": "HumanEval/91", "completion": "    import re\n\n    count = 0\n    sentences = re.split('[.!?]', S)\n\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if len(words) > 0 and words[0] == \"I\":\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/92", "completion": "    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        return (x + y == z) or (x + z == y) or (y + z == x)\n    else:\n        return False"}
{"task_id": "HumanEval/93", "completion": "    def swap_case(char):\n        if char.isupper():\n            return char.lower()\n        else:\n            return char.upper()\n\n    def replace_vowel(char):\n        vowels = 'aeiouAEIOU'\n        if char in vowels:\n            if char.isupper():\n                return chr(ord(char) + 2) if char != 'Y' else 'A'\n            else:\n                return chr(ord(char) + 2) if char != 'y' else 'a'\n        else:\n            return char\n\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            swapped_case_char = swap_case(char)\n            replaced_vowel_char = replace_vowel(swapped_case_char)\n            encoded_message += replaced_vowel_char\n        else:\n            encoded_message += char\n\n    return encoded_message"}
{"task_id": "HumanEval/94", "completion": "    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    largest_prime = 0\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n\n    return sum_digits(largest_prime)"}
{"task_id": "HumanEval/95", "completion": "    if not dict:\n        return False\n\n    lower_case = 0\n    upper_case = 0\n\n    for key in dict.keys():\n        if not isinstance(key, str):\n            return False\n        if key.islower():\n            lower_case += 1\n        elif key.isupper():\n            upper_case += 1\n        else:\n            return False\n\n    return (lower_case == len(dict)) or (upper_case == len(dict))"}
{"task_id": "HumanEval/96", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    for i in range(n):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "completion": "    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    return unit_digit_a * unit_digit_b"}
{"task_id": "HumanEval/98", "completion": "    count = 0\n    vowels = \"AEIOU\"\n\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n\n    return count"}
{"task_id": "HumanEval/99", "completion": "    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    else:\n        return int(num - 0.5)"}
{"task_id": "HumanEval/100", "completion": "    stones = []\n    for i in range(n):\n        stones.append(n + 2 * i)\n    return stones"}
{"task_id": "HumanEval/101", "completion": "    words = s.replace(\",\", \" \").split()\n    return words"}
{"task_id": "HumanEval/102", "completion": "    if x > y:\n        return -1\n\n    if y % 2 == 0:\n        return y\n    elif y - 1 >= x:\n        return y - 1\n    else:\n        return -1"}
{"task_id": "HumanEval/103", "completion": "    if n > m:\n        return -1\n\n    total = 0\n    count = 0\n    for i in range(n, m + 1):\n        total += i\n        count += 1\n\n    average = round(total / count)\n    return bin(average)"}
{"task_id": "HumanEval/104", "completion": "    result = []\n\n    for num in x:\n        has_even_digit = False\n        for digit in str(num):\n            if int(digit) % 2 == 0:\n                has_even_digit = True\n                break\n        if not has_even_digit:\n            result.append(num)\n\n    return sorted(result)"}
{"task_id": "HumanEval/105", "completion": "    num_to_word = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    valid_nums = [num for num in arr if 1 <= num <= 9]\n    valid_nums.sort(reverse=True)\n\n    return [num_to_word[num] for num in valid_nums]"}
{"task_id": "HumanEval/106", "completion": "    def factorial(i):\n        if i == 0 or i == 1:\n            return 1\n        else:\n            return i * factorial(i - 1)\n\n    def sum_of_numbers(i):\n        return sum(range(1, i + 1))\n\n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n\n    return result"}
{"task_id": "HumanEval/107", "completion": "    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/108", "completion": ""}
{"task_id": "HumanEval/109", "completion": "    if not arr:\n        return True\n\n    count = 0\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            count += 1\n            if count > 1:\n                return False\n\n    return True if count <= 1 else False"}
{"task_id": "HumanEval/110", "completion": "    odd_lst1 = [num for num in lst1 if num % 2 != 0]\n    even_lst2 = [num for num in lst2 if num % 2 == 0]\n\n    if len(odd_lst1) <= len(even_lst2):\n        return \"YES\"\n    else:\n        return \"NO\""}
{"task_id": "HumanEval/111", "completion": "    # Initialize an empty dictionary to store the counts\n    count_dict = {}\n\n    # Split the input string into a list of letters\n    letters = test.split()\n\n    # Iterate through the list of letters\n    for letter in letters:\n        # If the letter is already in the dictionary, increment its count\n        if letter in count_dict:\n            count_dict[letter] += 1\n        # If the letter is not in the dictionary, add it with a count of 1\n        else:\n            count_dict[letter] = 1\n\n    # Find the maximum count value\n    max_count = 0\n    for count in count_dict.values():\n        if count > max_count:\n            max_count = count\n\n    # Create a new dictionary containing only the letters with the maximum count\n    max_count_dict = {}\n    for letter, count in count_dict.items():\n        if count == max_count:\n            max_count_dict[letter] = count\n\n    return max_count_dict"}
{"task_id": "HumanEval/112", "completion": "    result = ''.join([char for char in s if char not in c])\n    is_palindrome = result == result[::-1]\n    return result, is_palindrome"}
{"task_id": "HumanEval/113", "completion": "    result = []\n    for i, s in enumerate(lst):\n        odd_count = sum(1 for c in s if int(c) % 2 != 0)\n        output_string = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\"\n        result.append(output_string)\n    return result"}
{"task_id": "HumanEval/114", "completion": "    min_sum = float('inf')\n    for i in range(len(nums)):\n        current_sum = 0\n        for j in range(i, len(nums)):\n            current_sum += nums[j]\n            if current_sum < min_sum:\n                min_sum = current_sum\n    return min_sum"}
{"task_id": "HumanEval/115", "completion": "    total_lowerings = 0\n    for row in grid:\n        well_water_units = sum(row)\n        well_lowerings = math.ceil(well_water_units / capacity)\n        total_lowerings += well_lowerings\n    return total_lowerings"}
{"task_id": "HumanEval/116", "completion": "    def count_ones(n):\n        return bin(n).count('1')\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))"}
{"task_id": "HumanEval/117", "completion": "    def count_consonants(word):\n        consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n        count = 0\n        for char in word:\n            if char in consonants:\n                count += 1\n        return count\n\n    words = s.split()\n    result = []\n\n    for word in words:\n        if count_consonants(word) == n:\n            result.append(word)\n\n    return result"}
{"task_id": "HumanEval/118", "completion": ""}
{"task_id": "HumanEval/119", "completion": "    for i in range(2):\n        s = lst[i] + lst[1 - i]\n        balance = 0\n        for c in s:\n            if c == '(':\n                balance += 1\n            else:\n                balance -= 1\n            if balance < 0:\n                break\n        if balance == 0:\n            return 'Yes'\n    return 'No'"}
{"task_id": "HumanEval/120", "completion": "    if k == 0:\n        return []\n\n    arr.sort()\n    return arr[-k:]"}
{"task_id": "HumanEval/121", "completion": ""}
{"task_id": "HumanEval/122", "completion": ""}
{"task_id": "HumanEval/123", "completion": "    odd_collatz = []\n    while n != 1:\n        if n % 2 == 1:\n            odd_collatz.append(n)\n        n = n // 2 if n % 2 == 0 else 3 * n + 1\n    odd_collatz.append(1)\n    return sorted(odd_collatz)"}
{"task_id": "HumanEval/124", "completion": "    if not date:\n        return False\n\n    if len(date) != 10 or date[2] != '-' or date[5] != '-':\n        return False\n\n    try:\n        month, day, year = int(date[:2]), int(date[3:5]), int(date[6:])\n    except ValueError:\n        return False\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    else:  # month == 2\n        if day < 1 or day > 29:\n            return False\n\n    return True"}
{"task_id": "HumanEval/125", "completion": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.split(\",\")\n    else:\n        odd_count = 0\n        for char in txt:\n            if char.islower() and (ord(char) - ord('a')) % 2 == 1:\n                odd_count += 1\n        return odd_count"}
{"task_id": "HumanEval/126", "completion": "    if len(lst) <= 1:\n        return True\n\n    duplicate_count = {}\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n        if lst[i] == lst[i + 1]:\n            if lst[i] in duplicate_count:\n                duplicate_count[lst[i]] += 1\n                if duplicate_count[lst[i]] > 1:\n                    return False\n            else:\n                duplicate_count[lst[i]] = 1\n\n    return True"}
{"task_id": "HumanEval/127", "completion": ""}
{"task_id": "HumanEval/128", "completion": "    if not arr:\n        return None\n\n    sum_magnitudes = 0\n    product_signs = 1\n\n    for num in arr:\n        sum_magnitudes += abs(num)\n        if num < 0:\n            product_signs *= -1\n        elif num == 0:\n            product_signs = 0\n            break\n\n    return sum_magnitudes * product_signs"}
{"task_id": "HumanEval/129", "completion": "    def neighbors(i, j, N):\n        for x, y in ((i-1, j), (i+1, j), (i, j-1), (i, j+1)):\n            if 0 <= x < N and 0 <= y < N:\n                yield x, y\n\n    N = len(grid)\n    min_path = None\n    for i in range(N):\n        for j in range(N):\n            queue = [([grid[i][j]], k-1, i, j)]\n            while queue:\n                path, remaining_steps, x, y = queue.pop(0)\n                if remaining_steps == 0:\n                    if min_path is None or path < min_path:\n                        min_path = path\n                else:\n                    for nx, ny in neighbors(x, y, N):\n                        new_path = path + [grid[nx][ny]]\n                        if min_path is None or new_path < min_path:\n                            queue.append((new_path, remaining_steps - 1, nx, ny))\n                            queue.sort(key=lambda x: x[0])\n\n    return min_path"}
{"task_id": "HumanEval/130", "completion": "    def tribonacci(n):\n        if n == 1:\n            return 3\n        elif n % 2 == 0:\n            return 1 + n // 2\n        else:\n            return tribonacci(n - 1) + tribonacci(n - 2) + tribonacci(n + 1)\n\n    result = []\n    for i in range(n + 1):\n        result.append(tribonacci(i))\n    return result"}
{"task_id": "HumanEval/131", "completion": "    product = 1\n    has_odd_digit = False\n\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            has_odd_digit = True\n            product *= int(digit)\n\n    return product if has_odd_digit else 0"}
{"task_id": "HumanEval/132", "completion": ""}
{"task_id": "HumanEval/133", "completion": "import math\n\ndef sum_squares(lst):\n    squared_sum = 0\n    for num in lst:\n        rounded_num = math.ceil(num)\n        squared_sum += rounded_num ** 2\n    return squared_sum"}
{"task_id": "HumanEval/134", "completion": "    if not txt or txt[-1].isspace():\n        return False\n\n    if txt[-1].isalpha() and (len(txt) == 1 or txt[-2].isspace()):\n        return True\n\n    return False"}
{"task_id": "HumanEval/135", "completion": "    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            largest_index = i\n    return largest_index"}
{"task_id": "HumanEval/136", "completion": "    largest_negative = None\n    smallest_positive = None\n\n    for num in lst:\n        if num < 0:\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        elif num > 0:\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    return (largest_negative, smallest_positive)"}
{"task_id": "HumanEval/137", "completion": "    # Convert strings to floats if necessary\n    a_float = float(a.replace(',', '.')) if isinstance(a, str) else a\n    b_float = float(b.replace(',', '.')) if isinstance(b, str) else b\n\n    # Compare the values\n    if a_float > b_float:\n        return a\n    elif a_float < b_float:\n        return b\n    else:\n        return None"}
{"task_id": "HumanEval/138", "completion": "    if n < 8:\n        return False\n    return (n - 8) % 2 == 0"}
{"task_id": "HumanEval/139", "completion": "    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    brazilian_factorial = 1\n    for i in range(1, n + 1):\n        brazilian_factorial *= factorial(i)\n\n    return brazilian_factorial"}
{"task_id": "HumanEval/140", "completion": ""}
{"task_id": "HumanEval/141", "completion": "    # Count the number of digits in the file name\n    digit_count = sum(c.isdigit() for c in file_name)\n\n    # Check if there is exactly one dot in the file name\n    dot_count = file_name.count('.')\n\n    # Split the file name into name and extension\n    name_parts = file_name.split('.')\n\n    # Check if the file name is valid\n    if (digit_count <= 3 and dot_count == 1 and\n            name_parts[0] and name_parts[0][0].isalpha() and\n            name_parts[1] in ['txt', 'exe', 'dll']):\n        return 'Yes'\n    else:\n        return 'No'"}
{"task_id": "HumanEval/142", "completion": ""}
{"task_id": "HumanEval/143", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "completion": "    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def to_fraction(fraction_str):\n        num, den = map(int, fraction_str.split('/'))\n        return num, den\n\n    x_num, x_den = to_fraction(x)\n    n_num, n_den = to_fraction(n)\n\n    num = x_num * n_num\n    den = x_den * n_den\n\n    common_divisor = gcd(num, den)\n\n    simplified_num = num // common_divisor\n    simplified_den = den // common_divisor\n\n    return simplified_den == 1"}
{"task_id": "HumanEval/145", "completion": ""}
{"task_id": "HumanEval/146", "completion": "    count = 0\n    for num in nums:\n        if num > 10:\n            first_digit = int(str(num)[0])\n            last_digit = int(str(num)[-1])\n            if first_digit % 2 != 0 and last_digit % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "HumanEval/147", "completion": "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count"}
{"task_id": "HumanEval/148", "completion": "    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n\n    if planet1_index < planet2_index:\n        return tuple(planets[planet1_index + 1:planet2_index])\n    else:\n        return tuple(planets[planet2_index + 1:planet1_index])"}
{"task_id": "HumanEval/149", "completion": "    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    even_length_strings.sort(key=lambda x: (len(x), x))\n    return even_length_strings"}
{"task_id": "HumanEval/150", "completion": "    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        return True\n\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "completion": "    result = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 == 1:\n            result += num ** 2\n    return result"}
{"task_id": "HumanEval/152", "completion": "    result = []\n    for i in range(len(game)):\n        difference = abs(game[i] - guess[i])\n        result.append(difference)\n    return result"}
{"task_id": "HumanEval/153", "completion": "    def extension_strength(extension):\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        return cap_count - sm_count\n\n    strongest_extension = max(extensions, key=extension_strength)\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "completion": "    for i in range(len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n    return False"}
{"task_id": "HumanEval/155", "completion": "    num = abs(num)\n    even_count = 0\n    odd_count = 0\n\n    if num == 0:\n        even_count = 1\n    else:\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n            num //= 10\n\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "completion": "    val = [\n        1000, 900, 500, 400,\n        100, 90, 50, 40,\n        10, 9, 5, 4,\n        1\n        ]\n    syb = [\n        \"m\", \"cm\", \"d\", \"cd\",\n        \"c\", \"xc\", \"l\", \"xl\",\n        \"x\", \"ix\", \"v\", \"iv\",\n        \"i\"\n        ]\n    roman_num = ''\n    i = 0\n    while number > 0:\n        for _ in range(number // val[i]):\n            roman_num += syb[i]\n            number -= val[i]\n        i += 1\n    return roman_num"}
{"task_id": "HumanEval/157", "completion": "    sides = sorted([a, b, c])\n    return sides[0] ** 2 + sides[1] ** 2 == sides[2] ** 2"}
{"task_id": "HumanEval/158", "completion": "    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = len(set(word))\n        if unique_chars > max_unique_chars:\n            max_unique_chars = unique_chars\n            max_word = word\n        elif unique_chars == max_unique_chars:\n            max_word = min(max_word, word)\n\n    return max_word"}
{"task_id": "HumanEval/159", "completion": "    # Calculate the number of carrots to eat\n    carrots_to_eat = min(need, remaining)\n\n    # Update the total number of eaten carrots and the remaining carrots\n    total_eaten = number + carrots_to_eat\n    remaining -= carrots_to_eat\n\n    # Return the result as an array\n    return [total_eaten, remaining]"}
{"task_id": "HumanEval/160", "completion": "    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Invalid input: operator and operand lists have incorrect lengths\")\n\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += \" \" + operator[i] + \" \" + str(operand[i + 1])\n\n    result = eval(expression)\n    return result"}
{"task_id": "HumanEval/161", "completion": "    if not any(c.isalpha() for c in s):\n        return s[::-1]\n\n    return ''.join(c.lower() if c.isupper() else c.upper() for c in s)"}
{"task_id": "HumanEval/162", "completion": "    import hashlib\n\n    if not text:\n        return None\n\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode('utf-8'))\n    return md5_hash.hexdigest()"}
{"task_id": "HumanEval/163", "completion": ""}
